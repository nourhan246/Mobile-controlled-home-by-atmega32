
DOOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  00005308  0000537c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000441c  00000000  00000000  00005508  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010b5  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000a9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000ab19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000ac89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000c8d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000d7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000e56c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000e6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000e959  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f127  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 07 13 	call	0x260e	; 0x260e <main>
      7a:	0c 94 82 29 	jmp	0x5304	; 0x5304 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4b 29 	jmp	0x5296	; 0x5296 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 ea       	ldi	r26, 0xA2	; 162
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 57 29 	jmp	0x52ae	; 0x52ae <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 57 29 	jmp	0x52ae	; 0x52ae <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4b 29 	jmp	0x5296	; 0x5296 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 ea       	ldi	r24, 0xA2	; 162
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 57 29 	jmp	0x52ae	; 0x52ae <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 57 29 	jmp	0x52ae	; 0x52ae <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 57 29 	jmp	0x52ae	; 0x52ae <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 5b 29 	jmp	0x52b6	; 0x52b6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_VidSetPinValue>:

#include "DIO_Register.h"


void DIO_VidSetPinValue(u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8PinValue)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	
		if (LOC_u8PinValue==1)
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	09 f0       	breq	.+2      	; 0xb58 <DIO_VidSetPinValue+0x22>
     b56:	6f c0       	rjmp	.+222    	; 0xc36 <DIO_VidSetPinValue+0x100>
		{
			switch (LOC_u8Port)
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	49 f1       	breq	.+82     	; 0xbbe <DIO_VidSetPinValue+0x88>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <DIO_VidSetPinValue+0x4a>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	61 f0       	breq	.+24     	; 0xb96 <DIO_VidSetPinValue+0x60>
     b7e:	d2 c0       	rjmp	.+420    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	71 f1       	breq	.+92     	; 0xbe6 <DIO_VidSetPinValue+0xb0>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	e9 f1       	breq	.+122    	; 0xc0e <DIO_VidSetPinValue+0xd8>
     b94:	c7 c0       	rjmp	.+398    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
			{
				case 0: SET_BIT(PORTA,LOC_u8Pin); break;
     b96:	ab e3       	ldi	r26, 0x3B	; 59
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	eb e3       	ldi	r30, 0x3B	; 59
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_VidSetPinValue+0x7e>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_VidSetPinValue+0x7a>
     bb8:	84 2b       	or	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	b3 c0       	rjmp	.+358    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
				case 1: SET_BIT(PORTB,LOC_u8Pin); break;
     bbe:	a8 e3       	ldi	r26, 0x38	; 56
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 e3       	ldi	r30, 0x38	; 56
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_VidSetPinValue+0xa6>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_VidSetPinValue+0xa2>
     be0:	84 2b       	or	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	9f c0       	rjmp	.+318    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
				case 2: SET_BIT(PORTC,LOC_u8Pin); break;
     be6:	a5 e3       	ldi	r26, 0x35	; 53
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e5 e3       	ldi	r30, 0x35	; 53
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <DIO_VidSetPinValue+0xce>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <DIO_VidSetPinValue+0xca>
     c08:	84 2b       	or	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	8b c0       	rjmp	.+278    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
				case 3: SET_BIT(PORTD,LOC_u8Pin); break;
     c0e:	a2 e3       	ldi	r26, 0x32	; 50
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e2 e3       	ldi	r30, 0x32	; 50
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 2e       	mov	r0, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_VidSetPinValue+0xf6>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <DIO_VidSetPinValue+0xf2>
     c30:	84 2b       	or	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	77 c0       	rjmp	.+238    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
			}
		
		}
		
		else if (LOC_u8PinValue==0)
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	88 23       	and	r24, r24
     c3a:	09 f0       	breq	.+2      	; 0xc3e <DIO_VidSetPinValue+0x108>
     c3c:	73 c0       	rjmp	.+230    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
		{
			switch (LOC_u8Port)
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	3d 83       	std	Y+5, r19	; 0x05
     c46:	2c 83       	std	Y+4, r18	; 0x04
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	91 05       	cpc	r25, r1
     c50:	59 f1       	breq	.+86     	; 0xca8 <DIO_VidSetPinValue+0x172>
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	3d 81       	ldd	r19, Y+5	; 0x05
     c56:	22 30       	cpi	r18, 0x02	; 2
     c58:	31 05       	cpc	r19, r1
     c5a:	2c f4       	brge	.+10     	; 0xc66 <DIO_VidSetPinValue+0x130>
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	69 f0       	breq	.+26     	; 0xc7e <DIO_VidSetPinValue+0x148>
     c64:	5f c0       	rjmp	.+190    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	89 f1       	breq	.+98     	; 0xcd2 <DIO_VidSetPinValue+0x19c>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	91 05       	cpc	r25, r1
     c78:	09 f4       	brne	.+2      	; 0xc7c <DIO_VidSetPinValue+0x146>
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <DIO_VidSetPinValue+0x1c6>
     c7c:	53 c0       	rjmp	.+166    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
			{
				case 0: CLR_BIT(PORTA,LOC_u8Pin); break;
     c7e:	ab e3       	ldi	r26, 0x3B	; 59
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	eb e3       	ldi	r30, 0x3B	; 59
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_VidSetPinValue+0x166>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_VidSetPinValue+0x162>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	3e c0       	rjmp	.+124    	; 0xd24 <DIO_VidSetPinValue+0x1ee>
				case 1: CLR_BIT(PORTB,LOC_u8Pin); break;
     ca8:	a8 e3       	ldi	r26, 0x38	; 56
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e8 e3       	ldi	r30, 0x38	; 56
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 2e       	mov	r0, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_VidSetPinValue+0x190>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_VidSetPinValue+0x18c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	29 c0       	rjmp	.+82     	; 0xd24 <DIO_VidSetPinValue+0x1ee>
				case 2: CLR_BIT(PORTC,LOC_u8Pin); break;
     cd2:	a5 e3       	ldi	r26, 0x35	; 53
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e5 e3       	ldi	r30, 0x35	; 53
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <DIO_VidSetPinValue+0x1ba>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <DIO_VidSetPinValue+0x1b6>
     cf4:	80 95       	com	r24
     cf6:	84 23       	and	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	14 c0       	rjmp	.+40     	; 0xd24 <DIO_VidSetPinValue+0x1ee>
				case 3: CLR_BIT(PORTD,LOC_u8Pin); break;
     cfc:	a2 e3       	ldi	r26, 0x32	; 50
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e2 e3       	ldi	r30, 0x32	; 50
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_VidSetPinValue+0x1e4>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_VidSetPinValue+0x1e0>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
			}
		
		}
	
}
     d24:	27 96       	adiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <DIO_U8GetPinValue>:


u8 DIO_U8GetPinValue(u8 LOC_U8Port, u8 LOC_U8Pin)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <DIO_U8GetPinValue+0x6>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <DIO_U8GetPinValue+0x8>
     d3e:	0f 92       	push	r0
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	8a 83       	std	Y+2, r24	; 0x02
     d46:	6b 83       	std	Y+3, r22	; 0x03

	u8 u8ResultLocal;
	
	switch (LOC_U8Port)
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	3d 83       	std	Y+5, r19	; 0x05
     d50:	2c 83       	std	Y+4, r18	; 0x04
     d52:	4c 81       	ldd	r20, Y+4	; 0x04
     d54:	5d 81       	ldd	r21, Y+5	; 0x05
     d56:	41 30       	cpi	r20, 0x01	; 1
     d58:	51 05       	cpc	r21, r1
     d5a:	41 f1       	breq	.+80     	; 0xdac <DIO_U8GetPinValue+0x76>
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	9d 81       	ldd	r25, Y+5	; 0x05
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	91 05       	cpc	r25, r1
     d64:	34 f4       	brge	.+12     	; 0xd72 <DIO_U8GetPinValue+0x3c>
     d66:	2c 81       	ldd	r18, Y+4	; 0x04
     d68:	3d 81       	ldd	r19, Y+5	; 0x05
     d6a:	21 15       	cp	r18, r1
     d6c:	31 05       	cpc	r19, r1
     d6e:	61 f0       	breq	.+24     	; 0xd88 <DIO_U8GetPinValue+0x52>
     d70:	52 c0       	rjmp	.+164    	; 0xe16 <DIO_U8GetPinValue+0xe0>
     d72:	4c 81       	ldd	r20, Y+4	; 0x04
     d74:	5d 81       	ldd	r21, Y+5	; 0x05
     d76:	42 30       	cpi	r20, 0x02	; 2
     d78:	51 05       	cpc	r21, r1
     d7a:	51 f1       	breq	.+84     	; 0xdd0 <DIO_U8GetPinValue+0x9a>
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	b9 f1       	breq	.+110    	; 0xdf4 <DIO_U8GetPinValue+0xbe>
     d86:	47 c0       	rjmp	.+142    	; 0xe16 <DIO_U8GetPinValue+0xe0>
	 {
		case 0: u8ResultLocal= GET_BIT(PINA,LOC_U8Pin); break;
     d88:	e9 e3       	ldi	r30, 0x39	; 57
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a9 01       	movw	r20, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_U8GetPinValue+0x6a>
     d9c:	55 95       	asr	r21
     d9e:	47 95       	ror	r20
     da0:	8a 95       	dec	r24
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_U8GetPinValue+0x66>
     da4:	ca 01       	movw	r24, r20
     da6:	81 70       	andi	r24, 0x01	; 1
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	35 c0       	rjmp	.+106    	; 0xe16 <DIO_U8GetPinValue+0xe0>
		case 1: u8ResultLocal= GET_BIT(PINB,LOC_U8Pin); break;
     dac:	e6 e3       	ldi	r30, 0x36	; 54
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a9 01       	movw	r20, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_U8GetPinValue+0x8e>
     dc0:	55 95       	asr	r21
     dc2:	47 95       	ror	r20
     dc4:	8a 95       	dec	r24
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_U8GetPinValue+0x8a>
     dc8:	ca 01       	movw	r24, r20
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	23 c0       	rjmp	.+70     	; 0xe16 <DIO_U8GetPinValue+0xe0>
		case 2: u8ResultLocal= GET_BIT(PINC,LOC_U8Pin); break;
     dd0:	e3 e3       	ldi	r30, 0x33	; 51
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a9 01       	movw	r20, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_U8GetPinValue+0xb2>
     de4:	55 95       	asr	r21
     de6:	47 95       	ror	r20
     de8:	8a 95       	dec	r24
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_U8GetPinValue+0xae>
     dec:	ca 01       	movw	r24, r20
     dee:	81 70       	andi	r24, 0x01	; 1
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	11 c0       	rjmp	.+34     	; 0xe16 <DIO_U8GetPinValue+0xe0>
		case 3: u8ResultLocal= GET_BIT(PIND,LOC_U8Pin); break;
     df4:	e0 e3       	ldi	r30, 0x30	; 48
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a9 01       	movw	r20, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_U8GetPinValue+0xd6>
     e08:	55 95       	asr	r21
     e0a:	47 95       	ror	r20
     e0c:	8a 95       	dec	r24
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_U8GetPinValue+0xd2>
     e10:	ca 01       	movw	r24, r20
     e12:	81 70       	andi	r24, 0x01	; 1
     e14:	89 83       	std	Y+1, r24	; 0x01
	 }
	return u8ResultLocal;
     e16:	89 81       	ldd	r24, Y+1	; 0x01
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <DIO_VidSetPinDirection>:


void DIO_VidSetPinDirection (u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8State)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	27 97       	sbiw	r28, 0x07	; 7
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	6a 83       	std	Y+2, r22	; 0x02
     e40:	4b 83       	std	Y+3, r20	; 0x03

		if (LOC_u8State==1 )
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	09 f0       	breq	.+2      	; 0xe4a <DIO_VidSetPinDirection+0x22>
     e48:	6f c0       	rjmp	.+222    	; 0xf28 <DIO_VidSetPinDirection+0x100>
		{
		
			switch (LOC_u8Port)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3f 83       	std	Y+7, r19	; 0x07
     e52:	2e 83       	std	Y+6, r18	; 0x06
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	49 f1       	breq	.+82     	; 0xeb0 <DIO_VidSetPinDirection+0x88>
     e5e:	2e 81       	ldd	r18, Y+6	; 0x06
     e60:	3f 81       	ldd	r19, Y+7	; 0x07
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	2c f4       	brge	.+10     	; 0xe72 <DIO_VidSetPinDirection+0x4a>
     e68:	8e 81       	ldd	r24, Y+6	; 0x06
     e6a:	9f 81       	ldd	r25, Y+7	; 0x07
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	61 f0       	breq	.+24     	; 0xe88 <DIO_VidSetPinDirection+0x60>
     e70:	d2 c0       	rjmp	.+420    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
     e72:	2e 81       	ldd	r18, Y+6	; 0x06
     e74:	3f 81       	ldd	r19, Y+7	; 0x07
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	71 f1       	breq	.+92     	; 0xed8 <DIO_VidSetPinDirection+0xb0>
     e7c:	8e 81       	ldd	r24, Y+6	; 0x06
     e7e:	9f 81       	ldd	r25, Y+7	; 0x07
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	91 05       	cpc	r25, r1
     e84:	e9 f1       	breq	.+122    	; 0xf00 <DIO_VidSetPinDirection+0xd8>
     e86:	c7 c0       	rjmp	.+398    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
			{
				case 0: SET_BIT(DDRA,LOC_u8Pin); break;
     e88:	aa e3       	ldi	r26, 0x3A	; 58
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ea e3       	ldi	r30, 0x3A	; 58
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_VidSetPinDirection+0x7e>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_VidSetPinDirection+0x7a>
     eaa:	84 2b       	or	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	b3 c0       	rjmp	.+358    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
				case 1: SET_BIT(DDRB,LOC_u8Pin); break;
     eb0:	a7 e3       	ldi	r26, 0x37	; 55
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e3       	ldi	r30, 0x37	; 55
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_VidSetPinDirection+0xa6>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_VidSetPinDirection+0xa2>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	9f c0       	rjmp	.+318    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
				case 2: SET_BIT(DDRC,LOC_u8Pin); break;
     ed8:	a4 e3       	ldi	r26, 0x34	; 52
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e4 e3       	ldi	r30, 0x34	; 52
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_VidSetPinDirection+0xce>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_VidSetPinDirection+0xca>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	8b c0       	rjmp	.+278    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
				case 3: SET_BIT(DDRD,LOC_u8Pin); break;
     f00:	a1 e3       	ldi	r26, 0x31	; 49
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e3       	ldi	r30, 0x31	; 49
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_VidSetPinDirection+0xf6>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_VidSetPinDirection+0xf2>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	77 c0       	rjmp	.+238    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
			}
		}
		
		else if(LOC_u8State==0 )
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	88 23       	and	r24, r24
     f2c:	09 f0       	breq	.+2      	; 0xf30 <DIO_VidSetPinDirection+0x108>
     f2e:	73 c0       	rjmp	.+230    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
		{
			switch (LOC_u8Port)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3d 83       	std	Y+5, r19	; 0x05
     f38:	2c 83       	std	Y+4, r18	; 0x04
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	59 f1       	breq	.+86     	; 0xf9a <DIO_VidSetPinDirection+0x172>
     f44:	2c 81       	ldd	r18, Y+4	; 0x04
     f46:	3d 81       	ldd	r19, Y+5	; 0x05
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	2c f4       	brge	.+10     	; 0xf58 <DIO_VidSetPinDirection+0x130>
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	9d 81       	ldd	r25, Y+5	; 0x05
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f0       	breq	.+26     	; 0xf70 <DIO_VidSetPinDirection+0x148>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
     f58:	2c 81       	ldd	r18, Y+4	; 0x04
     f5a:	3d 81       	ldd	r19, Y+5	; 0x05
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	89 f1       	breq	.+98     	; 0xfc4 <DIO_VidSetPinDirection+0x19c>
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	9d 81       	ldd	r25, Y+5	; 0x05
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <DIO_VidSetPinDirection+0x146>
     f6c:	40 c0       	rjmp	.+128    	; 0xfee <DIO_VidSetPinDirection+0x1c6>
     f6e:	53 c0       	rjmp	.+166    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
			{
				case 0: CLR_BIT(DDRA,LOC_u8Pin); break;
     f70:	aa e3       	ldi	r26, 0x3A	; 58
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ea e3       	ldi	r30, 0x3A	; 58
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_VidSetPinDirection+0x166>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_VidSetPinDirection+0x162>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	3e c0       	rjmp	.+124    	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
				case 1: CLR_BIT(DDRB,LOC_u8Pin); break;
     f9a:	a7 e3       	ldi	r26, 0x37	; 55
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e7 e3       	ldi	r30, 0x37	; 55
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_VidSetPinDirection+0x190>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_VidSetPinDirection+0x18c>
     fbc:	80 95       	com	r24
     fbe:	84 23       	and	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	29 c0       	rjmp	.+82     	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
				case 2: CLR_BIT(DDRC,LOC_u8Pin); break;
     fc4:	a4 e3       	ldi	r26, 0x34	; 52
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e4 e3       	ldi	r30, 0x34	; 52
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_VidSetPinDirection+0x1ba>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_VidSetPinDirection+0x1b6>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	14 c0       	rjmp	.+40     	; 0x1016 <DIO_VidSetPinDirection+0x1ee>
				case 3: CLR_BIT(DDRD,LOC_u8Pin); break;
     fee:	a1 e3       	ldi	r26, 0x31	; 49
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e1 e3       	ldi	r30, 0x31	; 49
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_VidSetPinDirection+0x1e4>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_VidSetPinDirection+0x1e0>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
			}
		}
		
}
    1016:	27 96       	adiw	r28, 0x07	; 7
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_VidSetPortDirection>:


void DIO_VidSetPortDirection (u8 LOC_U8Port, u8 LOC_U8dir)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_VidSetPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <DIO_VidSetPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (LOC_U8Port)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	3c 83       	std	Y+4, r19	; 0x04
    1040:	2b 83       	std	Y+3, r18	; 0x03
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	9c 81       	ldd	r25, Y+4	; 0x04
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	91 05       	cpc	r25, r1
    104a:	d1 f0       	breq	.+52     	; 0x1080 <DIO_VidSetPortDirection+0x58>
    104c:	2b 81       	ldd	r18, Y+3	; 0x03
    104e:	3c 81       	ldd	r19, Y+4	; 0x04
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	2c f4       	brge	.+10     	; 0x1060 <DIO_VidSetPortDirection+0x38>
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	61 f0       	breq	.+24     	; 0x1076 <DIO_VidSetPortDirection+0x4e>
    105e:	1e c0       	rjmp	.+60     	; 0x109c <DIO_VidSetPortDirection+0x74>
    1060:	2b 81       	ldd	r18, Y+3	; 0x03
    1062:	3c 81       	ldd	r19, Y+4	; 0x04
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	81 f0       	breq	.+32     	; 0x108a <DIO_VidSetPortDirection+0x62>
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	91 05       	cpc	r25, r1
    1072:	81 f0       	breq	.+32     	; 0x1094 <DIO_VidSetPortDirection+0x6c>
    1074:	13 c0       	rjmp	.+38     	; 0x109c <DIO_VidSetPortDirection+0x74>
	{
		case     0: DDRA = LOC_U8dir; break;
    1076:	ea e3       	ldi	r30, 0x3A	; 58
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
    107e:	0e c0       	rjmp	.+28     	; 0x109c <DIO_VidSetPortDirection+0x74>
		case     1: DDRB = LOC_U8dir; break;
    1080:	e7 e3       	ldi	r30, 0x37	; 55
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 83       	st	Z, r24
    1088:	09 c0       	rjmp	.+18     	; 0x109c <DIO_VidSetPortDirection+0x74>
		case     2: DDRC = LOC_U8dir; break;
    108a:	e4 e3       	ldi	r30, 0x34	; 52
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
    1092:	04 c0       	rjmp	.+8      	; 0x109c <DIO_VidSetPortDirection+0x74>
		case     3: DDRD = LOC_U8dir; break;
    1094:	e1 e3       	ldi	r30, 0x31	; 49
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	80 83       	st	Z, r24
		default:       break;
	}
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <DIO_VidSetPortValue>:


void DIO_VidSetPortValue (u8 LOC_U8Port, u8 LOC_U8Value)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_VidSetPortValue+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_VidSetPortValue+0x8>
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (LOC_U8Port)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	3c 83       	std	Y+4, r19	; 0x04
    10c2:	2b 83       	std	Y+3, r18	; 0x03
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	91 05       	cpc	r25, r1
    10cc:	d1 f0       	breq	.+52     	; 0x1102 <DIO_VidSetPortValue+0x58>
    10ce:	2b 81       	ldd	r18, Y+3	; 0x03
    10d0:	3c 81       	ldd	r19, Y+4	; 0x04
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <DIO_VidSetPortValue+0x38>
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	61 f0       	breq	.+24     	; 0x10f8 <DIO_VidSetPortValue+0x4e>
    10e0:	1e c0       	rjmp	.+60     	; 0x111e <DIO_VidSetPortValue+0x74>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	81 f0       	breq	.+32     	; 0x110c <DIO_VidSetPortValue+0x62>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	83 30       	cpi	r24, 0x03	; 3
    10f2:	91 05       	cpc	r25, r1
    10f4:	81 f0       	breq	.+32     	; 0x1116 <DIO_VidSetPortValue+0x6c>
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <DIO_VidSetPortValue+0x74>
	{
		case     0: PORTA = LOC_U8Value ; break;
    10f8:	eb e3       	ldi	r30, 0x3B	; 59
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	80 83       	st	Z, r24
    1100:	0e c0       	rjmp	.+28     	; 0x111e <DIO_VidSetPortValue+0x74>
		case     1: PORTB = LOC_U8Value; break;
    1102:	e8 e3       	ldi	r30, 0x38	; 56
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	80 83       	st	Z, r24
    110a:	09 c0       	rjmp	.+18     	; 0x111e <DIO_VidSetPortValue+0x74>
		case     2: PORTC = LOC_U8Value; break;
    110c:	e5 e3       	ldi	r30, 0x35	; 53
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	04 c0       	rjmp	.+8      	; 0x111e <DIO_VidSetPortValue+0x74>
		case     3: PORTD = LOC_U8Value; break;
    1116:	e2 e3       	ldi	r30, 0x32	; 50
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
		default:        break;
	}
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <DIO_VidTogglePin>:

void DIO_VidTogglePin (u8 LOC_U8Port, u8 LOC_U8Pin){
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_VidTogglePin+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_VidTogglePin+0x8>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	6b 83       	std	Y+3, r22	; 0x03
	u8 x=DIO_U8GetPinValue(LOC_U8Port,LOC_U8Pin);
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	6b 81       	ldd	r22, Y+3	; 0x03
    1140:	0e 94 9b 06 	call	0xd36	; 0xd36 <DIO_U8GetPinValue>
    1144:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSetPinValue(LOC_U8Port,LOC_U8Pin,!x);
    1146:	1c 82       	std	Y+4, r1	; 0x04
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	88 23       	and	r24, r24
    114c:	11 f4       	brne	.+4      	; 0x1152 <DIO_VidTogglePin+0x26>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	8c 83       	std	Y+4, r24	; 0x04
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	6b 81       	ldd	r22, Y+3	; 0x03
    1156:	4c 81       	ldd	r20, Y+4	; 0x04
    1158:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <EEPROM_Init>:
#include <avr/io.h>
#include "IIC_interface.h"
//#include "DIO_Interface.h"

void EEPROM_Init(void)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
  I2C_Init();
    1172:	0e 94 b8 09 	call	0x1370	; 0x1370 <I2C_Init>
}
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	08 95       	ret

0000117c <EEPROM_WriteByte>:

unsigned char EEPROM_WriteByte(unsigned int addr, unsigned char data)
{
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	00 d0       	rcall	.+0      	; 0x1182 <EEPROM_WriteByte+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <EEPROM_WriteByte+0x8>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <EEPROM_WriteByte+0xa>
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	9c 83       	std	Y+4, r25	; 0x04
    118c:	8b 83       	std	Y+3, r24	; 0x03
    118e:	6d 83       	std	Y+5, r22	; 0x05
  unsigned char state = 0;
    1190:	1a 82       	std	Y+2, r1	; 0x02
  unsigned char _3MSBAddr = 0;
    1192:	19 82       	std	Y+1, r1	; 0x01

  // Start TWI
  TWIStart();
    1194:	0e 94 d5 09 	call	0x13aa	; 0x13aa <TWIStart>
  // Get State
  state = TWIGetStatus();
    1198:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    119c:	8a 83       	std	Y+2, r24	; 0x02
  // Check if TWI Start
  if (state != TW_START)
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	88 30       	cpi	r24, 0x08	; 8
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <EEPROM_WriteByte+0x2c>
  {
    //  PORTA |= 0x02;
    return 0;
    11a4:	1e 82       	std	Y+6, r1	; 0x06
    11a6:	2f c0       	rjmp	.+94     	; 0x1206 <EEPROM_WriteByte+0x8a>
  // Send Slave Address -> For EEPROM 24cXX
  // The Slave Address of Chip is 0b1010, so have Three bits free
  // We can take a part from 11 bit address and send it with Device Add
  // Send 3 MSBs From Address "As Device Address"
  // Set Action To Write -> 0
  _3MSBAddr = ((unsigned char) ((addr & 0x0700) >> 7));
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	80 70       	andi	r24, 0x00	; 0
    11ae:	97 70       	andi	r25, 0x07	; 7
    11b0:	88 0f       	add	r24, r24
    11b2:	89 2f       	mov	r24, r25
    11b4:	88 1f       	adc	r24, r24
    11b6:	99 0b       	sbc	r25, r25
    11b8:	91 95       	neg	r25
    11ba:	89 83       	std	Y+1, r24	; 0x01
  // TWIWrite(0xA0|_3MSBAddr);
  TWIWrite(0xA0);
    11bc:	80 ea       	ldi	r24, 0xA0	; 160
    11be:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <TWIWrite>
  // Get Status
  state = TWIGetStatus();
    11c2:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    11c6:	8a 83       	std	Y+2, r24	; 0x02
  // Check if it is TW_MT_SLA_ACK
  if (state != TW_MT_SLA_ACK)
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	88 31       	cpi	r24, 0x18	; 24
    11cc:	11 f0       	breq	.+4      	; 0x11d2 <EEPROM_WriteByte+0x56>
  {
   // PORTA |= 0x02;
    return 0;
    11ce:	1e 82       	std	Y+6, r1	; 0x06
    11d0:	1a c0       	rjmp	.+52     	; 0x1206 <EEPROM_WriteByte+0x8a>
  }

  // Write the Rest of Location Address(8 Bits)
  TWIWrite((unsigned char) addr);
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <TWIWrite>

  // Get State
  state = TWIGetStatus();
    11d8:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    11dc:	8a 83       	std	Y+2, r24	; 0x02

  // check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 32       	cpi	r24, 0x28	; 40
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <EEPROM_WriteByte+0x6c>
  {
//    PORTA |= 0x02;
    return 0;
    11e4:	1e 82       	std	Y+6, r1	; 0x06
    11e6:	0f c0       	rjmp	.+30     	; 0x1206 <EEPROM_WriteByte+0x8a>
  }

  // Send Data
  TWIWrite(data);
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <TWIWrite>

  // Get Status
  state = TWIGetStatus();
    11ee:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    11f2:	8a 83       	std	Y+2, r24	; 0x02

  // Check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	88 32       	cpi	r24, 0x28	; 40
    11f8:	11 f0       	breq	.+4      	; 0x11fe <EEPROM_WriteByte+0x82>
  {
    //   PORTA |= 0x02;
    return 0;
    11fa:	1e 82       	std	Y+6, r1	; 0x06
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <EEPROM_WriteByte+0x8a>
  }

  // TWI Stop
  TWIStop();
    11fe:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWIStop>
  // Return Done
  return 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	8e 83       	std	Y+6, r24	; 0x06
    1206:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1208:	26 96       	adiw	r28, 0x06	; 6
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <EEPROM_ReadByte>:

unsigned char EEPROM_ReadByte(unsigned int addr, unsigned char chs[],unsigned int num)
{
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	2b 97       	sbiw	r28, 0x0b	; 11
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
    1236:	78 87       	std	Y+8, r23	; 0x08
    1238:	6f 83       	std	Y+7, r22	; 0x07
    123a:	5a 87       	std	Y+10, r21	; 0x0a
    123c:	49 87       	std	Y+9, r20	; 0x09
  unsigned char state = 0;
    123e:	1c 82       	std	Y+4, r1	; 0x04
  unsigned char _3MSBAddr = 0;
    1240:	1b 82       	std	Y+3, r1	; 0x03

  // Start TWI
  TWIStart();
    1242:	0e 94 d5 09 	call	0x13aa	; 0x13aa <TWIStart>

  // Get State
  state = TWIGetStatus();
    1246:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    124a:	8c 83       	std	Y+4, r24	; 0x04

  // Check if TWI Start
  if (state != TW_START)
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	88 30       	cpi	r24, 0x08	; 8
    1250:	11 f0       	breq	.+4      	; 0x1256 <EEPROM_ReadByte+0x3c>
    return 0;
    1252:	1b 86       	std	Y+11, r1	; 0x0b
    1254:	81 c0       	rjmp	.+258    	; 0x1358 <EEPROM_ReadByte+0x13e>
  // Send Slave Address -> For EEPROM 24cXX
  // The Slave Address of Chip is 0b1010, so have Three bits free
  // We can take a part from 11 bit address and send it with Device Add
  // Send 3 MSBs From Address "As Device Address"
  // Set Action to write -> 0
  _3MSBAddr = ((unsigned char) ((addr & 0x0700) >> 7));
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	80 70       	andi	r24, 0x00	; 0
    125c:	97 70       	andi	r25, 0x07	; 7
    125e:	88 0f       	add	r24, r24
    1260:	89 2f       	mov	r24, r25
    1262:	88 1f       	adc	r24, r24
    1264:	99 0b       	sbc	r25, r25
    1266:	91 95       	neg	r25
    1268:	8b 83       	std	Y+3, r24	; 0x03
  // TWIWrite(0xA0|_3MSBAddr);
  TWIWrite(0xA0);
    126a:	80 ea       	ldi	r24, 0xA0	; 160
    126c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <TWIWrite>

  // Get Status
  state = TWIGetStatus();
    1270:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    1274:	8c 83       	std	Y+4, r24	; 0x04

  // Check if it is TW_MT_SLA_ACK
  if (state != TW_MT_SLA_ACK)
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	88 31       	cpi	r24, 0x18	; 24
    127a:	11 f0       	breq	.+4      	; 0x1280 <EEPROM_ReadByte+0x66>
    return 0;
    127c:	1b 86       	std	Y+11, r1	; 0x0b
    127e:	6c c0       	rjmp	.+216    	; 0x1358 <EEPROM_ReadByte+0x13e>

  // Write the Rest of Location Address(8 Bits)
  TWIWrite((unsigned char) addr);
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <TWIWrite>

  // Get State
  state = TWIGetStatus();
    1286:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    128a:	8c 83       	std	Y+4, r24	; 0x04

  // check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	88 32       	cpi	r24, 0x28	; 40
    1290:	11 f0       	breq	.+4      	; 0x1296 <EEPROM_ReadByte+0x7c>
    return 0;
    1292:	1b 86       	std	Y+11, r1	; 0x0b
    1294:	61 c0       	rjmp	.+194    	; 0x1358 <EEPROM_ReadByte+0x13e>

  // Now The Master Will Be Master Reciever

  // Now we need to Send Start Bit Again
  // Start TWI
  TWIStart();
    1296:	0e 94 d5 09 	call	0x13aa	; 0x13aa <TWIStart>

  // Get State
  state = TWIGetStatus();
    129a:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    129e:	8c 83       	std	Y+4, r24	; 0x04

  // Check if TW_REP_START
  if (state != TW_REP_START)
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	80 31       	cpi	r24, 0x10	; 16
    12a4:	11 f0       	breq	.+4      	; 0x12aa <EEPROM_ReadByte+0x90>
    return 0;
    12a6:	1b 86       	std	Y+11, r1	; 0x0b
    12a8:	57 c0       	rjmp	.+174    	; 0x1358 <EEPROM_ReadByte+0x13e>
  // Send Slave Address -> For EEPROM 24cXX
  // The Slave Address of Chip is 0b1010, so have Three bits free
  // We can take a part from 11 bit address and send it with Device Add
  // Send 3 MSBs From Address "As Device Address"
  // Set Action to Read -> 1
  _3MSBAddr = ((unsigned char) ((addr & 0x0700) >> 7));
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	80 70       	andi	r24, 0x00	; 0
    12b0:	97 70       	andi	r25, 0x07	; 7
    12b2:	88 0f       	add	r24, r24
    12b4:	89 2f       	mov	r24, r25
    12b6:	88 1f       	adc	r24, r24
    12b8:	99 0b       	sbc	r25, r25
    12ba:	91 95       	neg	r25
    12bc:	8b 83       	std	Y+3, r24	; 0x03
//    TWIWrite(0xA0|_3MSBAddr|1);
  TWIWrite(0xA0 | 1);
    12be:	81 ea       	ldi	r24, 0xA1	; 161
    12c0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <TWIWrite>
  // Get Status
  state = TWIGetStatus();
    12c4:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    12c8:	8c 83       	std	Y+4, r24	; 0x04

  // Check if it is TW_MR_SLA_ACK
  if (state != TW_MR_SLA_ACK)
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	80 34       	cpi	r24, 0x40	; 64
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <EEPROM_ReadByte+0xba>
    return 0;
    12d0:	1b 86       	std	Y+11, r1	; 0x0b
    12d2:	42 c0       	rjmp	.+132    	; 0x1358 <EEPROM_ReadByte+0x13e>

  for(int i=0;i<num;i++)
    12d4:	1a 82       	std	Y+2, r1	; 0x02
    12d6:	19 82       	std	Y+1, r1	; 0x01
    12d8:	34 c0       	rjmp	.+104    	; 0x1342 <EEPROM_ReadByte+0x128>
  {
	  // Edit here....
	  if(i==num-1)
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	29 85       	ldd	r18, Y+9	; 0x09
    12e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e2:	21 50       	subi	r18, 0x01	; 1
    12e4:	30 40       	sbci	r19, 0x00	; 0
    12e6:	82 17       	cp	r24, r18
    12e8:	93 07       	cpc	r25, r19
    12ea:	99 f4       	brne	.+38     	; 0x1312 <EEPROM_ReadByte+0xf8>
	  {
		 chs[i]=TWIReadNACK();
    12ec:	29 81       	ldd	r18, Y+1	; 0x01
    12ee:	3a 81       	ldd	r19, Y+2	; 0x02
    12f0:	8f 81       	ldd	r24, Y+7	; 0x07
    12f2:	98 85       	ldd	r25, Y+8	; 0x08
    12f4:	8c 01       	movw	r16, r24
    12f6:	02 0f       	add	r16, r18
    12f8:	13 1f       	adc	r17, r19
    12fa:	0e 94 1a 0a 	call	0x1434	; 0x1434 <TWIReadNACK>
    12fe:	f8 01       	movw	r30, r16
    1300:	80 83       	st	Z, r24
		state = TWIGetStatus();
    1302:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    1306:	8c 83       	std	Y+4, r24	; 0x04
		if (state != TW_MR_DATA_NOT_ACK)
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	88 35       	cpi	r24, 0x58	; 88
    130c:	a9 f0       	breq	.+42     	; 0x1338 <EEPROM_ReadByte+0x11e>
		  {
			//PORTA |= 0x04;
			return 0;
    130e:	1b 86       	std	Y+11, r1	; 0x0b
    1310:	23 c0       	rjmp	.+70     	; 0x1358 <EEPROM_ReadByte+0x13e>
		  }
	  }

	  else
	  {
			chs[i] = TWIReadACK();
    1312:	29 81       	ldd	r18, Y+1	; 0x01
    1314:	3a 81       	ldd	r19, Y+2	; 0x02
    1316:	8f 81       	ldd	r24, Y+7	; 0x07
    1318:	98 85       	ldd	r25, Y+8	; 0x08
    131a:	8c 01       	movw	r16, r24
    131c:	02 0f       	add	r16, r18
    131e:	13 1f       	adc	r17, r19
    1320:	0e 94 07 0a 	call	0x140e	; 0x140e <TWIReadACK>
    1324:	f8 01       	movw	r30, r16
    1326:	80 83       	st	Z, r24
		  state = TWIGetStatus();
    1328:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWIGetStatus>
    132c:	8c 83       	std	Y+4, r24	; 0x04

		  if (state != TW_MR_DATA_ACK)
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	80 35       	cpi	r24, 0x50	; 80
    1332:	11 f0       	breq	.+4      	; 0x1338 <EEPROM_ReadByte+0x11e>
		  {
			//PORTA |= 0x04;
			return 0;
    1334:	1b 86       	std	Y+11, r1	; 0x0b
    1336:	10 c0       	rjmp	.+32     	; 0x1358 <EEPROM_ReadByte+0x13e>

  // Check if it is TW_MR_SLA_ACK
  if (state != TW_MR_SLA_ACK)
    return 0;

  for(int i=0;i<num;i++)
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	29 81       	ldd	r18, Y+1	; 0x01
    1344:	3a 81       	ldd	r19, Y+2	; 0x02
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	28 17       	cp	r18, r24
    134c:	39 07       	cpc	r19, r25
    134e:	28 f2       	brcs	.-118    	; 0x12da <EEPROM_ReadByte+0xc0>
		  }
	  }
	  // TWI Stop
  }

  TWIStop();
    1350:	0e 94 e5 09 	call	0x13ca	; 0x13ca <TWIStop>

  // Return Done
  return 1;
    1354:	f1 e0       	ldi	r31, 0x01	; 1
    1356:	fb 87       	std	Y+11, r31	; 0x0b
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    135a:	2b 96       	adiw	r28, 0x0b	; 11
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	08 95       	ret

00001370 <I2C_Init>:
#include <avr/io.h>
//#include "IIC.h"

void I2C_Init(void)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
  // TWI initialization
  // Bit Rate: 400.000 kHz
  TWBR = 72;
    1378:	e0 e2       	ldi	r30, 0x20	; 32
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	88 e4       	ldi	r24, 0x48	; 72
    137e:	80 83       	st	Z, r24
  // Two Wire Bus Slave Address: 0x1
  // General Call Recognition: Off
  TWAR = 0x02;
    1380:	e2 e2       	ldi	r30, 0x22	; 34
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	80 83       	st	Z, r24
  // Generate Acknowledge Pulse: On
  // TWI Interrupt: Off
  TWCR = 0x44;
    1388:	e6 e5       	ldi	r30, 0x56	; 86
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	84 e4       	ldi	r24, 0x44	; 68
    138e:	80 83       	st	Z, r24
  TWSR = 0x00;
    1390:	e1 e2       	ldi	r30, 0x21	; 33
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	10 82       	st	Z, r1
  TWSR &= (~((1 << TWPS1) | (1 << TWPS0)));
    1396:	a1 e2       	ldi	r26, 0x21	; 33
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 e2       	ldi	r30, 0x21	; 33
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8c 7f       	andi	r24, 0xFC	; 252
    13a2:	8c 93       	st	X, r24
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <TWIStart>:

void TWIStart(void)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
  // Send Start Condition
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    13b2:	e6 e5       	ldi	r30, 0x56	; 86
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	84 ea       	ldi	r24, 0xA4	; 164
    13b8:	80 83       	st	Z, r24

  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
    13ba:	e6 e5       	ldi	r30, 0x56	; 86
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	88 23       	and	r24, r24
    13c2:	dc f7       	brge	.-10     	; 0x13ba <TWIStart+0x10>
    ;
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <TWIStop>:

void TWIStop(void)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
  // Send Stop Condition
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    13d2:	e6 e5       	ldi	r30, 0x56	; 86
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	84 e9       	ldi	r24, 0x94	; 148
    13d8:	80 83       	st	Z, r24
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <TWIWrite>:

void TWIWrite(unsigned char data)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	89 83       	std	Y+1, r24	; 0x01
  // Put data On TWI Register
  TWDR = data;
    13ec:	e3 e2       	ldi	r30, 0x23	; 35
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	80 83       	st	Z, r24
  // Send Data
  TWCR = (1 << TWINT) | (1 << TWEN);
    13f4:	e6 e5       	ldi	r30, 0x56	; 86
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	84 e8       	ldi	r24, 0x84	; 132
    13fa:	80 83       	st	Z, r24
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
    13fc:	e6 e5       	ldi	r30, 0x56	; 86
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	88 23       	and	r24, r24
    1404:	dc f7       	brge	.-10     	; 0x13fc <TWIWrite+0x1c>
    ;
}
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <TWIReadACK>:

unsigned char TWIReadACK(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);    //enable Ack
    1416:	e6 e5       	ldi	r30, 0x56	; 86
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	84 ec       	ldi	r24, 0xC4	; 196
    141c:	80 83       	st	Z, r24
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
    141e:	e6 e5       	ldi	r30, 0x56	; 86
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	88 23       	and	r24, r24
    1426:	dc f7       	brge	.-10     	; 0x141e <TWIReadACK+0x10>
    ;
  // Read Data
  return TWDR;
    1428:	e3 e2       	ldi	r30, 0x23	; 35
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
}
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <TWIReadNACK>:

unsigned char TWIReadNACK(void)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWEN);
    143c:	e6 e5       	ldi	r30, 0x56	; 86
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	84 e8       	ldi	r24, 0x84	; 132
    1442:	80 83       	st	Z, r24
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
    1444:	e6 e5       	ldi	r30, 0x56	; 86
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	88 23       	and	r24, r24
    144c:	dc f7       	brge	.-10     	; 0x1444 <TWIReadNACK+0x10>
    ;
  // Read Data
  return TWDR;
    144e:	e3 e2       	ldi	r30, 0x23	; 35
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <TWIGetStatus>:

unsigned char TWIGetStatus(void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	0f 92       	push	r0
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
  unsigned char status;
  status = TWSR & 0xF8;
    1464:	e1 e2       	ldi	r30, 0x21	; 33
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	88 7f       	andi	r24, 0xF8	; 248
    146c:	89 83       	std	Y+1, r24	; 0x01
  return status;
    146e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <LCD_vidInit>:
#include "LCD_interface.h"
#include "LCD_config.h"


void LCD_vidInit(void)
{
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	c4 55       	subi	r28, 0x54	; 84
    1486:	d0 40       	sbci	r29, 0x00	; 0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61


	DIO_VidSetPortDirection (PORT_Data,255) ;
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	6f ef       	ldi	r22, 0xFF	; 255
    1496:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(PORT_Control, RS, HIGH);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORT_Control, RW, HIGH);
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	62 e0       	ldi	r22, 0x02	; 2
    14a8:	41 e0       	ldi	r20, 0x01	; 1
    14aa:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORT_Control, E, HIGH);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>
    14b8:	fe 01       	movw	r30, r28
    14ba:	ef 5a       	subi	r30, 0xAF	; 175
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a0 ef       	ldi	r26, 0xF0	; 240
    14c4:	b1 e4       	ldi	r27, 0x41	; 65
    14c6:	80 83       	st	Z, r24
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	a2 83       	std	Z+2, r26	; 0x02
    14cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ce:	8e 01       	movw	r16, r28
    14d0:	03 5b       	subi	r16, 0xB3	; 179
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	fe 01       	movw	r30, r28
    14d6:	ef 5a       	subi	r30, 0xAF	; 175
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a ef       	ldi	r20, 0xFA	; 250
    14e8:	54 e4       	ldi	r21, 0x44	; 68
    14ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	f8 01       	movw	r30, r16
    14f4:	80 83       	st	Z, r24
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	a2 83       	std	Z+2, r26	; 0x02
    14fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14fc:	fe 01       	movw	r30, r28
    14fe:	e3 5b       	subi	r30, 0xB3	; 179
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1516:	88 23       	and	r24, r24
    1518:	44 f4       	brge	.+16     	; 0x152a <LCD_vidInit+0xb2>
		__ticks = 1;
    151a:	fe 01       	movw	r30, r28
    151c:	e5 5b       	subi	r30, 0xB5	; 181
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	91 83       	std	Z+1, r25	; 0x01
    1526:	80 83       	st	Z, r24
    1528:	64 c0       	rjmp	.+200    	; 0x15f2 <LCD_vidInit+0x17a>
	else if (__tmp > 65535)
    152a:	fe 01       	movw	r30, r28
    152c:	e3 5b       	subi	r30, 0xB3	; 179
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	82 81       	ldd	r24, Z+2	; 0x02
    1536:	93 81       	ldd	r25, Z+3	; 0x03
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	3f ef       	ldi	r19, 0xFF	; 255
    153c:	4f e7       	ldi	r20, 0x7F	; 127
    153e:	57 e4       	ldi	r21, 0x47	; 71
    1540:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1544:	18 16       	cp	r1, r24
    1546:	0c f0       	brlt	.+2      	; 0x154a <LCD_vidInit+0xd2>
    1548:	43 c0       	rjmp	.+134    	; 0x15d0 <LCD_vidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154a:	fe 01       	movw	r30, r28
    154c:	ef 5a       	subi	r30, 0xAF	; 175
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	8e 01       	movw	r16, r28
    156a:	05 5b       	subi	r16, 0xB5	; 181
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	f8 01       	movw	r30, r16
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
    1580:	1f c0       	rjmp	.+62     	; 0x15c0 <LCD_vidInit+0x148>
    1582:	fe 01       	movw	r30, r28
    1584:	e7 5b       	subi	r30, 0xB7	; 183
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	88 ec       	ldi	r24, 0xC8	; 200
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1590:	fe 01       	movw	r30, r28
    1592:	e7 5b       	subi	r30, 0xB7	; 183
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <LCD_vidInit+0x122>
    159e:	fe 01       	movw	r30, r28
    15a0:	e7 5b       	subi	r30, 0xB7	; 183
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a8:	de 01       	movw	r26, r28
    15aa:	a5 5b       	subi	r26, 0xB5	; 181
    15ac:	bf 4f       	sbci	r27, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	e5 5b       	subi	r30, 0xB5	; 181
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	11 96       	adiw	r26, 0x01	; 1
    15bc:	9c 93       	st	X, r25
    15be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	fe 01       	movw	r30, r28
    15c2:	e5 5b       	subi	r30, 0xB5	; 181
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	d1 f6       	brne	.-76     	; 0x1582 <LCD_vidInit+0x10a>
    15ce:	27 c0       	rjmp	.+78     	; 0x161e <LCD_vidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	8e 01       	movw	r16, r28
    15d2:	05 5b       	subi	r16, 0xB5	; 181
    15d4:	1f 4f       	sbci	r17, 0xFF	; 255
    15d6:	fe 01       	movw	r30, r28
    15d8:	e3 5b       	subi	r30, 0xB3	; 179
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	f8 01       	movw	r30, r16
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	80 83       	st	Z, r24
    15f2:	de 01       	movw	r26, r28
    15f4:	a9 5b       	subi	r26, 0xB9	; 185
    15f6:	bf 4f       	sbci	r27, 0xFF	; 255
    15f8:	fe 01       	movw	r30, r28
    15fa:	e5 5b       	subi	r30, 0xB5	; 181
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	8d 93       	st	X+, r24
    1604:	9c 93       	st	X, r25
    1606:	fe 01       	movw	r30, r28
    1608:	e9 5b       	subi	r30, 0xB9	; 185
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <LCD_vidInit+0x198>
    1614:	fe 01       	movw	r30, r28
    1616:	e9 5b       	subi	r30, 0xB9	; 185
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	80 83       	st	Z, r24


	_delay_ms(30);

	/* Function Set  */
	LCD_vidSendCommand(lcd_FunctionSet8bit);
    161e:	88 e3       	ldi	r24, 0x38	; 56
    1620:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
    1624:	fe 01       	movw	r30, r28
    1626:	ed 5b       	subi	r30, 0xBD	; 189
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e7       	ldi	r26, 0x70	; 112
    1630:	b1 e4       	ldi	r27, 0x41	; 65
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	8e 01       	movw	r16, r28
    163c:	01 5c       	subi	r16, 0xC1	; 193
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	fe 01       	movw	r30, r28
    1642:	ed 5b       	subi	r30, 0xBD	; 189
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a ef       	ldi	r20, 0xFA	; 250
    1654:	54 e4       	ldi	r21, 0x44	; 68
    1656:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	f8 01       	movw	r30, r16
    1660:	80 83       	st	Z, r24
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	a2 83       	std	Z+2, r26	; 0x02
    1666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1668:	fe 01       	movw	r30, r28
    166a:	ff 96       	adiw	r30, 0x3f	; 63
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <LCD_vidInit+0x216>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9e af       	std	Y+62, r25	; 0x3e
    168a:	8d af       	std	Y+61, r24	; 0x3d
    168c:	46 c0       	rjmp	.+140    	; 0x171a <LCD_vidInit+0x2a2>
	else if (__tmp > 65535)
    168e:	fe 01       	movw	r30, r28
    1690:	ff 96       	adiw	r30, 0x3f	; 63
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	64 f5       	brge	.+88     	; 0x1702 <LCD_vidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	fe 01       	movw	r30, r28
    16ac:	ed 5b       	subi	r30, 0xBD	; 189
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e2       	ldi	r20, 0x20	; 32
    16be:	51 e4       	ldi	r21, 0x41	; 65
    16c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9e af       	std	Y+62, r25	; 0x3e
    16d6:	8d af       	std	Y+61, r24	; 0x3d
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <LCD_vidInit+0x280>
    16da:	88 ec       	ldi	r24, 0xC8	; 200
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9c af       	std	Y+60, r25	; 0x3c
    16e0:	8b af       	std	Y+59, r24	; 0x3b
    16e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    16e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <LCD_vidInit+0x26e>
    16ea:	9c af       	std	Y+60, r25	; 0x3c
    16ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	9e af       	std	Y+62, r25	; 0x3e
    16f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	69 f7       	brne	.-38     	; 0x16da <LCD_vidInit+0x262>
    1700:	16 c0       	rjmp	.+44     	; 0x172e <LCD_vidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1702:	fe 01       	movw	r30, r28
    1704:	ff 96       	adiw	r30, 0x3f	; 63
    1706:	60 81       	ld	r22, Z
    1708:	71 81       	ldd	r23, Z+1	; 0x01
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e af       	std	Y+62, r25	; 0x3e
    1718:	8d af       	std	Y+61, r24	; 0x3d
    171a:	8d ad       	ldd	r24, Y+61	; 0x3d
    171c:	9e ad       	ldd	r25, Y+62	; 0x3e
    171e:	9a af       	std	Y+58, r25	; 0x3a
    1720:	89 af       	std	Y+57, r24	; 0x39
    1722:	89 ad       	ldd	r24, Y+57	; 0x39
    1724:	9a ad       	ldd	r25, Y+58	; 0x3a
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_vidInit+0x2ae>
    172a:	9a af       	std	Y+58, r25	; 0x3a
    172c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Return Home  */
	LCD_vidSendCommand(lcd_Home);
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a0 e7       	ldi	r26, 0x70	; 112
    173a:	b1 e4       	ldi	r27, 0x41	; 65
    173c:	8d ab       	std	Y+53, r24	; 0x35
    173e:	9e ab       	std	Y+54, r25	; 0x36
    1740:	af ab       	std	Y+55, r26	; 0x37
    1742:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1744:	6d a9       	ldd	r22, Y+53	; 0x35
    1746:	7e a9       	ldd	r23, Y+54	; 0x36
    1748:	8f a9       	ldd	r24, Y+55	; 0x37
    174a:	98 ad       	ldd	r25, Y+56	; 0x38
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	89 ab       	std	Y+49, r24	; 0x31
    175e:	9a ab       	std	Y+50, r25	; 0x32
    1760:	ab ab       	std	Y+51, r26	; 0x33
    1762:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1764:	69 a9       	ldd	r22, Y+49	; 0x31
    1766:	7a a9       	ldd	r23, Y+50	; 0x32
    1768:	8b a9       	ldd	r24, Y+51	; 0x33
    176a:	9c a9       	ldd	r25, Y+52	; 0x34
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	2c f4       	brge	.+10     	; 0x1786 <LCD_vidInit+0x30e>
		__ticks = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	98 ab       	std	Y+48, r25	; 0x30
    1782:	8f a7       	std	Y+47, r24	; 0x2f
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <LCD_vidInit+0x38c>
	else if (__tmp > 65535)
    1786:	69 a9       	ldd	r22, Y+49	; 0x31
    1788:	7a a9       	ldd	r23, Y+50	; 0x32
    178a:	8b a9       	ldd	r24, Y+51	; 0x33
    178c:	9c a9       	ldd	r25, Y+52	; 0x34
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	4f e7       	ldi	r20, 0x7F	; 127
    1794:	57 e4       	ldi	r21, 0x47	; 71
    1796:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    179a:	18 16       	cp	r1, r24
    179c:	4c f5       	brge	.+82     	; 0x17f0 <LCD_vidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179e:	6d a9       	ldd	r22, Y+53	; 0x35
    17a0:	7e a9       	ldd	r23, Y+54	; 0x36
    17a2:	8f a9       	ldd	r24, Y+55	; 0x37
    17a4:	98 ad       	ldd	r25, Y+56	; 0x38
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	98 ab       	std	Y+48, r25	; 0x30
    17c4:	8f a7       	std	Y+47, r24	; 0x2f
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <LCD_vidInit+0x36e>
    17c8:	88 ec       	ldi	r24, 0xC8	; 200
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e a7       	std	Y+46, r25	; 0x2e
    17ce:	8d a7       	std	Y+45, r24	; 0x2d
    17d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    17d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <LCD_vidInit+0x35c>
    17d8:	9e a7       	std	Y+46, r25	; 0x2e
    17da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17de:	98 a9       	ldd	r25, Y+48	; 0x30
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	98 ab       	std	Y+48, r25	; 0x30
    17e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <LCD_vidInit+0x350>
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <LCD_vidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	69 a9       	ldd	r22, Y+49	; 0x31
    17f2:	7a a9       	ldd	r23, Y+50	; 0x32
    17f4:	8b a9       	ldd	r24, Y+51	; 0x33
    17f6:	9c a9       	ldd	r25, Y+52	; 0x34
    17f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	98 ab       	std	Y+48, r25	; 0x30
    1802:	8f a7       	std	Y+47, r24	; 0x2f
    1804:	8f a5       	ldd	r24, Y+47	; 0x2f
    1806:	98 a9       	ldd	r25, Y+48	; 0x30
    1808:	9c a7       	std	Y+44, r25	; 0x2c
    180a:	8b a7       	std	Y+43, r24	; 0x2b
    180c:	8b a5       	ldd	r24, Y+43	; 0x2b
    180e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <LCD_vidInit+0x398>
    1814:	9c a7       	std	Y+44, r25	; 0x2c
    1816:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(15);


	/* Display ON OFF Control */
	LCD_vidSendCommand(lcd_DisplayOn);
    1818:	8c e0       	ldi	r24, 0x0C	; 12
    181a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e8       	ldi	r26, 0x80	; 128
    1824:	bf e3       	ldi	r27, 0x3F	; 63
    1826:	8f a3       	std	Y+39, r24	; 0x27
    1828:	98 a7       	std	Y+40, r25	; 0x28
    182a:	a9 a7       	std	Y+41, r26	; 0x29
    182c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	6f a1       	ldd	r22, Y+39	; 0x27
    1830:	78 a5       	ldd	r23, Y+40	; 0x28
    1832:	89 a5       	ldd	r24, Y+41	; 0x29
    1834:	9a a5       	ldd	r25, Y+42	; 0x2a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a ef       	ldi	r20, 0xFA	; 250
    183c:	54 e4       	ldi	r21, 0x44	; 68
    183e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8b a3       	std	Y+35, r24	; 0x23
    1848:	9c a3       	std	Y+36, r25	; 0x24
    184a:	ad a3       	std	Y+37, r26	; 0x25
    184c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    184e:	6b a1       	ldd	r22, Y+35	; 0x23
    1850:	7c a1       	ldd	r23, Y+36	; 0x24
    1852:	8d a1       	ldd	r24, Y+37	; 0x25
    1854:	9e a1       	ldd	r25, Y+38	; 0x26
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e8       	ldi	r20, 0x80	; 128
    185c:	5f e3       	ldi	r21, 0x3F	; 63
    185e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <LCD_vidInit+0x3f8>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9a a3       	std	Y+34, r25	; 0x22
    186c:	89 a3       	std	Y+33, r24	; 0x21
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <LCD_vidInit+0x476>
	else if (__tmp > 65535)
    1870:	6b a1       	ldd	r22, Y+35	; 0x23
    1872:	7c a1       	ldd	r23, Y+36	; 0x24
    1874:	8d a1       	ldd	r24, Y+37	; 0x25
    1876:	9e a1       	ldd	r25, Y+38	; 0x26
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	4c f5       	brge	.+82     	; 0x18da <LCD_vidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1888:	6f a1       	ldd	r22, Y+39	; 0x27
    188a:	78 a5       	ldd	r23, Y+40	; 0x28
    188c:	89 a5       	ldd	r24, Y+41	; 0x29
    188e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9a a3       	std	Y+34, r25	; 0x22
    18ae:	89 a3       	std	Y+33, r24	; 0x21
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <LCD_vidInit+0x458>
    18b2:	88 ec       	ldi	r24, 0xC8	; 200
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	98 a3       	std	Y+32, r25	; 0x20
    18b8:	8f 8f       	std	Y+31, r24	; 0x1f
    18ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18bc:	98 a1       	ldd	r25, Y+32	; 0x20
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <LCD_vidInit+0x446>
    18c2:	98 a3       	std	Y+32, r25	; 0x20
    18c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c6:	89 a1       	ldd	r24, Y+33	; 0x21
    18c8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9a a3       	std	Y+34, r25	; 0x22
    18ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d0:	89 a1       	ldd	r24, Y+33	; 0x21
    18d2:	9a a1       	ldd	r25, Y+34	; 0x22
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	69 f7       	brne	.-38     	; 0x18b2 <LCD_vidInit+0x43a>
    18d8:	14 c0       	rjmp	.+40     	; 0x1902 <LCD_vidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18da:	6b a1       	ldd	r22, Y+35	; 0x23
    18dc:	7c a1       	ldd	r23, Y+36	; 0x24
    18de:	8d a1       	ldd	r24, Y+37	; 0x25
    18e0:	9e a1       	ldd	r25, Y+38	; 0x26
    18e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9a a3       	std	Y+34, r25	; 0x22
    18ec:	89 a3       	std	Y+33, r24	; 0x21
    18ee:	89 a1       	ldd	r24, Y+33	; 0x21
    18f0:	9a a1       	ldd	r25, Y+34	; 0x22
    18f2:	9e 8f       	std	Y+30, r25	; 0x1e
    18f4:	8d 8f       	std	Y+29, r24	; 0x1d
    18f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <LCD_vidInit+0x482>
    18fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1900:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	LCD_vidSendCommand(lcd_Clear);
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a0 e7       	ldi	r26, 0x70	; 112
    190e:	b1 e4       	ldi	r27, 0x41	; 65
    1910:	89 8f       	std	Y+25, r24	; 0x19
    1912:	9a 8f       	std	Y+26, r25	; 0x1a
    1914:	ab 8f       	std	Y+27, r26	; 0x1b
    1916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	69 8d       	ldd	r22, Y+25	; 0x19
    191a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    191c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a ef       	ldi	r20, 0xFA	; 250
    1926:	54 e4       	ldi	r21, 0x44	; 68
    1928:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8d 8b       	std	Y+21, r24	; 0x15
    1932:	9e 8b       	std	Y+22, r25	; 0x16
    1934:	af 8b       	std	Y+23, r26	; 0x17
    1936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1938:	6d 89       	ldd	r22, Y+21	; 0x15
    193a:	7e 89       	ldd	r23, Y+22	; 0x16
    193c:	8f 89       	ldd	r24, Y+23	; 0x17
    193e:	98 8d       	ldd	r25, Y+24	; 0x18
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <LCD_vidInit+0x4e2>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9c 8b       	std	Y+20, r25	; 0x14
    1956:	8b 8b       	std	Y+19, r24	; 0x13
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <LCD_vidInit+0x560>
	else if (__tmp > 65535)
    195a:	6d 89       	ldd	r22, Y+21	; 0x15
    195c:	7e 89       	ldd	r23, Y+22	; 0x16
    195e:	8f 89       	ldd	r24, Y+23	; 0x17
    1960:	98 8d       	ldd	r25, Y+24	; 0x18
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <LCD_vidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	69 8d       	ldd	r22, Y+25	; 0x19
    1974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <LCD_vidInit+0x542>
    199c:	88 ec       	ldi	r24, 0xC8	; 200
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9a 8b       	std	Y+18, r25	; 0x12
    19a2:	89 8b       	std	Y+17, r24	; 0x11
    19a4:	89 89       	ldd	r24, Y+17	; 0x11
    19a6:	9a 89       	ldd	r25, Y+18	; 0x12
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <LCD_vidInit+0x530>
    19ac:	9a 8b       	std	Y+18, r25	; 0x12
    19ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8b 89       	ldd	r24, Y+19	; 0x13
    19b2:	9c 89       	ldd	r25, Y+20	; 0x14
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9c 8b       	std	Y+20, r25	; 0x14
    19b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8b 89       	ldd	r24, Y+19	; 0x13
    19bc:	9c 89       	ldd	r25, Y+20	; 0x14
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <LCD_vidInit+0x524>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <LCD_vidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6d 89       	ldd	r22, Y+21	; 0x15
    19c6:	7e 89       	ldd	r23, Y+22	; 0x16
    19c8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ca:	98 8d       	ldd	r25, Y+24	; 0x18
    19cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9c 8b       	std	Y+20, r25	; 0x14
    19d6:	8b 8b       	std	Y+19, r24	; 0x13
    19d8:	8b 89       	ldd	r24, Y+19	; 0x13
    19da:	9c 89       	ldd	r25, Y+20	; 0x14
    19dc:	98 8b       	std	Y+16, r25	; 0x10
    19de:	8f 87       	std	Y+15, r24	; 0x0f
    19e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e2:	98 89       	ldd	r25, Y+16	; 0x10
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <LCD_vidInit+0x56c>
    19e8:	98 8b       	std	Y+16, r25	; 0x10
    19ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_vidSendCommand(lcd_EntryMode);
    19ec:	86 e0       	ldi	r24, 0x06	; 6
    19ee:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a0 e0       	ldi	r26, 0x00	; 0
    19f8:	b0 e4       	ldi	r27, 0x40	; 64
    19fa:	8b 87       	std	Y+11, r24	; 0x0b
    19fc:	9c 87       	std	Y+12, r25	; 0x0c
    19fe:	ad 87       	std	Y+13, r26	; 0x0d
    1a00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	4a ef       	ldi	r20, 0xFA	; 250
    1a10:	54 e4       	ldi	r21, 0x44	; 68
    1a12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	8f 83       	std	Y+7, r24	; 0x07
    1a1c:	98 87       	std	Y+8, r25	; 0x08
    1a1e:	a9 87       	std	Y+9, r26	; 0x09
    1a20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a36:	88 23       	and	r24, r24
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <LCD_vidInit+0x5cc>
		__ticks = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	3f c0       	rjmp	.+126    	; 0x1ac2 <LCD_vidInit+0x64a>
	else if (__tmp > 65535)
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	4c f5       	brge	.+82     	; 0x1aae <LCD_vidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <LCD_vidInit+0x62c>
    1a86:	88 ec       	ldi	r24, 0xC8	; 200
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_vidInit+0x61a>
    1a96:	9c 83       	std	Y+4, r25	; 0x04
    1a98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9e 83       	std	Y+6, r25	; 0x06
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <LCD_vidInit+0x60e>
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <LCD_vidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab0:	78 85       	ldd	r23, Y+8	; 0x08
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_vidInit+0x656>
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1ad6:	cc 5a       	subi	r28, 0xAC	; 172
    1ad8:	df 4f       	sbci	r29, 0xFF	; 255
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	08 95       	ret

00001aee <LCD_vidSendCommand>:



void LCD_vidSendCommand(u8 u8CmdCpy)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	6d 97       	sbiw	r28, 0x1d	; 29
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Set RS to LOW */
	DIO_VidSetPinValue(PORT_Control, RS, LOW);
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>

	/* Set R/W to LOW */
	DIO_VidSetPinValue(PORT_Control, RW, LOW);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	62 e0       	ldi	r22, 0x02	; 2
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>

	/* Set E to HIGH  */
	DIO_VidSetPinValue(PORT_Control, E, HIGH);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>

	/* Load Command on Data bus */
	DIO_VidSetPortValue(PORT_Data, u8CmdCpy);
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b26:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_VidSetPortValue>

	/* Set E to LOW */
	DIO_VidSetPinValue(PORT_Control, E, LOW);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 ea       	ldi	r26, 0xA0	; 160
    1b3a:	b0 e4       	ldi	r27, 0x40	; 64
    1b3c:	89 8f       	std	Y+25, r24	; 0x19
    1b3e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b40:	ab 8f       	std	Y+27, r26	; 0x1b
    1b42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b44:	69 8d       	ldd	r22, Y+25	; 0x19
    1b46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a ef       	ldi	r20, 0xFA	; 250
    1b52:	54 e4       	ldi	r21, 0x44	; 68
    1b54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8d 8b       	std	Y+21, r24	; 0x15
    1b5e:	9e 8b       	std	Y+22, r25	; 0x16
    1b60:	af 8b       	std	Y+23, r26	; 0x17
    1b62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b64:	6d 89       	ldd	r22, Y+21	; 0x15
    1b66:	7e 89       	ldd	r23, Y+22	; 0x16
    1b68:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e8       	ldi	r20, 0x80	; 128
    1b72:	5f e3       	ldi	r21, 0x3F	; 63
    1b74:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b78:	88 23       	and	r24, r24
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9c 8b       	std	Y+20, r25	; 0x14
    1b82:	8b 8b       	std	Y+19, r24	; 0x13
    1b84:	3f c0       	rjmp	.+126    	; 0x1c04 <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    1b86:	6d 89       	ldd	r22, Y+21	; 0x15
    1b88:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	3f ef       	ldi	r19, 0xFF	; 255
    1b92:	4f e7       	ldi	r20, 0x7F	; 127
    1b94:	57 e4       	ldi	r21, 0x47	; 71
    1b96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b9a:	18 16       	cp	r1, r24
    1b9c:	4c f5       	brge	.+82     	; 0x1bf0 <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e2       	ldi	r20, 0x20	; 32
    1bac:	51 e4       	ldi	r21, 0x41	; 65
    1bae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9c 8b       	std	Y+20, r25	; 0x14
    1bc4:	8b 8b       	std	Y+19, r24	; 0x13
    1bc6:	0f c0       	rjmp	.+30     	; 0x1be6 <LCD_vidSendCommand+0xf8>
    1bc8:	88 ec       	ldi	r24, 0xC8	; 200
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9a 8b       	std	Y+18, r25	; 0x12
    1bce:	89 8b       	std	Y+17, r24	; 0x11
    1bd0:	89 89       	ldd	r24, Y+17	; 0x11
    1bd2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_vidSendCommand+0xe6>
    1bd8:	9a 8b       	std	Y+18, r25	; 0x12
    1bda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bde:	9c 89       	ldd	r25, Y+20	; 0x14
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	9c 8b       	std	Y+20, r25	; 0x14
    1be4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	69 f7       	brne	.-38     	; 0x1bc8 <LCD_vidSendCommand+0xda>
    1bee:	14 c0       	rjmp	.+40     	; 0x1c18 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
    1c04:	8b 89       	ldd	r24, Y+19	; 0x13
    1c06:	9c 89       	ldd	r25, Y+20	; 0x14
    1c08:	98 8b       	std	Y+16, r25	; 0x10
    1c0a:	8f 87       	std	Y+15, r24	; 0x0f
    1c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0e:	98 89       	ldd	r25, Y+16	; 0x10
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_vidSendCommand+0x122>
    1c14:	98 8b       	std	Y+16, r25	; 0x10
    1c16:	8f 87       	std	Y+15, r24	; 0x0f
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e2       	ldi	r26, 0x20	; 32
    1c1e:	b1 e4       	ldi	r27, 0x41	; 65
    1c20:	8b 87       	std	Y+11, r24	; 0x0b
    1c22:	9c 87       	std	Y+12, r25	; 0x0c
    1c24:	ad 87       	std	Y+13, r26	; 0x0d
    1c26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a ef       	ldi	r20, 0xFA	; 250
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8f 83       	std	Y+7, r24	; 0x07
    1c42:	98 87       	std	Y+8, r25	; 0x08
    1c44:	a9 87       	std	Y+9, r26	; 0x09
    1c46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c48:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4a:	78 85       	ldd	r23, Y+8	; 0x08
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <LCD_vidSendCommand+0x17c>
		__ticks = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <LCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	4c f5       	brge	.+82     	; 0x1cd4 <LCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <LCD_vidSendCommand+0x1dc>
    1cac:	88 ec       	ldi	r24, 0xC8	; 200
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9c 83       	std	Y+4, r25	; 0x04
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_vidSendCommand+0x1ca>
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <LCD_vidSendCommand+0x1be>
    1cd2:	14 c0       	rjmp	.+40     	; 0x1cfc <LCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_vidSendCommand+0x206>
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	//DIO_VidSetPinValue(PORT_Control, E, HIGH);

	/* Delay for 10ms to let the LCD execute command */
	_delay_ms(10);

}
    1cfc:	6d 96       	adiw	r28, 0x1d	; 29
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <LCD_vidWriteCharctr>:


void LCD_vidWriteCharctr(u8 u8DataCpy)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	6d 97       	sbiw	r28, 0x1d	; 29
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Set RS to HIG */
	DIO_VidSetPinValue(PORT_Control, RS, HIGH);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	61 e0       	ldi	r22, 0x01	; 1
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>

	/* Set R/W to LOW */
	DIO_VidSetPinValue(PORT_Control, RW, LOW);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	62 e0       	ldi	r22, 0x02	; 2
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>

	/* Set E to HIGH */
	DIO_VidSetPinValue(PORT_Control, E, HIGH);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>

	/* Load Command on Data bus */
	DIO_VidSetPortValue(PORT_Data, u8DataCpy);
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d46:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_VidSetPortValue>

	/* Set E to LOW */
	DIO_VidSetPinValue(PORT_Control, E, LOW);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 ea       	ldi	r26, 0xA0	; 160
    1d5a:	b0 e4       	ldi	r27, 0x40	; 64
    1d5c:	89 8f       	std	Y+25, r24	; 0x19
    1d5e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d60:	ab 8f       	std	Y+27, r26	; 0x1b
    1d62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	69 8d       	ldd	r22, Y+25	; 0x19
    1d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8d 8b       	std	Y+21, r24	; 0x15
    1d7e:	9e 8b       	std	Y+22, r25	; 0x16
    1d80:	af 8b       	std	Y+23, r26	; 0x17
    1d82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d84:	6d 89       	ldd	r22, Y+21	; 0x15
    1d86:	7e 89       	ldd	r23, Y+22	; 0x16
    1d88:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LCD_vidWriteCharctr+0x98>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LCD_vidWriteCharctr+0x116>
	else if (__tmp > 65535)
    1da6:	6d 89       	ldd	r22, Y+21	; 0x15
    1da8:	7e 89       	ldd	r23, Y+22	; 0x16
    1daa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dac:	98 8d       	ldd	r25, Y+24	; 0x18
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LCD_vidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9c 8b       	std	Y+20, r25	; 0x14
    1de4:	8b 8b       	std	Y+19, r24	; 0x13
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_vidWriteCharctr+0xf8>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9a 8b       	std	Y+18, r25	; 0x12
    1dee:	89 8b       	std	Y+17, r24	; 0x11
    1df0:	89 89       	ldd	r24, Y+17	; 0x11
    1df2:	9a 89       	ldd	r25, Y+18	; 0x12
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_vidWriteCharctr+0xe6>
    1df8:	9a 8b       	std	Y+18, r25	; 0x12
    1dfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9c 8b       	std	Y+20, r25	; 0x14
    1e04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8b 89       	ldd	r24, Y+19	; 0x13
    1e08:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_vidWriteCharctr+0xda>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LCD_vidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6d 89       	ldd	r22, Y+21	; 0x15
    1e12:	7e 89       	ldd	r23, Y+22	; 0x16
    1e14:	8f 89       	ldd	r24, Y+23	; 0x17
    1e16:	98 8d       	ldd	r25, Y+24	; 0x18
    1e18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
    1e24:	8b 89       	ldd	r24, Y+19	; 0x13
    1e26:	9c 89       	ldd	r25, Y+20	; 0x14
    1e28:	98 8b       	std	Y+16, r25	; 0x10
    1e2a:	8f 87       	std	Y+15, r24	; 0x0f
    1e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2e:	98 89       	ldd	r25, Y+16	; 0x10
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_vidWriteCharctr+0x122>
    1e34:	98 8b       	std	Y+16, r25	; 0x10
    1e36:	8f 87       	std	Y+15, r24	; 0x0f
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e2       	ldi	r26, 0x20	; 32
    1e3e:	b1 e4       	ldi	r27, 0x41	; 65
    1e40:	8b 87       	std	Y+11, r24	; 0x0b
    1e42:	9c 87       	std	Y+12, r25	; 0x0c
    1e44:	ad 87       	std	Y+13, r26	; 0x0d
    1e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a ef       	ldi	r20, 0xFA	; 250
    1e56:	54 e4       	ldi	r21, 0x44	; 68
    1e58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8f 83       	std	Y+7, r24	; 0x07
    1e62:	98 87       	std	Y+8, r25	; 0x08
    1e64:	a9 87       	std	Y+9, r26	; 0x09
    1e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e8       	ldi	r20, 0x80	; 128
    1e76:	5f e3       	ldi	r21, 0x3F	; 63
    1e78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e7c:	88 23       	and	r24, r24
    1e7e:	2c f4       	brge	.+10     	; 0x1e8a <LCD_vidWriteCharctr+0x17c>
		__ticks = 1;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	3f c0       	rjmp	.+126    	; 0x1f08 <LCD_vidWriteCharctr+0x1fa>
	else if (__tmp > 65535)
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	4c f5       	brge	.+82     	; 0x1ef4 <LCD_vidWriteCharctr+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e2       	ldi	r20, 0x20	; 32
    1eb0:	51 e4       	ldi	r21, 0x41	; 65
    1eb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <LCD_vidWriteCharctr+0x1dc>
    1ecc:	88 ec       	ldi	r24, 0xC8	; 200
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_vidWriteCharctr+0x1ca>
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <LCD_vidWriteCharctr+0x1be>
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <LCD_vidWriteCharctr+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_vidWriteCharctr+0x206>
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
	//DIO_VidSetPinValue(PORT_Control, E, HIGH);

	/* Delay to let the LCD Display the character */
	_delay_ms(10);

}
    1f1c:	6d 96       	adiw	r28, 0x1d	; 29
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <LCD_vidWriteNumber>:

void LCD_vidWriteNumber(u32 x){
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	6a 97       	sbiw	r28, 0x1a	; 26
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	6f 8b       	std	Y+23, r22	; 0x17
    1f48:	78 8f       	std	Y+24, r23	; 0x18
    1f4a:	89 8f       	std	Y+25, r24	; 0x19
    1f4c:	9a 8f       	std	Y+26, r25	; 0x1a
	if(x==0){
    1f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f50:	98 8d       	ldd	r25, Y+24	; 0x18
    1f52:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f54:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	a1 05       	cpc	r26, r1
    1f5a:	b1 05       	cpc	r27, r1
    1f5c:	21 f4       	brne	.+8      	; 0x1f66 <LCD_vidWriteNumber+0x38>
		LCD_vidWriteCharctr('0');
    1f5e:	80 e3       	ldi	r24, 0x30	; 48
    1f60:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    1f64:	51 c0       	rjmp	.+162    	; 0x2008 <LCD_vidWriteNumber+0xda>
		return ;
	}
	char arr[20];
	int cnt=-1;
    1f66:	8f ef       	ldi	r24, 0xFF	; 255
    1f68:	9f ef       	ldi	r25, 0xFF	; 255
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	2f c0       	rjmp	.+94     	; 0x1fce <LCD_vidWriteNumber+0xa0>
	while(x>0){
		arr[++cnt]=x%10+'0';
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	01 96       	adiw	r24, 0x01	; 1
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	09 81       	ldd	r16, Y+1	; 0x01
    1f7c:	1a 81       	ldd	r17, Y+2	; 0x02
    1f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f80:	98 8d       	ldd	r25, Y+24	; 0x18
    1f82:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f84:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f86:	2a e0       	ldi	r18, 0x0A	; 10
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	0e 94 29 29 	call	0x5252	; 0x5252 <__udivmodsi4>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	20 5d       	subi	r18, 0xD0	; 208
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	03 96       	adiw	r24, 0x03	; 3
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e0 0f       	add	r30, r16
    1fa6:	f1 1f       	adc	r31, r17
    1fa8:	20 83       	st	Z, r18
		x/=10;
    1faa:	8f 89       	ldd	r24, Y+23	; 0x17
    1fac:	98 8d       	ldd	r25, Y+24	; 0x18
    1fae:	a9 8d       	ldd	r26, Y+25	; 0x19
    1fb0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1fb2:	2a e0       	ldi	r18, 0x0A	; 10
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 29 29 	call	0x5252	; 0x5252 <__udivmodsi4>
    1fc2:	da 01       	movw	r26, r20
    1fc4:	c9 01       	movw	r24, r18
    1fc6:	8f 8b       	std	Y+23, r24	; 0x17
    1fc8:	98 8f       	std	Y+24, r25	; 0x18
    1fca:	a9 8f       	std	Y+25, r26	; 0x19
    1fcc:	ba 8f       	std	Y+26, r27	; 0x1a
		LCD_vidWriteCharctr('0');
		return ;
	}
	char arr[20];
	int cnt=-1;
	while(x>0){
    1fce:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd2:	a9 8d       	ldd	r26, Y+25	; 0x19
    1fd4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	a1 05       	cpc	r26, r1
    1fda:	b1 05       	cpc	r27, r1
    1fdc:	49 f6       	brne	.-110    	; 0x1f70 <LCD_vidWriteNumber+0x42>
    1fde:	10 c0       	rjmp	.+32     	; 0x2000 <LCD_vidWriteNumber+0xd2>
		arr[++cnt]=x%10+'0';
		x/=10;
	}
	while(cnt>=0){
		LCD_vidWriteCharctr(arr[cnt--]);
    1fe0:	29 81       	ldd	r18, Y+1	; 0x01
    1fe2:	3a 81       	ldd	r19, Y+2	; 0x02
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	03 96       	adiw	r24, 0x03	; 3
    1fe8:	fc 01       	movw	r30, r24
    1fea:	e2 0f       	add	r30, r18
    1fec:	f3 1f       	adc	r31, r19
    1fee:	20 81       	ld	r18, Z
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	82 2f       	mov	r24, r18
    1ffc:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
	int cnt=-1;
	while(x>0){
		arr[++cnt]=x%10+'0';
		x/=10;
	}
	while(cnt>=0){
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	99 23       	and	r25, r25
    2006:	64 f7       	brge	.-40     	; 0x1fe0 <LCD_vidWriteNumber+0xb2>
		LCD_vidWriteCharctr(arr[cnt--]);

	}
}
    2008:	6a 96       	adiw	r28, 0x1a	; 26
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	08 95       	ret

0000201e <LCD_clearscreen>:

void LCD_clearscreen(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
	LCD_vidSendCommand(0x01); // clear the screen
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
}
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <LCD_vidDrawCharctr>:

void LCD_vidDrawCharctr(u8 x){
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	0f 92       	push	r0
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	89 83       	std	Y+1, r24	; 0x01

	  //  0
		LCD_vidSendCommand(64);
    203e:	80 e4       	ldi	r24, 0x40	; 64
    2040:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
		LCD_vidWriteCharctr(0b00000100);
    2044:	84 e0       	ldi	r24, 0x04	; 4
    2046:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000100);
    204a:	84 e0       	ldi	r24, 0x04	; 4
    204c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00001110);
    2050:	8e e0       	ldi	r24, 0x0E	; 14
    2052:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00010101);
    2056:	85 e1       	ldi	r24, 0x15	; 21
    2058:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000100);
    205c:	84 e0       	ldi	r24, 0x04	; 4
    205e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00001010);
    2062:	8a e0       	ldi	r24, 0x0A	; 10
    2064:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00010001);
    2068:	81 e1       	ldi	r24, 0x11	; 17
    206a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00010001);
    206e:	81 e1       	ldi	r24, 0x11	; 17
    2070:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
       //   1
		LCD_vidWriteCharctr(0b00000011);
    2074:	83 e0       	ldi	r24, 0x03	; 3
    2076:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000110);
    207a:	86 e0       	ldi	r24, 0x06	; 6
    207c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00011100);
    2080:	8c e1       	ldi	r24, 0x1C	; 28
    2082:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00001100);
    2086:	8c e0       	ldi	r24, 0x0C	; 12
    2088:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000000);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000000);
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000000);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000000);
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>


         /// 2
		LCD_vidWriteCharctr(0b00100100);
    20a4:	84 e2       	ldi	r24, 0x24	; 36
    20a6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00100100);
    20aa:	84 e2       	ldi	r24, 0x24	; 36
    20ac:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00001111);
    20b0:	8f e0       	ldi	r24, 0x0F	; 15
    20b2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00010100);
    20b6:	84 e1       	ldi	r24, 0x14	; 20
    20b8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000100);
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00001010);
    20c2:	8a e0       	ldi	r24, 0x0A	; 10
    20c4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00010001);
    20c8:	81 e1       	ldi	r24, 0x11	; 17
    20ca:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00010001);
    20ce:	81 e1       	ldi	r24, 0x11	; 17
    20d0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
        /// 3
		LCD_vidWriteCharctr(0b00000100);
    20d4:	84 e0       	ldi	r24, 0x04	; 4
    20d6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000100);
    20da:	84 e0       	ldi	r24, 0x04	; 4
    20dc:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00011110);
    20e0:	8e e1       	ldi	r24, 0x1E	; 30
    20e2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000101);
    20e6:	85 e0       	ldi	r24, 0x05	; 5
    20e8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000100);
    20ec:	84 e0       	ldi	r24, 0x04	; 4
    20ee:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00001010);
    20f2:	8a e0       	ldi	r24, 0x0A	; 10
    20f4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00010001);
    20f8:	81 e1       	ldi	r24, 0x11	; 17
    20fa:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00010001);
    20fe:	81 e1       	ldi	r24, 0x11	; 17
    2100:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
       //  4
		LCD_vidWriteCharctr(0b00011000);
    2104:	88 e1       	ldi	r24, 0x18	; 24
    2106:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00001100);
    210a:	8c e0       	ldi	r24, 0x0C	; 12
    210c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000111);
    2110:	87 e0       	ldi	r24, 0x07	; 7
    2112:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000110);
    2116:	86 e0       	ldi	r24, 0x06	; 6
    2118:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000000);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000000);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000000);
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
		LCD_vidWriteCharctr(0b00000000);
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>

}
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <LCD_vidSetPosition>:

void LCD_vidSetPosition(u8 row,u8 col){
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	00 d0       	rcall	.+0      	; 0x2142 <LCD_vidSetPosition+0x6>
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	6a 83       	std	Y+2, r22	; 0x02
	if(row==0)
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	88 23       	and	r24, r24
    214e:	29 f4       	brne	.+10     	; 0x215a <LCD_vidSetPosition+0x1e>
		LCD_vidSendCommand(128+col);
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	80 58       	subi	r24, 0x80	; 128
    2154:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <LCD_vidSetPosition+0x26>
	else
		LCD_vidSendCommand(128+64+col);
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	80 54       	subi	r24, 0x40	; 64
    215e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <LCD_vidWriteString>:

void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	62 97       	sbiw	r28, 0x12	; 18
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	99 8b       	std	Y+17, r25	; 0x11
    2182:	88 8b       	std	Y+16, r24	; 0x10
    2184:	6a 8b       	std	Y+18, r22	; 0x12

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration=0;
    2186:	1f 86       	std	Y+15, r1	; 0x0f
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    2188:	1f 86       	std	Y+15, r1	; 0x0f
    218a:	80 c0       	rjmp	.+256    	; 0x228c <LCD_vidWriteString+0x120>
	{

		/* Write Character on LCD */
		LCD_vidWriteCharctr(pu8StringCpy[iteration]);
    218c:	8f 85       	ldd	r24, Y+15	; 0x0f
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	88 89       	ldd	r24, Y+16	; 0x10
    2194:	99 89       	ldd	r25, Y+17	; 0x11
    2196:	fc 01       	movw	r30, r24
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	80 81       	ld	r24, Z
    219e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	a0 e0       	ldi	r26, 0x00	; 0
    21a8:	b0 e4       	ldi	r27, 0x40	; 64
    21aa:	8b 87       	std	Y+11, r24	; 0x0b
    21ac:	9c 87       	std	Y+12, r25	; 0x0c
    21ae:	ad 87       	std	Y+13, r26	; 0x0d
    21b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	54 e4       	ldi	r21, 0x44	; 68
    21c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8f 83       	std	Y+7, r24	; 0x07
    21cc:	98 87       	std	Y+8, r25	; 0x08
    21ce:	a9 87       	std	Y+9, r26	; 0x09
    21d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21d2:	6f 81       	ldd	r22, Y+7	; 0x07
    21d4:	78 85       	ldd	r23, Y+8	; 0x08
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e8       	ldi	r20, 0x80	; 128
    21e0:	5f e3       	ldi	r21, 0x3F	; 63
    21e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <LCD_vidWriteString+0x88>
		__ticks = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	3f c0       	rjmp	.+126    	; 0x2272 <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	4c f5       	brge	.+82     	; 0x225e <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	6b 85       	ldd	r22, Y+11	; 0x0b
    220e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2210:	8d 85       	ldd	r24, Y+13	; 0x0d
    2212:	9e 85       	ldd	r25, Y+14	; 0x0e
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e2       	ldi	r20, 0x20	; 32
    221a:	51 e4       	ldi	r21, 0x41	; 65
    221c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <LCD_vidWriteString+0xe8>
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9c 83       	std	Y+4, r25	; 0x04
    223c:	8b 83       	std	Y+3, r24	; 0x03
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_vidWriteString+0xd6>
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	69 f7       	brne	.-38     	; 0x2236 <LCD_vidWriteString+0xca>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9e 83       	std	Y+6, r25	; 0x06
    2270:	8d 83       	std	Y+5, r24	; 0x05
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_vidWriteString+0x112>
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01

	//	/* Local loop index */
	//	u8 u8Index = 0;
	u8 iteration=0;
	//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	8f 87       	std	Y+15, r24	; 0x0f
    228c:	9f 85       	ldd	r25, Y+15	; 0x0f
    228e:	8a 89       	ldd	r24, Y+18	; 0x12
    2290:	98 17       	cp	r25, r24
    2292:	08 f4       	brcc	.+2      	; 0x2296 <LCD_vidWriteString+0x12a>
    2294:	7b cf       	rjmp	.-266    	; 0x218c <LCD_vidWriteString+0x20>

		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}

}
    2296:	62 96       	adiw	r28, 0x12	; 18
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <Gotoxy>:


void Gotoxy (u8 Y,u8 X)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <Gotoxy+0x6>
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <Gotoxy+0x8>
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	88 23       	and	r24, r24
    22bc:	e1 f0       	breq	.+56     	; 0x22f6 <Gotoxy+0x4e>
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	81 31       	cpi	r24, 0x11	; 17
    22c2:	c8 f4       	brcc	.+50     	; 0x22f6 <Gotoxy+0x4e>
	{
		switch(Y)
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	3c 83       	std	Y+4, r19	; 0x04
    22cc:	2b 83       	std	Y+3, r18	; 0x03
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	31 f0       	breq	.+12     	; 0x22e4 <Gotoxy+0x3c>
    22d8:	2b 81       	ldd	r18, Y+3	; 0x03
    22da:	3c 81       	ldd	r19, Y+4	; 0x04
    22dc:	22 30       	cpi	r18, 0x02	; 2
    22de:	31 05       	cpc	r19, r1
    22e0:	31 f0       	breq	.+12     	; 0x22ee <Gotoxy+0x46>
    22e2:	09 c0       	rjmp	.+18     	; 0x22f6 <Gotoxy+0x4e>
		{
		case 1:
			LCD_vidSendCommand(X+127);
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	81 58       	subi	r24, 0x81	; 129
    22e8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
    22ec:	04 c0       	rjmp	.+8      	; 0x22f6 <Gotoxy+0x4e>
			break;
		case 2:
			LCD_vidSendCommand(X+191);
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	81 54       	subi	r24, 0x41	; 65
    22f2:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
			break;
		default:
			break;
		}
	}
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <LCD_vidWriteExtraChar>:


void LCD_vidWriteExtraChar (u8 Y,u8 X)
{
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	62 97       	sbiw	r28, 0x12	; 18
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	89 8b       	std	Y+17, r24	; 0x11
    231a:	6a 8b       	std	Y+18, r22	; 0x12
	u8 iteration1,iteration2;

	/*DDRAM-->CGRAM*/
	LCD_vidSendCommand(64);
    231c:	80 e4       	ldi	r24, 0x40	; 64
    231e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    2322:	18 8a       	std	Y+16, r1	; 0x10
    2324:	0c c0       	rjmp	.+24     	; 0x233e <LCD_vidWriteExtraChar+0x3a>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
    2326:	88 89       	ldd	r24, Y+16	; 0x10
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	fc 01       	movw	r30, r24
    232e:	e6 55       	subi	r30, 0x56	; 86
    2330:	fe 4f       	sbci	r31, 0xFE	; 254
    2332:	80 81       	ld	r24, Z
    2334:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
{
	u8 iteration1,iteration2;

	/*DDRAM-->CGRAM*/
	LCD_vidSendCommand(64);
	for(iteration1=0 ; iteration1<64 ; iteration1++)
    2338:	88 89       	ldd	r24, Y+16	; 0x10
    233a:	8f 5f       	subi	r24, 0xFF	; 255
    233c:	88 8b       	std	Y+16, r24	; 0x10
    233e:	88 89       	ldd	r24, Y+16	; 0x10
    2340:	80 34       	cpi	r24, 0x40	; 64
    2342:	88 f3       	brcs	.-30     	; 0x2326 <LCD_vidWriteExtraChar+0x22>
	{
		LCD_vidWriteCharctr(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
    2344:	80 e8       	ldi	r24, 0x80	; 128
    2346:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LCD_vidSendCommand>
	Gotoxy(Y,X);
    234a:	89 89       	ldd	r24, Y+17	; 0x11
    234c:	6a 89       	ldd	r22, Y+18	; 0x12
    234e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Gotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    2352:	1f 86       	std	Y+15, r1	; 0x0f
    2354:	78 c0       	rjmp	.+240    	; 0x2446 <LCD_vidWriteExtraChar+0x142>
	{
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);
    2356:	8f 85       	ldd	r24, Y+15	; 0x0f
    2358:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a0 ea       	ldi	r26, 0xA0	; 160
    2362:	b0 e4       	ldi	r27, 0x40	; 64
    2364:	8b 87       	std	Y+11, r24	; 0x0b
    2366:	9c 87       	std	Y+12, r25	; 0x0c
    2368:	ad 87       	std	Y+13, r26	; 0x0d
    236a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	6b 85       	ldd	r22, Y+11	; 0x0b
    236e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2370:	8d 85       	ldd	r24, Y+13	; 0x0d
    2372:	9e 85       	ldd	r25, Y+14	; 0x0e
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a ef       	ldi	r20, 0xFA	; 250
    237a:	54 e4       	ldi	r21, 0x44	; 68
    237c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	8f 83       	std	Y+7, r24	; 0x07
    2386:	98 87       	std	Y+8, r25	; 0x08
    2388:	a9 87       	std	Y+9, r26	; 0x09
    238a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    238c:	6f 81       	ldd	r22, Y+7	; 0x07
    238e:	78 85       	ldd	r23, Y+8	; 0x08
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	2c f4       	brge	.+10     	; 0x23ae <LCD_vidWriteExtraChar+0xaa>
		__ticks = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	3f c0       	rjmp	.+126    	; 0x242c <LCD_vidWriteExtraChar+0x128>
	else if (__tmp > 65535)
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	4f e7       	ldi	r20, 0x7F	; 127
    23bc:	57 e4       	ldi	r21, 0x47	; 71
    23be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	4c f5       	brge	.+82     	; 0x2418 <LCD_vidWriteExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    23cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e2       	ldi	r20, 0x20	; 32
    23d4:	51 e4       	ldi	r21, 0x41	; 65
    23d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <LCD_vidWriteExtraChar+0x10a>
    23f0:	88 ec       	ldi	r24, 0xC8	; 200
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 83       	std	Y+4, r25	; 0x04
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <LCD_vidWriteExtraChar+0xf8>
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	69 f7       	brne	.-38     	; 0x23f0 <LCD_vidWriteExtraChar+0xec>
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <LCD_vidWriteExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_vidWriteExtraChar+0x134>
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_vidSendCommand(128);
	Gotoxy(Y,X);
	/*First eight character which saved at CGRAM*/
	for (iteration2=0; iteration2<=7 ; iteration2++)
    2440:	8f 85       	ldd	r24, Y+15	; 0x0f
    2442:	8f 5f       	subi	r24, 0xFF	; 255
    2444:	8f 87       	std	Y+15, r24	; 0x0f
    2446:	8f 85       	ldd	r24, Y+15	; 0x0f
    2448:	88 30       	cpi	r24, 0x08	; 8
    244a:	08 f4       	brcc	.+2      	; 0x244e <LCD_vidWriteExtraChar+0x14a>
    244c:	84 cf       	rjmp	.-248    	; 0x2356 <LCD_vidWriteExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_vidWriteCharctr(iteration2);

		_delay_ms(5);
	}
}
    244e:	62 96       	adiw	r28, 0x12	; 18
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <UART_Init>:
#include "UART_register.h"
#include "DIO_Interface.h"
#include <avr/delay.h>

void UART_Init(void)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
	
	// Set Frame Format -> 8 data, 1 stop, No Parity
	UCSRC=0b10000110;
    2468:	e0 e4       	ldi	r30, 0x40	; 64
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	86 e8       	ldi	r24, 0x86	; 134
    246e:	80 83       	st	Z, r24
	
	
 // Set BaudRate -> 9600/8MhZ
  UBRRL = 51;
    2470:	e9 e2       	ldi	r30, 0x29	; 41
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	83 e3       	ldi	r24, 0x33	; 51
    2476:	80 83       	st	Z, r24
  UBRRH = 0;
    2478:	e0 e4       	ldi	r30, 0x40	; 64
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	10 82       	st	Z, r1
  
  //enable TX,RX
	UCSRB=0x18;
    247e:	ea e2       	ldi	r30, 0x2A	; 42
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	88 e1       	ldi	r24, 0x18	; 24
    2484:	80 83       	st	Z, r24
}
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <UART_SendChar>:

void UART_SendChar(u8 data)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	0f 92       	push	r0
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,5)==0x00);
    2498:	eb e2       	ldi	r30, 0x2B	; 43
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	82 95       	swap	r24
    24a0:	86 95       	lsr	r24
    24a2:	87 70       	andi	r24, 0x07	; 7
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	81 70       	andi	r24, 0x01	; 1
    24aa:	90 70       	andi	r25, 0x00	; 0
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	a1 f3       	breq	.-24     	; 0x2498 <UART_SendChar+0xc>
	UDR=data;
    24b0:	ec e2       	ldi	r30, 0x2C	; 44
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	80 83       	st	Z, r24
	
}
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <UART_GetChar>:

u8 UART_GetChar(void)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
//	u8 Result;
	while(GET_BIT(UCSRA,7)==0x00);
    24c8:	eb e2       	ldi	r30, 0x2B	; 43
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	88 23       	and	r24, r24
    24d0:	dc f7       	brge	.-10     	; 0x24c8 <UART_GetChar+0x8>
//	Result=UDR;
	
	//clear flag
//	SET_BIT(UCSRA,7);
	return UDR;
    24d2:	ec e2       	ldi	r30, 0x2C	; 44
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
}
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <UART_vSendstring>:

void UART_vSendstring( char *ptr)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	60 97       	sbiw	r28, 0x10	; 16
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	98 8b       	std	Y+16, r25	; 0x10
    24f4:	8f 87       	std	Y+15, r24	; 0x0f
    24f6:	7c c0       	rjmp	.+248    	; 0x25f0 <UART_vSendstring+0x112>
	while(*ptr!=0)
	{
		UART_SendChar(*ptr);
    24f8:	ef 85       	ldd	r30, Y+15	; 0x0f
    24fa:	f8 89       	ldd	r31, Y+16	; 0x10
    24fc:	80 81       	ld	r24, Z
    24fe:	0e 94 46 12 	call	0x248c	; 0x248c <UART_SendChar>
		ptr++;
    2502:	8f 85       	ldd	r24, Y+15	; 0x0f
    2504:	98 89       	ldd	r25, Y+16	; 0x10
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	98 8b       	std	Y+16, r25	; 0x10
    250a:	8f 87       	std	Y+15, r24	; 0x0f
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a8 ec       	ldi	r26, 0xC8	; 200
    2512:	b2 e4       	ldi	r27, 0x42	; 66
    2514:	8b 87       	std	Y+11, r24	; 0x0b
    2516:	9c 87       	std	Y+12, r25	; 0x0c
    2518:	ad 87       	std	Y+13, r26	; 0x0d
    251a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6b 85       	ldd	r22, Y+11	; 0x0b
    251e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a ef       	ldi	r20, 0xFA	; 250
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8f 83       	std	Y+7, r24	; 0x07
    2536:	98 87       	std	Y+8, r25	; 0x08
    2538:	a9 87       	std	Y+9, r26	; 0x09
    253a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <UART_vSendstring+0x80>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <UART_vSendstring+0xfe>
	else if (__tmp > 65535)
    255e:	6f 81       	ldd	r22, Y+7	; 0x07
    2560:	78 85       	ldd	r23, Y+8	; 0x08
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <UART_vSendstring+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6b 85       	ldd	r22, Y+11	; 0x0b
    2578:	7c 85       	ldd	r23, Y+12	; 0x0c
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e 83       	std	Y+6, r25	; 0x06
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	0f c0       	rjmp	.+30     	; 0x25be <UART_vSendstring+0xe0>
    25a0:	88 ec       	ldi	r24, 0xC8	; 200
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 83       	std	Y+4, r25	; 0x04
    25a6:	8b 83       	std	Y+3, r24	; 0x03
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <UART_vSendstring+0xce>
    25b0:	9c 83       	std	Y+4, r25	; 0x04
    25b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <UART_vSendstring+0xc2>
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <UART_vSendstring+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <UART_vSendstring+0x10a>
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_vSendstring( char *ptr)
{
	while(*ptr!=0)
    25f0:	ef 85       	ldd	r30, Y+15	; 0x0f
    25f2:	f8 89       	ldd	r31, Y+16	; 0x10
    25f4:	80 81       	ld	r24, Z
    25f6:	88 23       	and	r24, r24
    25f8:	09 f0       	breq	.+2      	; 0x25fc <UART_vSendstring+0x11e>
    25fa:	7e cf       	rjmp	.-260    	; 0x24f8 <UART_vSendstring+0x1a>
	{
		UART_SendChar(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
    25fc:	60 96       	adiw	r28, 0x10	; 16
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <main>:
#include "UART_interface.h"
#include "menu.h"
#include "EEPROM_interface.h"

int main(void)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	6e 97       	sbiw	r28, 0x1e	; 30
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61

	UART_Init();
    2622:	0e 94 30 12 	call	0x2460	; 0x2460 <UART_Init>
	EEPROM_Init();
    2626:	0e 94 b5 08 	call	0x116a	; 0x116a <EEPROM_Init>
	DIO_VidSetPinDirection(3,0,0);
    262a:	83 e0       	ldi	r24, 0x03	; 3
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3,1,1);
    2634:	83 e0       	ldi	r24, 0x03	; 3
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	41 e0       	ldi	r20, 0x01	; 1
    263a:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>

	//DC Motor.....
	DIO_VidSetPinDirection(1,5,1);
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	65 e0       	ldi	r22, 0x05	; 5
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(1,6,1);
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	66 e0       	ldi	r22, 0x06	; 6
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>

	//Red Led.....
	DIO_VidSetPinDirection(1,3,1);
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	63 e0       	ldi	r22, 0x03	; 3
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>
	//green led
	DIO_VidSetPinDirection(1,4,1);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	64 e0       	ldi	r22, 0x04	; 4
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>

	//LCD initialize.....
	LCD_vidInit();
    2666:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_vidInit>

	/* Printing Welcome screen */
	LCD_vidWriteString("Welcome to smart",16);
    266a:	80 e6       	ldi	r24, 0x60	; 96
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	60 e1       	ldi	r22, 0x10	; 16
    2670:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	LCD_vidSetPosition(1,0);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
	LCD_vidWriteString("home system",11);
    267c:	81 e7       	ldi	r24, 0x71	; 113
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	6b e0       	ldi	r22, 0x0B	; 11
    2682:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	aa e7       	ldi	r26, 0x7A	; 122
    268c:	b4 e4       	ldi	r27, 0x44	; 68
    268e:	89 8f       	std	Y+25, r24	; 0x19
    2690:	9a 8f       	std	Y+26, r25	; 0x1a
    2692:	ab 8f       	std	Y+27, r26	; 0x1b
    2694:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2696:	69 8d       	ldd	r22, Y+25	; 0x19
    2698:	7a 8d       	ldd	r23, Y+26	; 0x1a
    269a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a ef       	ldi	r20, 0xFA	; 250
    26a4:	54 e4       	ldi	r21, 0x44	; 68
    26a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	8d 8b       	std	Y+21, r24	; 0x15
    26b0:	9e 8b       	std	Y+22, r25	; 0x16
    26b2:	af 8b       	std	Y+23, r26	; 0x17
    26b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26b6:	6d 89       	ldd	r22, Y+21	; 0x15
    26b8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ba:	8f 89       	ldd	r24, Y+23	; 0x17
    26bc:	98 8d       	ldd	r25, Y+24	; 0x18
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	40 e8       	ldi	r20, 0x80	; 128
    26c4:	5f e3       	ldi	r21, 0x3F	; 63
    26c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26ca:	88 23       	and	r24, r24
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <main+0xca>
		__ticks = 1;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9c 8b       	std	Y+20, r25	; 0x14
    26d4:	8b 8b       	std	Y+19, r24	; 0x13
    26d6:	3f c0       	rjmp	.+126    	; 0x2756 <main+0x148>
	else if (__tmp > 65535)
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	4c f5       	brge	.+82     	; 0x2742 <main+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f0:	69 8d       	ldd	r22, Y+25	; 0x19
    26f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <main+0x12a>
    271a:	88 ec       	ldi	r24, 0xC8	; 200
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9a 8b       	std	Y+18, r25	; 0x12
    2720:	89 8b       	std	Y+17, r24	; 0x11
    2722:	89 89       	ldd	r24, Y+17	; 0x11
    2724:	9a 89       	ldd	r25, Y+18	; 0x12
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <main+0x118>
    272a:	9a 8b       	std	Y+18, r25	; 0x12
    272c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	8b 89       	ldd	r24, Y+19	; 0x13
    2730:	9c 89       	ldd	r25, Y+20	; 0x14
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	8b 89       	ldd	r24, Y+19	; 0x13
    273a:	9c 89       	ldd	r25, Y+20	; 0x14
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <main+0x10c>
    2740:	14 c0       	rjmp	.+40     	; 0x276a <main+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	6d 89       	ldd	r22, Y+21	; 0x15
    2744:	7e 89       	ldd	r23, Y+22	; 0x16
    2746:	8f 89       	ldd	r24, Y+23	; 0x17
    2748:	98 8d       	ldd	r25, Y+24	; 0x18
    274a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	98 8b       	std	Y+16, r25	; 0x10
    275c:	8f 87       	std	Y+15, r24	; 0x0f
    275e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2760:	98 89       	ldd	r25, Y+16	; 0x10
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <main+0x154>
    2766:	98 8b       	std	Y+16, r25	; 0x10
    2768:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_clearscreen();
    276a:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>


	 u8 Allow_to_enter=0;
    276e:	1e 8e       	std	Y+30, r1	; 0x1e
	 Allow_to_enter= Main_Screen();
    2770:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Main_Screen>
    2774:	8e 8f       	std	Y+30, r24	; 0x1e

      if(Allow_to_enter)
    2776:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2778:	88 23       	and	r24, r24
    277a:	09 f4       	brne	.+2      	; 0x277e <main+0x170>
    277c:	95 c0       	rjmp	.+298    	; 0x28a8 <main+0x29a>
      {
	while (1)//The start of the periodic code
	{
		LCD_vidWriteString("1 for Open Door",15);
    277e:	8d e7       	ldi	r24, 0x7D	; 125
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	6f e0       	ldi	r22, 0x0F	; 15
    2784:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
		LCD_vidWriteString("0 for close door :",16);
    2790:	8d e8       	ldi	r24, 0x8D	; 141
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	60 e1       	ldi	r22, 0x10	; 16
    2796:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
		u8 x=UART_GetChar();
    279a:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_GetChar>
    279e:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_vidWriteCharctr(x);
    27a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	aa e7       	ldi	r26, 0x7A	; 122
    27ac:	b4 e4       	ldi	r27, 0x44	; 68
    27ae:	8b 87       	std	Y+11, r24	; 0x0b
    27b0:	9c 87       	std	Y+12, r25	; 0x0c
    27b2:	ad 87       	std	Y+13, r26	; 0x0d
    27b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    27bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	4a ef       	ldi	r20, 0xFA	; 250
    27c4:	54 e4       	ldi	r21, 0x44	; 68
    27c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	8f 83       	std	Y+7, r24	; 0x07
    27d0:	98 87       	std	Y+8, r25	; 0x08
    27d2:	a9 87       	std	Y+9, r26	; 0x09
    27d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d6:	6f 81       	ldd	r22, Y+7	; 0x07
    27d8:	78 85       	ldd	r23, Y+8	; 0x08
    27da:	89 85       	ldd	r24, Y+9	; 0x09
    27dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e8       	ldi	r20, 0x80	; 128
    27e4:	5f e3       	ldi	r21, 0x3F	; 63
    27e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27ea:	88 23       	and	r24, r24
    27ec:	2c f4       	brge	.+10     	; 0x27f8 <main+0x1ea>
		__ticks = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
    27f6:	3f c0       	rjmp	.+126    	; 0x2876 <main+0x268>
	else if (__tmp > 65535)
    27f8:	6f 81       	ldd	r22, Y+7	; 0x07
    27fa:	78 85       	ldd	r23, Y+8	; 0x08
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	4c f5       	brge	.+82     	; 0x2862 <main+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2810:	6b 85       	ldd	r22, Y+11	; 0x0b
    2812:	7c 85       	ldd	r23, Y+12	; 0x0c
    2814:	8d 85       	ldd	r24, Y+13	; 0x0d
    2816:	9e 85       	ldd	r25, Y+14	; 0x0e
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	51 e4       	ldi	r21, 0x41	; 65
    2820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <main+0x24a>
    283a:	88 ec       	ldi	r24, 0xC8	; 200
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9c 83       	std	Y+4, r25	; 0x04
    2840:	8b 83       	std	Y+3, r24	; 0x03
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	9c 81       	ldd	r25, Y+4	; 0x04
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <main+0x238>
    284a:	9c 83       	std	Y+4, r25	; 0x04
    284c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	9e 81       	ldd	r25, Y+6	; 0x06
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	69 f7       	brne	.-38     	; 0x283a <main+0x22c>
    2860:	14 c0       	rjmp	.+40     	; 0x288a <main+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <main+0x274>
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearscreen();
    288a:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
		if(x=='1')
    288e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2890:	81 33       	cpi	r24, 0x31	; 49
    2892:	19 f4       	brne	.+6      	; 0x289a <main+0x28c>
			OpenDoor();
    2894:	0e 94 5f 14 	call	0x28be	; 0x28be <OpenDoor>
    2898:	72 cf       	rjmp	.-284    	; 0x277e <main+0x170>
		else if(x=='0')
    289a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    289c:	80 33       	cpi	r24, 0x30	; 48
    289e:	09 f0       	breq	.+2      	; 0x28a2 <main+0x294>
    28a0:	6e cf       	rjmp	.-292    	; 0x277e <main+0x170>
			CloseDoor();
    28a2:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <CloseDoor>
    28a6:	6b cf       	rjmp	.-298    	; 0x277e <main+0x170>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
	}
      }



}//end of main function
    28ac:	6e 96       	adiw	r28, 0x1e	; 30
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <OpenDoor>:
#include "UART_interface.h"
#include "EEPROM_interface.h"


void OpenDoor(void)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	2e 97       	sbiw	r28, 0x0e	; 14
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(1,5,1);
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	65 e0       	ldi	r22, 0x05	; 5
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(1,6,0);
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	66 e0       	ldi	r22, 0x06	; 6
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	aa ef       	ldi	r26, 0xFA	; 250
    28ec:	b3 e4       	ldi	r27, 0x43	; 67
    28ee:	8b 87       	std	Y+11, r24	; 0x0b
    28f0:	9c 87       	std	Y+12, r25	; 0x0c
    28f2:	ad 87       	std	Y+13, r26	; 0x0d
    28f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	4a ef       	ldi	r20, 0xFA	; 250
    2904:	54 e4       	ldi	r21, 0x44	; 68
    2906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	8f 83       	std	Y+7, r24	; 0x07
    2910:	98 87       	std	Y+8, r25	; 0x08
    2912:	a9 87       	std	Y+9, r26	; 0x09
    2914:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2916:	6f 81       	ldd	r22, Y+7	; 0x07
    2918:	78 85       	ldd	r23, Y+8	; 0x08
    291a:	89 85       	ldd	r24, Y+9	; 0x09
    291c:	9a 85       	ldd	r25, Y+10	; 0x0a
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e8       	ldi	r20, 0x80	; 128
    2924:	5f e3       	ldi	r21, 0x3F	; 63
    2926:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    292a:	88 23       	and	r24, r24
    292c:	2c f4       	brge	.+10     	; 0x2938 <OpenDoor+0x7a>
		__ticks = 1;
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9e 83       	std	Y+6, r25	; 0x06
    2934:	8d 83       	std	Y+5, r24	; 0x05
    2936:	3f c0       	rjmp	.+126    	; 0x29b6 <OpenDoor+0xf8>
	else if (__tmp > 65535)
    2938:	6f 81       	ldd	r22, Y+7	; 0x07
    293a:	78 85       	ldd	r23, Y+8	; 0x08
    293c:	89 85       	ldd	r24, Y+9	; 0x09
    293e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	3f ef       	ldi	r19, 0xFF	; 255
    2944:	4f e7       	ldi	r20, 0x7F	; 127
    2946:	57 e4       	ldi	r21, 0x47	; 71
    2948:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    294c:	18 16       	cp	r1, r24
    294e:	4c f5       	brge	.+82     	; 0x29a2 <OpenDoor+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2950:	6b 85       	ldd	r22, Y+11	; 0x0b
    2952:	7c 85       	ldd	r23, Y+12	; 0x0c
    2954:	8d 85       	ldd	r24, Y+13	; 0x0d
    2956:	9e 85       	ldd	r25, Y+14	; 0x0e
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e2       	ldi	r20, 0x20	; 32
    295e:	51 e4       	ldi	r21, 0x41	; 65
    2960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
    2978:	0f c0       	rjmp	.+30     	; 0x2998 <OpenDoor+0xda>
    297a:	88 ec       	ldi	r24, 0xC8	; 200
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	8b 83       	std	Y+3, r24	; 0x03
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	9c 81       	ldd	r25, Y+4	; 0x04
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <OpenDoor+0xc8>
    298a:	9c 83       	std	Y+4, r25	; 0x04
    298c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2998:	8d 81       	ldd	r24, Y+5	; 0x05
    299a:	9e 81       	ldd	r25, Y+6	; 0x06
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	69 f7       	brne	.-38     	; 0x297a <OpenDoor+0xbc>
    29a0:	14 c0       	rjmp	.+40     	; 0x29ca <OpenDoor+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a2:	6f 81       	ldd	r22, Y+7	; 0x07
    29a4:	78 85       	ldd	r23, Y+8	; 0x08
    29a6:	89 85       	ldd	r24, Y+9	; 0x09
    29a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	8d 81       	ldd	r24, Y+5	; 0x05
    29b8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <OpenDoor+0x104>
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	DIO_VidSetPinValue(1,5,0);
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	65 e0       	ldi	r22, 0x05	; 5
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
    DIO_VidSetPinValue(1,6,0);
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	66 e0       	ldi	r22, 0x06	; 6
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    29de:	2e 96       	adiw	r28, 0x0e	; 14
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <CloseDoor>:

void CloseDoor(void)
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	2e 97       	sbiw	r28, 0x0e	; 14
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(1,5,0);
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	65 e0       	ldi	r22, 0x05	; 5
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(1,6,1);
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	66 e0       	ldi	r22, 0x06	; 6
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	aa ef       	ldi	r26, 0xFA	; 250
    2a1e:	b3 e4       	ldi	r27, 0x43	; 67
    2a20:	8b 87       	std	Y+11, r24	; 0x0b
    2a22:	9c 87       	std	Y+12, r25	; 0x0c
    2a24:	ad 87       	std	Y+13, r26	; 0x0d
    2a26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	4a ef       	ldi	r20, 0xFA	; 250
    2a36:	54 e4       	ldi	r21, 0x44	; 68
    2a38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8f 83       	std	Y+7, r24	; 0x07
    2a42:	98 87       	std	Y+8, r25	; 0x08
    2a44:	a9 87       	std	Y+9, r26	; 0x09
    2a46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a48:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4a:	78 85       	ldd	r23, Y+8	; 0x08
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	2c f4       	brge	.+10     	; 0x2a6a <CloseDoor+0x7a>
		__ticks = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	3f c0       	rjmp	.+126    	; 0x2ae8 <CloseDoor+0xf8>
	else if (__tmp > 65535)
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	4c f5       	brge	.+82     	; 0x2ad4 <CloseDoor+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9e 83       	std	Y+6, r25	; 0x06
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <CloseDoor+0xda>
    2aac:	88 ec       	ldi	r24, 0xC8	; 200
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <CloseDoor+0xc8>
    2abc:	9c 83       	std	Y+4, r25	; 0x04
    2abe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	69 f7       	brne	.-38     	; 0x2aac <CloseDoor+0xbc>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <CloseDoor+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad6:	78 85       	ldd	r23, Y+8	; 0x08
    2ad8:	89 85       	ldd	r24, Y+9	; 0x09
    2ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    2adc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	9a 81       	ldd	r25, Y+2	; 0x02
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <CloseDoor+0x104>
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

	DIO_VidSetPinValue(1,5,0);
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	65 e0       	ldi	r22, 0x05	; 5
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
    DIO_VidSetPinValue(1,6,0);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	66 e0       	ldi	r22, 0x06	; 6
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    2b10:	2e 96       	adiw	r28, 0x0e	; 14
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <LedRedOn>:

void LedRedOn(void)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(1,3,1);
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	63 e0       	ldi	r22, 0x03	; 3
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <LedRedOff>:

void LedRedOff(void)
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(1,3,0);
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	63 e0       	ldi	r22, 0x03	; 3
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <LedGreenOn>:

void LedGreenOn(void)
{
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(1,4,1);
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	64 e0       	ldi	r22, 0x04	; 4
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <LedGreenOff>:

void LedGreenOff(void)
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinValue(1,4,0);
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	64 e0       	ldi	r22, 0x04	; 4
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <BuzzerOn>:

void BuzzerOn(void)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(1,7,1);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	67 e0       	ldi	r22, 0x07	; 7
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(1,7,1);
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	67 e0       	ldi	r22, 0x07	; 7
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <BuzzerOff>:
void BuzzerOff(void)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(1,7,0);
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	67 e0       	ldi	r22, 0x07	; 7
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(1,7,0);
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	67 e0       	ldi	r22, 0x07	; 7
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_VidSetPinValue>
}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <Main_Screen>:

u8 Main_Screen(void)
{
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	c7 5b       	subi	r28, 0xB7	; 183
    2bd4:	d1 40       	sbci	r29, 0x01	; 1
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
	UART_Init();
    2be0:	0e 94 30 12 	call	0x2460	; 0x2460 <UART_Init>
	EEPROM_Init();
    2be4:	0e 94 b5 08 	call	0x116a	; 0x116a <EEPROM_Init>
	LCD_vidInit();
    2be8:	0e 94 3c 0a 	call	0x1478	; 0x1478 <LCD_vidInit>
	// main function
	int Allow_to_enter=0;
    2bec:	fe 01       	movw	r30, r28
    2bee:	ef 5a       	subi	r30, 0xAF	; 175
    2bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf2:	11 82       	std	Z+1, r1	; 0x01
    2bf4:	10 82       	st	Z, r1

		 // start address to write in is 28 and writing in 16 addresses


	///////////////////////////////////////////////////////////////////////////////
		LCD_vidWriteString("0 for Register",14);
    2bf6:	80 ea       	ldi	r24, 0xA0	; 160
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	6e e0       	ldi	r22, 0x0E	; 14
    2bfc:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
		LCD_vidSetPosition(1,0);
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
		LCD_vidWriteString("1 for Login :",13);
    2c08:	8f ea       	ldi	r24, 0xAF	; 175
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	6d e0       	ldi	r22, 0x0D	; 13
    2c0e:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
		//_delay_ms(1000);



		u8 DATA = NO_DATA ;
    2c12:	fe 01       	movw	r30, r28
    2c14:	e0 5b       	subi	r30, 0xB0	; 176
    2c16:	fe 4f       	sbci	r31, 0xFE	; 254
    2c18:	83 e2       	ldi	r24, 0x23	; 35
    2c1a:	80 83       	st	Z, r24
    2c1c:	06 c0       	rjmp	.+12     	; 0x2c2a <Main_Screen+0x64>
		while (DATA == NO_DATA)
		{
			DATA = UART_GetChar();
    2c1e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_GetChar>
    2c22:	fe 01       	movw	r30, r28
    2c24:	e0 5b       	subi	r30, 0xB0	; 176
    2c26:	fe 4f       	sbci	r31, 0xFE	; 254
    2c28:	80 83       	st	Z, r24
		//_delay_ms(1000);



		u8 DATA = NO_DATA ;
		while (DATA == NO_DATA)
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e0 5b       	subi	r30, 0xB0	; 176
    2c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c30:	80 81       	ld	r24, Z
    2c32:	83 32       	cpi	r24, 0x23	; 35
    2c34:	a1 f3       	breq	.-24     	; 0x2c1e <Main_Screen+0x58>
		{
			DATA = UART_GetChar();
		}
		LCD_vidWriteCharctr(DATA);
    2c36:	fe 01       	movw	r30, r28
    2c38:	e0 5b       	subi	r30, 0xB0	; 176
    2c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3c:	80 81       	ld	r24, Z
    2c3e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    2c42:	fe 01       	movw	r30, r28
    2c44:	ef 5c       	subi	r30, 0xCF	; 207
    2c46:	fe 4f       	sbci	r31, 0xFE	; 254
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	a8 e4       	ldi	r26, 0x48	; 72
    2c4e:	b3 e4       	ldi	r27, 0x43	; 67
    2c50:	80 83       	st	Z, r24
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	a2 83       	std	Z+2, r26	; 0x02
    2c56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c58:	8e 01       	movw	r16, r28
    2c5a:	03 5d       	subi	r16, 0xD3	; 211
    2c5c:	1e 4f       	sbci	r17, 0xFE	; 254
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ef 5c       	subi	r30, 0xCF	; 207
    2c62:	fe 4f       	sbci	r31, 0xFE	; 254
    2c64:	60 81       	ld	r22, Z
    2c66:	71 81       	ldd	r23, Z+1	; 0x01
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4a ef       	ldi	r20, 0xFA	; 250
    2c72:	54 e4       	ldi	r21, 0x44	; 68
    2c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	80 83       	st	Z, r24
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	a2 83       	std	Z+2, r26	; 0x02
    2c84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c86:	fe 01       	movw	r30, r28
    2c88:	e3 5d       	subi	r30, 0xD3	; 211
    2c8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c8c:	60 81       	ld	r22, Z
    2c8e:	71 81       	ldd	r23, Z+1	; 0x01
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	93 81       	ldd	r25, Z+3	; 0x03
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e8       	ldi	r20, 0x80	; 128
    2c9a:	5f e3       	ldi	r21, 0x3F	; 63
    2c9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ca0:	88 23       	and	r24, r24
    2ca2:	44 f4       	brge	.+16     	; 0x2cb4 <Main_Screen+0xee>
		__ticks = 1;
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e5 5d       	subi	r30, 0xD5	; 213
    2ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
    2cb2:	64 c0       	rjmp	.+200    	; 0x2d7c <Main_Screen+0x1b6>
	else if (__tmp > 65535)
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e3 5d       	subi	r30, 0xD3	; 211
    2cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	3f ef       	ldi	r19, 0xFF	; 255
    2cc6:	4f e7       	ldi	r20, 0x7F	; 127
    2cc8:	57 e4       	ldi	r21, 0x47	; 71
    2cca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cce:	18 16       	cp	r1, r24
    2cd0:	0c f0       	brlt	.+2      	; 0x2cd4 <Main_Screen+0x10e>
    2cd2:	43 c0       	rjmp	.+134    	; 0x2d5a <Main_Screen+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ef 5c       	subi	r30, 0xCF	; 207
    2cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cda:	60 81       	ld	r22, Z
    2cdc:	71 81       	ldd	r23, Z+1	; 0x01
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	93 81       	ldd	r25, Z+3	; 0x03
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e2       	ldi	r20, 0x20	; 32
    2ce8:	51 e4       	ldi	r21, 0x41	; 65
    2cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	8e 01       	movw	r16, r28
    2cf4:	05 5d       	subi	r16, 0xD5	; 213
    2cf6:	1e 4f       	sbci	r17, 0xFE	; 254
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	f8 01       	movw	r30, r16
    2d06:	91 83       	std	Z+1, r25	; 0x01
    2d08:	80 83       	st	Z, r24
    2d0a:	1f c0       	rjmp	.+62     	; 0x2d4a <Main_Screen+0x184>
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e7 5d       	subi	r30, 0xD7	; 215
    2d10:	fe 4f       	sbci	r31, 0xFE	; 254
    2d12:	88 ec       	ldi	r24, 0xC8	; 200
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e7 5d       	subi	r30, 0xD7	; 215
    2d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d20:	80 81       	ld	r24, Z
    2d22:	91 81       	ldd	r25, Z+1	; 0x01
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <Main_Screen+0x15e>
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e7 5d       	subi	r30, 0xD7	; 215
    2d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d32:	de 01       	movw	r26, r28
    2d34:	a5 5d       	subi	r26, 0xD5	; 213
    2d36:	be 4f       	sbci	r27, 0xFE	; 254
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e5 5d       	subi	r30, 0xD5	; 213
    2d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	11 96       	adiw	r26, 0x01	; 1
    2d46:	9c 93       	st	X, r25
    2d48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e5 5d       	subi	r30, 0xD5	; 213
    2d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d50:	80 81       	ld	r24, Z
    2d52:	91 81       	ldd	r25, Z+1	; 0x01
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	d1 f6       	brne	.-76     	; 0x2d0c <Main_Screen+0x146>
    2d58:	27 c0       	rjmp	.+78     	; 0x2da8 <Main_Screen+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5a:	8e 01       	movw	r16, r28
    2d5c:	05 5d       	subi	r16, 0xD5	; 213
    2d5e:	1e 4f       	sbci	r17, 0xFE	; 254
    2d60:	fe 01       	movw	r30, r28
    2d62:	e3 5d       	subi	r30, 0xD3	; 211
    2d64:	fe 4f       	sbci	r31, 0xFE	; 254
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	f8 01       	movw	r30, r16
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
    2d7c:	de 01       	movw	r26, r28
    2d7e:	a9 5d       	subi	r26, 0xD9	; 217
    2d80:	be 4f       	sbci	r27, 0xFE	; 254
    2d82:	fe 01       	movw	r30, r28
    2d84:	e5 5d       	subi	r30, 0xD5	; 213
    2d86:	fe 4f       	sbci	r31, 0xFE	; 254
    2d88:	80 81       	ld	r24, Z
    2d8a:	91 81       	ldd	r25, Z+1	; 0x01
    2d8c:	8d 93       	st	X+, r24
    2d8e:	9c 93       	st	X, r25
    2d90:	fe 01       	movw	r30, r28
    2d92:	e9 5d       	subi	r30, 0xD9	; 217
    2d94:	fe 4f       	sbci	r31, 0xFE	; 254
    2d96:	80 81       	ld	r24, Z
    2d98:	91 81       	ldd	r25, Z+1	; 0x01
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <Main_Screen+0x1d4>
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e9 5d       	subi	r30, 0xD9	; 217
    2da2:	fe 4f       	sbci	r31, 0xFE	; 254
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	80 83       	st	Z, r24
	    _delay_ms(200);
	     LCD_clearscreen();
    2da8:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>

	      if(DATA=='0'){
    2dac:	fe 01       	movw	r30, r28
    2dae:	e0 5b       	subi	r30, 0xB0	; 176
    2db0:	fe 4f       	sbci	r31, 0xFE	; 254
    2db2:	80 81       	ld	r24, Z
    2db4:	80 33       	cpi	r24, 0x30	; 48
    2db6:	11 f0       	breq	.+4      	; 0x2dbc <Main_Screen+0x1f6>
    2db8:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <Main_Screen+0x12e4>
	    	  u16 i;
	    	  EEPROM_ReadByte(number_of_users,chs,1);
    2dbc:	9e 01       	movw	r18, r28
    2dbe:	2d 5a       	subi	r18, 0xAD	; 173
    2dc0:	3e 4f       	sbci	r19, 0xFE	; 254
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	b9 01       	movw	r22, r18
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 0d 09 	call	0x121a	; 0x121a <EEPROM_ReadByte>
    2dce:	fe 01       	movw	r30, r28
    2dd0:	ed 5d       	subi	r30, 0xDD	; 221
    2dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a8 ec       	ldi	r26, 0xC8	; 200
    2dda:	b2 e4       	ldi	r27, 0x42	; 66
    2ddc:	80 83       	st	Z, r24
    2dde:	91 83       	std	Z+1, r25	; 0x01
    2de0:	a2 83       	std	Z+2, r26	; 0x02
    2de2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de4:	8e 01       	movw	r16, r28
    2de6:	01 5e       	subi	r16, 0xE1	; 225
    2de8:	1e 4f       	sbci	r17, 0xFE	; 254
    2dea:	fe 01       	movw	r30, r28
    2dec:	ed 5d       	subi	r30, 0xDD	; 221
    2dee:	fe 4f       	sbci	r31, 0xFE	; 254
    2df0:	60 81       	ld	r22, Z
    2df2:	71 81       	ldd	r23, Z+1	; 0x01
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	4a ef       	ldi	r20, 0xFA	; 250
    2dfe:	54 e4       	ldi	r21, 0x44	; 68
    2e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	f8 01       	movw	r30, r16
    2e0a:	80 83       	st	Z, r24
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	a2 83       	std	Z+2, r26	; 0x02
    2e10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e12:	fe 01       	movw	r30, r28
    2e14:	e1 5e       	subi	r30, 0xE1	; 225
    2e16:	fe 4f       	sbci	r31, 0xFE	; 254
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e8       	ldi	r20, 0x80	; 128
    2e26:	5f e3       	ldi	r21, 0x3F	; 63
    2e28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e2c:	88 23       	and	r24, r24
    2e2e:	44 f4       	brge	.+16     	; 0x2e40 <Main_Screen+0x27a>
		__ticks = 1;
    2e30:	fe 01       	movw	r30, r28
    2e32:	e3 5e       	subi	r30, 0xE3	; 227
    2e34:	fe 4f       	sbci	r31, 0xFE	; 254
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	80 83       	st	Z, r24
    2e3e:	64 c0       	rjmp	.+200    	; 0x2f08 <Main_Screen+0x342>
	else if (__tmp > 65535)
    2e40:	fe 01       	movw	r30, r28
    2e42:	e1 5e       	subi	r30, 0xE1	; 225
    2e44:	fe 4f       	sbci	r31, 0xFE	; 254
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	3f ef       	ldi	r19, 0xFF	; 255
    2e52:	4f e7       	ldi	r20, 0x7F	; 127
    2e54:	57 e4       	ldi	r21, 0x47	; 71
    2e56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e5a:	18 16       	cp	r1, r24
    2e5c:	0c f0       	brlt	.+2      	; 0x2e60 <Main_Screen+0x29a>
    2e5e:	43 c0       	rjmp	.+134    	; 0x2ee6 <Main_Screen+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	fe 01       	movw	r30, r28
    2e62:	ed 5d       	subi	r30, 0xDD	; 221
    2e64:	fe 4f       	sbci	r31, 0xFE	; 254
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e2       	ldi	r20, 0x20	; 32
    2e74:	51 e4       	ldi	r21, 0x41	; 65
    2e76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	8e 01       	movw	r16, r28
    2e80:	03 5e       	subi	r16, 0xE3	; 227
    2e82:	1e 4f       	sbci	r17, 0xFE	; 254
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	f8 01       	movw	r30, r16
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
    2e96:	1f c0       	rjmp	.+62     	; 0x2ed6 <Main_Screen+0x310>
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e5 5e       	subi	r30, 0xE5	; 229
    2e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e5 5e       	subi	r30, 0xE5	; 229
    2eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <Main_Screen+0x2ea>
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e5 5e       	subi	r30, 0xE5	; 229
    2eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eba:	91 83       	std	Z+1, r25	; 0x01
    2ebc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebe:	de 01       	movw	r26, r28
    2ec0:	a3 5e       	subi	r26, 0xE3	; 227
    2ec2:	be 4f       	sbci	r27, 0xFE	; 254
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e3 5e       	subi	r30, 0xE3	; 227
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	80 81       	ld	r24, Z
    2ecc:	91 81       	ldd	r25, Z+1	; 0x01
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	11 96       	adiw	r26, 0x01	; 1
    2ed2:	9c 93       	st	X, r25
    2ed4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e3 5e       	subi	r30, 0xE3	; 227
    2eda:	fe 4f       	sbci	r31, 0xFE	; 254
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	d1 f6       	brne	.-76     	; 0x2e98 <Main_Screen+0x2d2>
    2ee4:	28 c0       	rjmp	.+80     	; 0x2f36 <Main_Screen+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	03 5e       	subi	r16, 0xE3	; 227
    2eea:	1e 4f       	sbci	r17, 0xFE	; 254
    2eec:	fe 01       	movw	r30, r28
    2eee:	e1 5e       	subi	r30, 0xE1	; 225
    2ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	f8 01       	movw	r30, r16
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	de 01       	movw	r26, r28
    2f0a:	a7 5e       	subi	r26, 0xE7	; 231
    2f0c:	be 4f       	sbci	r27, 0xFE	; 254
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e3 5e       	subi	r30, 0xE3	; 227
    2f12:	fe 4f       	sbci	r31, 0xFE	; 254
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	11 96       	adiw	r26, 0x01	; 1
    2f1a:	9c 93       	st	X, r25
    2f1c:	8e 93       	st	-X, r24
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e7 5e       	subi	r30, 0xE7	; 231
    2f22:	fe 4f       	sbci	r31, 0xFE	; 254
    2f24:	80 81       	ld	r24, Z
    2f26:	91 81       	ldd	r25, Z+1	; 0x01
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <Main_Screen+0x362>
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e7 5e       	subi	r30, 0xE7	; 231
    2f30:	fe 4f       	sbci	r31, 0xFE	; 254
    2f32:	91 83       	std	Z+1, r25	; 0x01
    2f34:	80 83       	st	Z, r24
	    	  _delay_ms(100);
	               i=chs[0];
    2f36:	fe 01       	movw	r30, r28
    2f38:	ed 5a       	subi	r30, 0xAD	; 173
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	80 81       	ld	r24, Z
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e2 5b       	subi	r30, 0xB2	; 178
    2f42:	fe 4f       	sbci	r31, 0xFE	; 254
    2f44:	88 2f       	mov	r24, r24
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	80 83       	st	Z, r24
	    	  if(i==0xff)i=0x00;
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e2 5b       	subi	r30, 0xB2	; 178
    2f50:	fe 4f       	sbci	r31, 0xFE	; 254
    2f52:	80 81       	ld	r24, Z
    2f54:	91 81       	ldd	r25, Z+1	; 0x01
    2f56:	8f 3f       	cpi	r24, 0xFF	; 255
    2f58:	91 05       	cpc	r25, r1
    2f5a:	29 f4       	brne	.+10     	; 0x2f66 <Main_Screen+0x3a0>
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e2 5b       	subi	r30, 0xB2	; 178
    2f60:	fe 4f       	sbci	r31, 0xFE	; 254
    2f62:	11 82       	std	Z+1, r1	; 0x01
    2f64:	10 82       	st	Z, r1
	    	  i+=0x01;
    2f66:	de 01       	movw	r26, r28
    2f68:	a2 5b       	subi	r26, 0xB2	; 178
    2f6a:	be 4f       	sbci	r27, 0xFE	; 254
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e2 5b       	subi	r30, 0xB2	; 178
    2f70:	fe 4f       	sbci	r31, 0xFE	; 254
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	01 96       	adiw	r24, 0x01	; 1
    2f78:	8d 93       	st	X+, r24
    2f7a:	9c 93       	st	X, r25
	    	  EEPROM_WriteByte(number_of_users,i);
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	e2 5b       	subi	r30, 0xB2	; 178
    2f80:	fe 4f       	sbci	r31, 0xFE	; 254
    2f82:	20 81       	ld	r18, Z
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	62 2f       	mov	r22, r18
    2f8a:	0e 94 be 08 	call	0x117c	; 0x117c <EEPROM_WriteByte>
    2f8e:	fe 01       	movw	r30, r28
    2f90:	eb 5e       	subi	r30, 0xEB	; 235
    2f92:	fe 4f       	sbci	r31, 0xFE	; 254
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	a8 ec       	ldi	r26, 0xC8	; 200
    2f9a:	b2 e4       	ldi	r27, 0x42	; 66
    2f9c:	80 83       	st	Z, r24
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	a2 83       	std	Z+2, r26	; 0x02
    2fa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa4:	8e 01       	movw	r16, r28
    2fa6:	0f 5e       	subi	r16, 0xEF	; 239
    2fa8:	1e 4f       	sbci	r17, 0xFE	; 254
    2faa:	fe 01       	movw	r30, r28
    2fac:	eb 5e       	subi	r30, 0xEB	; 235
    2fae:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb0:	60 81       	ld	r22, Z
    2fb2:	71 81       	ldd	r23, Z+1	; 0x01
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	93 81       	ldd	r25, Z+3	; 0x03
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	4a ef       	ldi	r20, 0xFA	; 250
    2fbe:	54 e4       	ldi	r21, 0x44	; 68
    2fc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	f8 01       	movw	r30, r16
    2fca:	80 83       	st	Z, r24
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	a2 83       	std	Z+2, r26	; 0x02
    2fd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	ef 5e       	subi	r30, 0xEF	; 239
    2fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd8:	60 81       	ld	r22, Z
    2fda:	71 81       	ldd	r23, Z+1	; 0x01
    2fdc:	82 81       	ldd	r24, Z+2	; 0x02
    2fde:	93 81       	ldd	r25, Z+3	; 0x03
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e8       	ldi	r20, 0x80	; 128
    2fe6:	5f e3       	ldi	r21, 0x3F	; 63
    2fe8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fec:	88 23       	and	r24, r24
    2fee:	44 f4       	brge	.+16     	; 0x3000 <Main_Screen+0x43a>
		__ticks = 1;
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e1 5f       	subi	r30, 0xF1	; 241
    2ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	80 83       	st	Z, r24
    2ffe:	64 c0       	rjmp	.+200    	; 0x30c8 <Main_Screen+0x502>
	else if (__tmp > 65535)
    3000:	fe 01       	movw	r30, r28
    3002:	ef 5e       	subi	r30, 0xEF	; 239
    3004:	fe 4f       	sbci	r31, 0xFE	; 254
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	3f ef       	ldi	r19, 0xFF	; 255
    3012:	4f e7       	ldi	r20, 0x7F	; 127
    3014:	57 e4       	ldi	r21, 0x47	; 71
    3016:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    301a:	18 16       	cp	r1, r24
    301c:	0c f0       	brlt	.+2      	; 0x3020 <Main_Screen+0x45a>
    301e:	43 c0       	rjmp	.+134    	; 0x30a6 <Main_Screen+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3020:	fe 01       	movw	r30, r28
    3022:	eb 5e       	subi	r30, 0xEB	; 235
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	60 81       	ld	r22, Z
    3028:	71 81       	ldd	r23, Z+1	; 0x01
    302a:	82 81       	ldd	r24, Z+2	; 0x02
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e2       	ldi	r20, 0x20	; 32
    3034:	51 e4       	ldi	r21, 0x41	; 65
    3036:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	8e 01       	movw	r16, r28
    3040:	01 5f       	subi	r16, 0xF1	; 241
    3042:	1e 4f       	sbci	r17, 0xFE	; 254
    3044:	bc 01       	movw	r22, r24
    3046:	cd 01       	movw	r24, r26
    3048:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	f8 01       	movw	r30, r16
    3052:	91 83       	std	Z+1, r25	; 0x01
    3054:	80 83       	st	Z, r24
    3056:	1f c0       	rjmp	.+62     	; 0x3096 <Main_Screen+0x4d0>
    3058:	fe 01       	movw	r30, r28
    305a:	e3 5f       	subi	r30, 0xF3	; 243
    305c:	fe 4f       	sbci	r31, 0xFE	; 254
    305e:	88 ec       	ldi	r24, 0xC8	; 200
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	80 83       	st	Z, r24
    3066:	fe 01       	movw	r30, r28
    3068:	e3 5f       	subi	r30, 0xF3	; 243
    306a:	fe 4f       	sbci	r31, 0xFE	; 254
    306c:	80 81       	ld	r24, Z
    306e:	91 81       	ldd	r25, Z+1	; 0x01
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <Main_Screen+0x4aa>
    3074:	fe 01       	movw	r30, r28
    3076:	e3 5f       	subi	r30, 0xF3	; 243
    3078:	fe 4f       	sbci	r31, 0xFE	; 254
    307a:	91 83       	std	Z+1, r25	; 0x01
    307c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307e:	de 01       	movw	r26, r28
    3080:	a1 5f       	subi	r26, 0xF1	; 241
    3082:	be 4f       	sbci	r27, 0xFE	; 254
    3084:	fe 01       	movw	r30, r28
    3086:	e1 5f       	subi	r30, 0xF1	; 241
    3088:	fe 4f       	sbci	r31, 0xFE	; 254
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	11 96       	adiw	r26, 0x01	; 1
    3092:	9c 93       	st	X, r25
    3094:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3096:	fe 01       	movw	r30, r28
    3098:	e1 5f       	subi	r30, 0xF1	; 241
    309a:	fe 4f       	sbci	r31, 0xFE	; 254
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	d1 f6       	brne	.-76     	; 0x3058 <Main_Screen+0x492>
    30a4:	27 c0       	rjmp	.+78     	; 0x30f4 <Main_Screen+0x52e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a6:	8e 01       	movw	r16, r28
    30a8:	01 5f       	subi	r16, 0xF1	; 241
    30aa:	1e 4f       	sbci	r17, 0xFE	; 254
    30ac:	fe 01       	movw	r30, r28
    30ae:	ef 5e       	subi	r30, 0xEF	; 239
    30b0:	fe 4f       	sbci	r31, 0xFE	; 254
    30b2:	60 81       	ld	r22, Z
    30b4:	71 81       	ldd	r23, Z+1	; 0x01
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	f8 01       	movw	r30, r16
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	80 83       	st	Z, r24
    30c8:	de 01       	movw	r26, r28
    30ca:	a5 5f       	subi	r26, 0xF5	; 245
    30cc:	be 4f       	sbci	r27, 0xFE	; 254
    30ce:	fe 01       	movw	r30, r28
    30d0:	e1 5f       	subi	r30, 0xF1	; 241
    30d2:	fe 4f       	sbci	r31, 0xFE	; 254
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	8d 93       	st	X+, r24
    30da:	9c 93       	st	X, r25
    30dc:	fe 01       	movw	r30, r28
    30de:	e5 5f       	subi	r30, 0xF5	; 245
    30e0:	fe 4f       	sbci	r31, 0xFE	; 254
    30e2:	80 81       	ld	r24, Z
    30e4:	91 81       	ldd	r25, Z+1	; 0x01
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <Main_Screen+0x520>
    30ea:	fe 01       	movw	r30, r28
    30ec:	e5 5f       	subi	r30, 0xF5	; 245
    30ee:	fe 4f       	sbci	r31, 0xFE	; 254
    30f0:	91 83       	std	Z+1, r25	; 0x01
    30f2:	80 83       	st	Z, r24
	    		_delay_ms(100);
	    	  u8  current_position=i*ROW;
    30f4:	fe 01       	movw	r30, r28
    30f6:	e2 5b       	subi	r30, 0xB2	; 178
    30f8:	fe 4f       	sbci	r31, 0xFE	; 254
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	82 95       	swap	r24
    3100:	92 95       	swap	r25
    3102:	90 7f       	andi	r25, 0xF0	; 240
    3104:	98 27       	eor	r25, r24
    3106:	80 7f       	andi	r24, 0xF0	; 240
    3108:	98 27       	eor	r25, r24
    310a:	fe 01       	movw	r30, r28
    310c:	e3 5b       	subi	r30, 0xB3	; 179
    310e:	fe 4f       	sbci	r31, 0xFE	; 254
    3110:	80 83       	st	Z, r24
	    	  LCD_vidWriteString("Set user name :",15);
    3112:	8d eb       	ldi	r24, 0xBD	; 189
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	6f e0       	ldi	r22, 0x0F	; 15
    3118:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  LCD_vidSetPosition(1,0);
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
	    	  		//LCD_clearscreen();
	    	  		u16 name_counter=0;
    3124:	fe 01       	movw	r30, r28
    3126:	e5 5b       	subi	r30, 0xB5	; 181
    3128:	fe 4f       	sbci	r31, 0xFE	; 254
    312a:	11 82       	std	Z+1, r1	; 0x01
    312c:	10 82       	st	Z, r1
	    	  		u16 name[NAME_SIZE]={0xff};
    312e:	ce 01       	movw	r24, r28
    3130:	8e 59       	subi	r24, 0x9E	; 158
    3132:	9e 4f       	sbci	r25, 0xFE	; 254
    3134:	28 e1       	ldi	r18, 0x18	; 24
    3136:	fc 01       	movw	r30, r24
    3138:	df 01       	movw	r26, r30
    313a:	82 2f       	mov	r24, r18
    313c:	1d 92       	st	X+, r1
    313e:	8a 95       	dec	r24
    3140:	e9 f7       	brne	.-6      	; 0x313c <Main_Screen+0x576>
    3142:	fe 01       	movw	r30, r28
    3144:	ee 59       	subi	r30, 0x9E	; 158
    3146:	fe 4f       	sbci	r31, 0xFE	; 254
    3148:	8f ef       	ldi	r24, 0xFF	; 255
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	80 83       	st	Z, r24
    3150:	c4 c1       	rjmp	.+904    	; 0x34da <Main_Screen+0x914>
	    	  		while (name_counter<NAME_SIZE)
	    	  	    	{
	    	  				DATA = NO_DATA ;
    3152:	fe 01       	movw	r30, r28
    3154:	e0 5b       	subi	r30, 0xB0	; 176
    3156:	fe 4f       	sbci	r31, 0xFE	; 254
    3158:	83 e2       	ldi	r24, 0x23	; 35
    315a:	80 83       	st	Z, r24
    315c:	06 c0       	rjmp	.+12     	; 0x316a <Main_Screen+0x5a4>
	    	  				while (DATA == NO_DATA)
	    	  					{
	    	  						DATA = UART_GetChar();
    315e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_GetChar>
    3162:	fe 01       	movw	r30, r28
    3164:	e0 5b       	subi	r30, 0xB0	; 176
    3166:	fe 4f       	sbci	r31, 0xFE	; 254
    3168:	80 83       	st	Z, r24
	    	  		u16 name_counter=0;
	    	  		u16 name[NAME_SIZE]={0xff};
	    	  		while (name_counter<NAME_SIZE)
	    	  	    	{
	    	  				DATA = NO_DATA ;
	    	  				while (DATA == NO_DATA)
    316a:	fe 01       	movw	r30, r28
    316c:	e0 5b       	subi	r30, 0xB0	; 176
    316e:	fe 4f       	sbci	r31, 0xFE	; 254
    3170:	80 81       	ld	r24, Z
    3172:	83 32       	cpi	r24, 0x23	; 35
    3174:	a1 f3       	breq	.-24     	; 0x315e <Main_Screen+0x598>
	    	  					{
	    	  						DATA = UART_GetChar();
	    	  					}
	                       if(DATA=='@')break;
    3176:	fe 01       	movw	r30, r28
    3178:	e0 5b       	subi	r30, 0xB0	; 176
    317a:	fe 4f       	sbci	r31, 0xFE	; 254
    317c:	80 81       	ld	r24, Z
    317e:	80 34       	cpi	r24, 0x40	; 64
    3180:	09 f4       	brne	.+2      	; 0x3184 <Main_Screen+0x5be>
    3182:	b4 c1       	rjmp	.+872    	; 0x34ec <Main_Screen+0x926>
	    	  				name[name_counter]=DATA;
    3184:	fe 01       	movw	r30, r28
    3186:	e5 5b       	subi	r30, 0xB5	; 181
    3188:	fe 4f       	sbci	r31, 0xFE	; 254
    318a:	60 81       	ld	r22, Z
    318c:	71 81       	ldd	r23, Z+1	; 0x01
    318e:	fe 01       	movw	r30, r28
    3190:	e0 5b       	subi	r30, 0xB0	; 176
    3192:	fe 4f       	sbci	r31, 0xFE	; 254
    3194:	80 81       	ld	r24, Z
    3196:	48 2f       	mov	r20, r24
    3198:	50 e0       	ldi	r21, 0x00	; 0
    319a:	9e 01       	movw	r18, r28
    319c:	2e 59       	subi	r18, 0x9E	; 158
    319e:	3e 4f       	sbci	r19, 0xFE	; 254
    31a0:	cb 01       	movw	r24, r22
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	f9 01       	movw	r30, r18
    31a8:	e8 0f       	add	r30, r24
    31aa:	f9 1f       	adc	r31, r25
    31ac:	51 83       	std	Z+1, r21	; 0x01
    31ae:	40 83       	st	Z, r20
	    	  				LCD_vidWriteCharctr(DATA);
    31b0:	fe 01       	movw	r30, r28
    31b2:	e0 5b       	subi	r30, 0xB0	; 176
    31b4:	fe 4f       	sbci	r31, 0xFE	; 254
    31b6:	80 81       	ld	r24, Z
    31b8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    31bc:	fe 01       	movw	r30, r28
    31be:	e9 5f       	subi	r30, 0xF9	; 249
    31c0:	fe 4f       	sbci	r31, 0xFE	; 254
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a8 e4       	ldi	r26, 0x48	; 72
    31c8:	b2 e4       	ldi	r27, 0x42	; 66
    31ca:	80 83       	st	Z, r24
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	a2 83       	std	Z+2, r26	; 0x02
    31d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d2:	8e 01       	movw	r16, r28
    31d4:	0d 5f       	subi	r16, 0xFD	; 253
    31d6:	1e 4f       	sbci	r17, 0xFE	; 254
    31d8:	fe 01       	movw	r30, r28
    31da:	e9 5f       	subi	r30, 0xF9	; 249
    31dc:	fe 4f       	sbci	r31, 0xFE	; 254
    31de:	60 81       	ld	r22, Z
    31e0:	71 81       	ldd	r23, Z+1	; 0x01
    31e2:	82 81       	ldd	r24, Z+2	; 0x02
    31e4:	93 81       	ldd	r25, Z+3	; 0x03
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	4a ef       	ldi	r20, 0xFA	; 250
    31ec:	54 e4       	ldi	r21, 0x44	; 68
    31ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	f8 01       	movw	r30, r16
    31f8:	80 83       	st	Z, r24
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	a2 83       	std	Z+2, r26	; 0x02
    31fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3200:	fe 01       	movw	r30, r28
    3202:	ed 5f       	subi	r30, 0xFD	; 253
    3204:	fe 4f       	sbci	r31, 0xFE	; 254
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e8       	ldi	r20, 0x80	; 128
    3214:	5f e3       	ldi	r21, 0x3F	; 63
    3216:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    321a:	88 23       	and	r24, r24
    321c:	44 f4       	brge	.+16     	; 0x322e <Main_Screen+0x668>
		__ticks = 1;
    321e:	fe 01       	movw	r30, r28
    3220:	ef 5f       	subi	r30, 0xFF	; 255
    3222:	fe 4f       	sbci	r31, 0xFE	; 254
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
    322c:	64 c0       	rjmp	.+200    	; 0x32f6 <Main_Screen+0x730>
	else if (__tmp > 65535)
    322e:	fe 01       	movw	r30, r28
    3230:	ed 5f       	subi	r30, 0xFD	; 253
    3232:	fe 4f       	sbci	r31, 0xFE	; 254
    3234:	60 81       	ld	r22, Z
    3236:	71 81       	ldd	r23, Z+1	; 0x01
    3238:	82 81       	ldd	r24, Z+2	; 0x02
    323a:	93 81       	ldd	r25, Z+3	; 0x03
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	3f ef       	ldi	r19, 0xFF	; 255
    3240:	4f e7       	ldi	r20, 0x7F	; 127
    3242:	57 e4       	ldi	r21, 0x47	; 71
    3244:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3248:	18 16       	cp	r1, r24
    324a:	0c f0       	brlt	.+2      	; 0x324e <Main_Screen+0x688>
    324c:	43 c0       	rjmp	.+134    	; 0x32d4 <Main_Screen+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324e:	fe 01       	movw	r30, r28
    3250:	e9 5f       	subi	r30, 0xF9	; 249
    3252:	fe 4f       	sbci	r31, 0xFE	; 254
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e2       	ldi	r20, 0x20	; 32
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	8e 01       	movw	r16, r28
    326e:	0f 5f       	subi	r16, 0xFF	; 255
    3270:	1e 4f       	sbci	r17, 0xFE	; 254
    3272:	bc 01       	movw	r22, r24
    3274:	cd 01       	movw	r24, r26
    3276:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	f8 01       	movw	r30, r16
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
    3284:	1f c0       	rjmp	.+62     	; 0x32c4 <Main_Screen+0x6fe>
    3286:	fe 01       	movw	r30, r28
    3288:	e1 50       	subi	r30, 0x01	; 1
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	88 ec       	ldi	r24, 0xC8	; 200
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
    3294:	fe 01       	movw	r30, r28
    3296:	e1 50       	subi	r30, 0x01	; 1
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <Main_Screen+0x6d8>
    32a2:	fe 01       	movw	r30, r28
    32a4:	e1 50       	subi	r30, 0x01	; 1
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ac:	de 01       	movw	r26, r28
    32ae:	af 5f       	subi	r26, 0xFF	; 255
    32b0:	be 4f       	sbci	r27, 0xFE	; 254
    32b2:	fe 01       	movw	r30, r28
    32b4:	ef 5f       	subi	r30, 0xFF	; 255
    32b6:	fe 4f       	sbci	r31, 0xFE	; 254
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	11 96       	adiw	r26, 0x01	; 1
    32c0:	9c 93       	st	X, r25
    32c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c4:	fe 01       	movw	r30, r28
    32c6:	ef 5f       	subi	r30, 0xFF	; 255
    32c8:	fe 4f       	sbci	r31, 0xFE	; 254
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	00 97       	sbiw	r24, 0x00	; 0
    32d0:	d1 f6       	brne	.-76     	; 0x3286 <Main_Screen+0x6c0>
    32d2:	27 c0       	rjmp	.+78     	; 0x3322 <Main_Screen+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d4:	8e 01       	movw	r16, r28
    32d6:	0f 5f       	subi	r16, 0xFF	; 255
    32d8:	1e 4f       	sbci	r17, 0xFE	; 254
    32da:	fe 01       	movw	r30, r28
    32dc:	ed 5f       	subi	r30, 0xFD	; 253
    32de:	fe 4f       	sbci	r31, 0xFE	; 254
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	82 81       	ldd	r24, Z+2	; 0x02
    32e6:	93 81       	ldd	r25, Z+3	; 0x03
    32e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	f8 01       	movw	r30, r16
    32f2:	91 83       	std	Z+1, r25	; 0x01
    32f4:	80 83       	st	Z, r24
    32f6:	de 01       	movw	r26, r28
    32f8:	a3 50       	subi	r26, 0x03	; 3
    32fa:	bf 4f       	sbci	r27, 0xFF	; 255
    32fc:	fe 01       	movw	r30, r28
    32fe:	ef 5f       	subi	r30, 0xFF	; 255
    3300:	fe 4f       	sbci	r31, 0xFE	; 254
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	8d 93       	st	X+, r24
    3308:	9c 93       	st	X, r25
    330a:	fe 01       	movw	r30, r28
    330c:	e3 50       	subi	r30, 0x03	; 3
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 81       	ld	r24, Z
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <Main_Screen+0x74e>
    3318:	fe 01       	movw	r30, r28
    331a:	e3 50       	subi	r30, 0x03	; 3
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	91 83       	std	Z+1, r25	; 0x01
    3320:	80 83       	st	Z, r24
	    	  				_delay_ms(50);
	    	  				u16 cur_poz=current_position+name_counter;
    3322:	fe 01       	movw	r30, r28
    3324:	e3 5b       	subi	r30, 0xB3	; 179
    3326:	fe 4f       	sbci	r31, 0xFE	; 254
    3328:	80 81       	ld	r24, Z
    332a:	28 2f       	mov	r18, r24
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	de 01       	movw	r26, r28
    3330:	a8 5b       	subi	r26, 0xB8	; 184
    3332:	be 4f       	sbci	r27, 0xFE	; 254
    3334:	fe 01       	movw	r30, r28
    3336:	e5 5b       	subi	r30, 0xB5	; 181
    3338:	fe 4f       	sbci	r31, 0xFE	; 254
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	82 0f       	add	r24, r18
    3340:	93 1f       	adc	r25, r19
    3342:	8d 93       	st	X+, r24
    3344:	9c 93       	st	X, r25
	    	  				EEPROM_WriteByte(cur_poz,DATA);
    3346:	fe 01       	movw	r30, r28
    3348:	e8 5b       	subi	r30, 0xB8	; 184
    334a:	fe 4f       	sbci	r31, 0xFE	; 254
    334c:	80 81       	ld	r24, Z
    334e:	91 81       	ldd	r25, Z+1	; 0x01
    3350:	fe 01       	movw	r30, r28
    3352:	e0 5b       	subi	r30, 0xB0	; 176
    3354:	fe 4f       	sbci	r31, 0xFE	; 254
    3356:	60 81       	ld	r22, Z
    3358:	0e 94 be 08 	call	0x117c	; 0x117c <EEPROM_WriteByte>
    335c:	fe 01       	movw	r30, r28
    335e:	e7 50       	subi	r30, 0x07	; 7
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	a8 ec       	ldi	r26, 0xC8	; 200
    3368:	b2 e4       	ldi	r27, 0x42	; 66
    336a:	80 83       	st	Z, r24
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	a2 83       	std	Z+2, r26	; 0x02
    3370:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3372:	8e 01       	movw	r16, r28
    3374:	0b 50       	subi	r16, 0x0B	; 11
    3376:	1f 4f       	sbci	r17, 0xFF	; 255
    3378:	fe 01       	movw	r30, r28
    337a:	e7 50       	subi	r30, 0x07	; 7
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	60 81       	ld	r22, Z
    3380:	71 81       	ldd	r23, Z+1	; 0x01
    3382:	82 81       	ldd	r24, Z+2	; 0x02
    3384:	93 81       	ldd	r25, Z+3	; 0x03
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	4a ef       	ldi	r20, 0xFA	; 250
    338c:	54 e4       	ldi	r21, 0x44	; 68
    338e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	f8 01       	movw	r30, r16
    3398:	80 83       	st	Z, r24
    339a:	91 83       	std	Z+1, r25	; 0x01
    339c:	a2 83       	std	Z+2, r26	; 0x02
    339e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a0:	fe 01       	movw	r30, r28
    33a2:	eb 50       	subi	r30, 0x0B	; 11
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	60 81       	ld	r22, Z
    33a8:	71 81       	ldd	r23, Z+1	; 0x01
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e8       	ldi	r20, 0x80	; 128
    33b4:	5f e3       	ldi	r21, 0x3F	; 63
    33b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    33ba:	88 23       	and	r24, r24
    33bc:	44 f4       	brge	.+16     	; 0x33ce <Main_Screen+0x808>
		__ticks = 1;
    33be:	fe 01       	movw	r30, r28
    33c0:	ed 50       	subi	r30, 0x0D	; 13
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	91 83       	std	Z+1, r25	; 0x01
    33ca:	80 83       	st	Z, r24
    33cc:	64 c0       	rjmp	.+200    	; 0x3496 <Main_Screen+0x8d0>
	else if (__tmp > 65535)
    33ce:	fe 01       	movw	r30, r28
    33d0:	eb 50       	subi	r30, 0x0B	; 11
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	3f ef       	ldi	r19, 0xFF	; 255
    33e0:	4f e7       	ldi	r20, 0x7F	; 127
    33e2:	57 e4       	ldi	r21, 0x47	; 71
    33e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    33e8:	18 16       	cp	r1, r24
    33ea:	0c f0       	brlt	.+2      	; 0x33ee <Main_Screen+0x828>
    33ec:	43 c0       	rjmp	.+134    	; 0x3474 <Main_Screen+0x8ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ee:	fe 01       	movw	r30, r28
    33f0:	e7 50       	subi	r30, 0x07	; 7
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	60 81       	ld	r22, Z
    33f6:	71 81       	ldd	r23, Z+1	; 0x01
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	93 81       	ldd	r25, Z+3	; 0x03
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e2       	ldi	r20, 0x20	; 32
    3402:	51 e4       	ldi	r21, 0x41	; 65
    3404:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	8e 01       	movw	r16, r28
    340e:	0d 50       	subi	r16, 0x0D	; 13
    3410:	1f 4f       	sbci	r17, 0xFF	; 255
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	f8 01       	movw	r30, r16
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	80 83       	st	Z, r24
    3424:	1f c0       	rjmp	.+62     	; 0x3464 <Main_Screen+0x89e>
    3426:	fe 01       	movw	r30, r28
    3428:	ef 50       	subi	r30, 0x0F	; 15
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	88 ec       	ldi	r24, 0xC8	; 200
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	91 83       	std	Z+1, r25	; 0x01
    3432:	80 83       	st	Z, r24
    3434:	fe 01       	movw	r30, r28
    3436:	ef 50       	subi	r30, 0x0F	; 15
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	80 81       	ld	r24, Z
    343c:	91 81       	ldd	r25, Z+1	; 0x01
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	f1 f7       	brne	.-4      	; 0x343e <Main_Screen+0x878>
    3442:	fe 01       	movw	r30, r28
    3444:	ef 50       	subi	r30, 0x0F	; 15
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	91 83       	std	Z+1, r25	; 0x01
    344a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	de 01       	movw	r26, r28
    344e:	ad 50       	subi	r26, 0x0D	; 13
    3450:	bf 4f       	sbci	r27, 0xFF	; 255
    3452:	fe 01       	movw	r30, r28
    3454:	ed 50       	subi	r30, 0x0D	; 13
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	80 81       	ld	r24, Z
    345a:	91 81       	ldd	r25, Z+1	; 0x01
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	11 96       	adiw	r26, 0x01	; 1
    3460:	9c 93       	st	X, r25
    3462:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3464:	fe 01       	movw	r30, r28
    3466:	ed 50       	subi	r30, 0x0D	; 13
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	80 81       	ld	r24, Z
    346c:	91 81       	ldd	r25, Z+1	; 0x01
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	d1 f6       	brne	.-76     	; 0x3426 <Main_Screen+0x860>
    3472:	27 c0       	rjmp	.+78     	; 0x34c2 <Main_Screen+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3474:	8e 01       	movw	r16, r28
    3476:	0d 50       	subi	r16, 0x0D	; 13
    3478:	1f 4f       	sbci	r17, 0xFF	; 255
    347a:	fe 01       	movw	r30, r28
    347c:	eb 50       	subi	r30, 0x0B	; 11
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	60 81       	ld	r22, Z
    3482:	71 81       	ldd	r23, Z+1	; 0x01
    3484:	82 81       	ldd	r24, Z+2	; 0x02
    3486:	93 81       	ldd	r25, Z+3	; 0x03
    3488:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	f8 01       	movw	r30, r16
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	80 83       	st	Z, r24
    3496:	de 01       	movw	r26, r28
    3498:	a1 51       	subi	r26, 0x11	; 17
    349a:	bf 4f       	sbci	r27, 0xFF	; 255
    349c:	fe 01       	movw	r30, r28
    349e:	ed 50       	subi	r30, 0x0D	; 13
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	80 81       	ld	r24, Z
    34a4:	91 81       	ldd	r25, Z+1	; 0x01
    34a6:	8d 93       	st	X+, r24
    34a8:	9c 93       	st	X, r25
    34aa:	fe 01       	movw	r30, r28
    34ac:	e1 51       	subi	r30, 0x11	; 17
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	80 81       	ld	r24, Z
    34b2:	91 81       	ldd	r25, Z+1	; 0x01
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <Main_Screen+0x8ee>
    34b8:	fe 01       	movw	r30, r28
    34ba:	e1 51       	subi	r30, 0x11	; 17
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	91 83       	std	Z+1, r25	; 0x01
    34c0:	80 83       	st	Z, r24
	    	  				_delay_ms(100);
	    	  				name_counter++;
    34c2:	de 01       	movw	r26, r28
    34c4:	a5 5b       	subi	r26, 0xB5	; 181
    34c6:	be 4f       	sbci	r27, 0xFE	; 254
    34c8:	fe 01       	movw	r30, r28
    34ca:	e5 5b       	subi	r30, 0xB5	; 181
    34cc:	fe 4f       	sbci	r31, 0xFE	; 254
    34ce:	80 81       	ld	r24, Z
    34d0:	91 81       	ldd	r25, Z+1	; 0x01
    34d2:	01 96       	adiw	r24, 0x01	; 1
    34d4:	11 96       	adiw	r26, 0x01	; 1
    34d6:	9c 93       	st	X, r25
    34d8:	8e 93       	st	-X, r24
	    	  LCD_vidWriteString("Set user name :",15);
	    	  LCD_vidSetPosition(1,0);
	    	  		//LCD_clearscreen();
	    	  		u16 name_counter=0;
	    	  		u16 name[NAME_SIZE]={0xff};
	    	  		while (name_counter<NAME_SIZE)
    34da:	fe 01       	movw	r30, r28
    34dc:	e5 5b       	subi	r30, 0xB5	; 181
    34de:	fe 4f       	sbci	r31, 0xFE	; 254
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	8c 30       	cpi	r24, 0x0C	; 12
    34e6:	91 05       	cpc	r25, r1
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <Main_Screen+0x926>
    34ea:	33 ce       	rjmp	.-922    	; 0x3152 <Main_Screen+0x58c>
	    	  				EEPROM_WriteByte(cur_poz,DATA);
	    	  				_delay_ms(100);
	    	  				name_counter++;

	    	  	    	}
	    	  			LCD_clearscreen();
    34ec:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	  			LCD_vidWriteString("name is saved",13);
    34f0:	8d ec       	ldi	r24, 0xCD	; 205
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	6d e0       	ldi	r22, 0x0D	; 13
    34f6:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
    34fa:	fe 01       	movw	r30, r28
    34fc:	e5 51       	subi	r30, 0x15	; 21
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	a8 ec       	ldi	r26, 0xC8	; 200
    3506:	b2 e4       	ldi	r27, 0x42	; 66
    3508:	80 83       	st	Z, r24
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	a2 83       	std	Z+2, r26	; 0x02
    350e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3510:	8e 01       	movw	r16, r28
    3512:	09 51       	subi	r16, 0x19	; 25
    3514:	1f 4f       	sbci	r17, 0xFF	; 255
    3516:	fe 01       	movw	r30, r28
    3518:	e5 51       	subi	r30, 0x15	; 21
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	60 81       	ld	r22, Z
    351e:	71 81       	ldd	r23, Z+1	; 0x01
    3520:	82 81       	ldd	r24, Z+2	; 0x02
    3522:	93 81       	ldd	r25, Z+3	; 0x03
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	4a ef       	ldi	r20, 0xFA	; 250
    352a:	54 e4       	ldi	r21, 0x44	; 68
    352c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	f8 01       	movw	r30, r16
    3536:	80 83       	st	Z, r24
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	a2 83       	std	Z+2, r26	; 0x02
    353c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    353e:	fe 01       	movw	r30, r28
    3540:	e9 51       	subi	r30, 0x19	; 25
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	60 81       	ld	r22, Z
    3546:	71 81       	ldd	r23, Z+1	; 0x01
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3558:	88 23       	and	r24, r24
    355a:	44 f4       	brge	.+16     	; 0x356c <Main_Screen+0x9a6>
		__ticks = 1;
    355c:	fe 01       	movw	r30, r28
    355e:	eb 51       	subi	r30, 0x1B	; 27
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
    356a:	64 c0       	rjmp	.+200    	; 0x3634 <Main_Screen+0xa6e>
	else if (__tmp > 65535)
    356c:	fe 01       	movw	r30, r28
    356e:	e9 51       	subi	r30, 0x19	; 25
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	82 81       	ldd	r24, Z+2	; 0x02
    3578:	93 81       	ldd	r25, Z+3	; 0x03
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	3f ef       	ldi	r19, 0xFF	; 255
    357e:	4f e7       	ldi	r20, 0x7F	; 127
    3580:	57 e4       	ldi	r21, 0x47	; 71
    3582:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3586:	18 16       	cp	r1, r24
    3588:	0c f0       	brlt	.+2      	; 0x358c <Main_Screen+0x9c6>
    358a:	43 c0       	rjmp	.+134    	; 0x3612 <Main_Screen+0xa4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    358c:	fe 01       	movw	r30, r28
    358e:	e5 51       	subi	r30, 0x15	; 21
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	60 81       	ld	r22, Z
    3594:	71 81       	ldd	r23, Z+1	; 0x01
    3596:	82 81       	ldd	r24, Z+2	; 0x02
    3598:	93 81       	ldd	r25, Z+3	; 0x03
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e2       	ldi	r20, 0x20	; 32
    35a0:	51 e4       	ldi	r21, 0x41	; 65
    35a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	8e 01       	movw	r16, r28
    35ac:	0b 51       	subi	r16, 0x1B	; 27
    35ae:	1f 4f       	sbci	r17, 0xFF	; 255
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	f8 01       	movw	r30, r16
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	80 83       	st	Z, r24
    35c2:	1f c0       	rjmp	.+62     	; 0x3602 <Main_Screen+0xa3c>
    35c4:	fe 01       	movw	r30, r28
    35c6:	ed 51       	subi	r30, 0x1D	; 29
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	88 ec       	ldi	r24, 0xC8	; 200
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	80 83       	st	Z, r24
    35d2:	fe 01       	movw	r30, r28
    35d4:	ed 51       	subi	r30, 0x1D	; 29
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	80 81       	ld	r24, Z
    35da:	91 81       	ldd	r25, Z+1	; 0x01
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	f1 f7       	brne	.-4      	; 0x35dc <Main_Screen+0xa16>
    35e0:	fe 01       	movw	r30, r28
    35e2:	ed 51       	subi	r30, 0x1D	; 29
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ea:	de 01       	movw	r26, r28
    35ec:	ab 51       	subi	r26, 0x1B	; 27
    35ee:	bf 4f       	sbci	r27, 0xFF	; 255
    35f0:	fe 01       	movw	r30, r28
    35f2:	eb 51       	subi	r30, 0x1B	; 27
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 81       	ld	r24, Z
    35f8:	91 81       	ldd	r25, Z+1	; 0x01
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	11 96       	adiw	r26, 0x01	; 1
    35fe:	9c 93       	st	X, r25
    3600:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3602:	fe 01       	movw	r30, r28
    3604:	eb 51       	subi	r30, 0x1B	; 27
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	80 81       	ld	r24, Z
    360a:	91 81       	ldd	r25, Z+1	; 0x01
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	d1 f6       	brne	.-76     	; 0x35c4 <Main_Screen+0x9fe>
    3610:	27 c0       	rjmp	.+78     	; 0x3660 <Main_Screen+0xa9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3612:	8e 01       	movw	r16, r28
    3614:	0b 51       	subi	r16, 0x1B	; 27
    3616:	1f 4f       	sbci	r17, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	e9 51       	subi	r30, 0x19	; 25
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	f8 01       	movw	r30, r16
    3630:	91 83       	std	Z+1, r25	; 0x01
    3632:	80 83       	st	Z, r24
    3634:	de 01       	movw	r26, r28
    3636:	af 51       	subi	r26, 0x1F	; 31
    3638:	bf 4f       	sbci	r27, 0xFF	; 255
    363a:	fe 01       	movw	r30, r28
    363c:	eb 51       	subi	r30, 0x1B	; 27
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 81       	ld	r24, Z
    3642:	91 81       	ldd	r25, Z+1	; 0x01
    3644:	8d 93       	st	X+, r24
    3646:	9c 93       	st	X, r25
    3648:	fe 01       	movw	r30, r28
    364a:	ef 51       	subi	r30, 0x1F	; 31
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	80 81       	ld	r24, Z
    3650:	91 81       	ldd	r25, Z+1	; 0x01
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <Main_Screen+0xa8c>
    3656:	fe 01       	movw	r30, r28
    3658:	ef 51       	subi	r30, 0x1F	; 31
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	80 83       	st	Z, r24

	    	  	       	_delay_ms(100);
	    	  	       	LCD_clearscreen();
    3660:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>

	                 current_position=(i*ROW+NAME_SIZE);
    3664:	fe 01       	movw	r30, r28
    3666:	e2 5b       	subi	r30, 0xB2	; 178
    3668:	fe 4f       	sbci	r31, 0xFE	; 254
    366a:	80 81       	ld	r24, Z
    366c:	91 81       	ldd	r25, Z+1	; 0x01
    366e:	82 95       	swap	r24
    3670:	92 95       	swap	r25
    3672:	90 7f       	andi	r25, 0xF0	; 240
    3674:	98 27       	eor	r25, r24
    3676:	80 7f       	andi	r24, 0xF0	; 240
    3678:	98 27       	eor	r25, r24
    367a:	fe 01       	movw	r30, r28
    367c:	e3 5b       	subi	r30, 0xB3	; 179
    367e:	fe 4f       	sbci	r31, 0xFE	; 254
    3680:	84 5f       	subi	r24, 0xF4	; 244
    3682:	80 83       	st	Z, r24
	                 LCD_vidWriteString("Set user pass :",15);
    3684:	8b ed       	ldi	r24, 0xDB	; 219
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	6f e0       	ldi	r22, 0x0F	; 15
    368a:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	                 LCD_vidSetPosition(1,0);
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
	    	  			u8 pass_counter=0;
    3696:	fe 01       	movw	r30, r28
    3698:	e6 5b       	subi	r30, 0xB6	; 182
    369a:	fe 4f       	sbci	r31, 0xFE	; 254
    369c:	10 82       	st	Z, r1
	    	  			u8 pass[PASS_SIZE]={0xff};
    369e:	fe 01       	movw	r30, r28
    36a0:	e6 58       	subi	r30, 0x86	; 134
    36a2:	fe 4f       	sbci	r31, 0xFE	; 254
    36a4:	10 82       	st	Z, r1
    36a6:	11 82       	std	Z+1, r1	; 0x01
    36a8:	12 82       	std	Z+2, r1	; 0x02
    36aa:	13 82       	std	Z+3, r1	; 0x03
    36ac:	fe 01       	movw	r30, r28
    36ae:	e6 58       	subi	r30, 0x86	; 134
    36b0:	fe 4f       	sbci	r31, 0xFE	; 254
    36b2:	8f ef       	ldi	r24, 0xFF	; 255
    36b4:	80 83       	st	Z, r24
    36b6:	73 c2       	rjmp	.+1254   	; 0x3b9e <Main_Screen+0xfd8>
	    	  			while (pass_counter<PASS_SIZE)
	    	  			{
	    	  				DATA = NO_DATA ;
    36b8:	fe 01       	movw	r30, r28
    36ba:	e0 5b       	subi	r30, 0xB0	; 176
    36bc:	fe 4f       	sbci	r31, 0xFE	; 254
    36be:	83 e2       	ldi	r24, 0x23	; 35
    36c0:	80 83       	st	Z, r24
    36c2:	06 c0       	rjmp	.+12     	; 0x36d0 <Main_Screen+0xb0a>
	    	  				while (DATA == NO_DATA)
	    	  					{
	    	  						DATA = UART_GetChar();
    36c4:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_GetChar>
    36c8:	fe 01       	movw	r30, r28
    36ca:	e0 5b       	subi	r30, 0xB0	; 176
    36cc:	fe 4f       	sbci	r31, 0xFE	; 254
    36ce:	80 83       	st	Z, r24
	    	  			u8 pass_counter=0;
	    	  			u8 pass[PASS_SIZE]={0xff};
	    	  			while (pass_counter<PASS_SIZE)
	    	  			{
	    	  				DATA = NO_DATA ;
	    	  				while (DATA == NO_DATA)
    36d0:	fe 01       	movw	r30, r28
    36d2:	e0 5b       	subi	r30, 0xB0	; 176
    36d4:	fe 4f       	sbci	r31, 0xFE	; 254
    36d6:	80 81       	ld	r24, Z
    36d8:	83 32       	cpi	r24, 0x23	; 35
    36da:	a1 f3       	breq	.-24     	; 0x36c4 <Main_Screen+0xafe>
	    	  					{
	    	  						DATA = UART_GetChar();
	    	  					}

	    	  				pass[pass_counter]=DATA;
    36dc:	fe 01       	movw	r30, r28
    36de:	e6 5b       	subi	r30, 0xB6	; 182
    36e0:	fe 4f       	sbci	r31, 0xFE	; 254
    36e2:	80 81       	ld	r24, Z
    36e4:	28 2f       	mov	r18, r24
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	ce 01       	movw	r24, r28
    36ea:	86 58       	subi	r24, 0x86	; 134
    36ec:	9e 4f       	sbci	r25, 0xFE	; 254
    36ee:	dc 01       	movw	r26, r24
    36f0:	a2 0f       	add	r26, r18
    36f2:	b3 1f       	adc	r27, r19
    36f4:	fe 01       	movw	r30, r28
    36f6:	e0 5b       	subi	r30, 0xB0	; 176
    36f8:	fe 4f       	sbci	r31, 0xFE	; 254
    36fa:	80 81       	ld	r24, Z
    36fc:	8c 93       	st	X, r24

	    	  				LCD_vidWriteCharctr(DATA);
    36fe:	fe 01       	movw	r30, r28
    3700:	e0 5b       	subi	r30, 0xB0	; 176
    3702:	fe 4f       	sbci	r31, 0xFE	; 254
    3704:	80 81       	ld	r24, Z
    3706:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    370a:	fe 01       	movw	r30, r28
    370c:	e3 52       	subi	r30, 0x23	; 35
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	a6 e9       	ldi	r26, 0x96	; 150
    3716:	b3 e4       	ldi	r27, 0x43	; 67
    3718:	80 83       	st	Z, r24
    371a:	91 83       	std	Z+1, r25	; 0x01
    371c:	a2 83       	std	Z+2, r26	; 0x02
    371e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3720:	8e 01       	movw	r16, r28
    3722:	07 52       	subi	r16, 0x27	; 39
    3724:	1f 4f       	sbci	r17, 0xFF	; 255
    3726:	fe 01       	movw	r30, r28
    3728:	e3 52       	subi	r30, 0x23	; 35
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	82 81       	ldd	r24, Z+2	; 0x02
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a ef       	ldi	r20, 0xFA	; 250
    373a:	54 e4       	ldi	r21, 0x44	; 68
    373c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	f8 01       	movw	r30, r16
    3746:	80 83       	st	Z, r24
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	a2 83       	std	Z+2, r26	; 0x02
    374c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    374e:	fe 01       	movw	r30, r28
    3750:	e7 52       	subi	r30, 0x27	; 39
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	60 81       	ld	r22, Z
    3756:	71 81       	ldd	r23, Z+1	; 0x01
    3758:	82 81       	ldd	r24, Z+2	; 0x02
    375a:	93 81       	ldd	r25, Z+3	; 0x03
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e8       	ldi	r20, 0x80	; 128
    3762:	5f e3       	ldi	r21, 0x3F	; 63
    3764:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3768:	88 23       	and	r24, r24
    376a:	44 f4       	brge	.+16     	; 0x377c <Main_Screen+0xbb6>
		__ticks = 1;
    376c:	fe 01       	movw	r30, r28
    376e:	e9 52       	subi	r30, 0x29	; 41
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
    377a:	64 c0       	rjmp	.+200    	; 0x3844 <Main_Screen+0xc7e>
	else if (__tmp > 65535)
    377c:	fe 01       	movw	r30, r28
    377e:	e7 52       	subi	r30, 0x27	; 39
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	60 81       	ld	r22, Z
    3784:	71 81       	ldd	r23, Z+1	; 0x01
    3786:	82 81       	ldd	r24, Z+2	; 0x02
    3788:	93 81       	ldd	r25, Z+3	; 0x03
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	3f ef       	ldi	r19, 0xFF	; 255
    378e:	4f e7       	ldi	r20, 0x7F	; 127
    3790:	57 e4       	ldi	r21, 0x47	; 71
    3792:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3796:	18 16       	cp	r1, r24
    3798:	0c f0       	brlt	.+2      	; 0x379c <Main_Screen+0xbd6>
    379a:	43 c0       	rjmp	.+134    	; 0x3822 <Main_Screen+0xc5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379c:	fe 01       	movw	r30, r28
    379e:	e3 52       	subi	r30, 0x23	; 35
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	60 81       	ld	r22, Z
    37a4:	71 81       	ldd	r23, Z+1	; 0x01
    37a6:	82 81       	ldd	r24, Z+2	; 0x02
    37a8:	93 81       	ldd	r25, Z+3	; 0x03
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	40 e2       	ldi	r20, 0x20	; 32
    37b0:	51 e4       	ldi	r21, 0x41	; 65
    37b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	8e 01       	movw	r16, r28
    37bc:	09 52       	subi	r16, 0x29	; 41
    37be:	1f 4f       	sbci	r17, 0xFF	; 255
    37c0:	bc 01       	movw	r22, r24
    37c2:	cd 01       	movw	r24, r26
    37c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	f8 01       	movw	r30, r16
    37ce:	91 83       	std	Z+1, r25	; 0x01
    37d0:	80 83       	st	Z, r24
    37d2:	1f c0       	rjmp	.+62     	; 0x3812 <Main_Screen+0xc4c>
    37d4:	fe 01       	movw	r30, r28
    37d6:	eb 52       	subi	r30, 0x2B	; 43
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	88 ec       	ldi	r24, 0xC8	; 200
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	91 83       	std	Z+1, r25	; 0x01
    37e0:	80 83       	st	Z, r24
    37e2:	fe 01       	movw	r30, r28
    37e4:	eb 52       	subi	r30, 0x2B	; 43
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <Main_Screen+0xc26>
    37f0:	fe 01       	movw	r30, r28
    37f2:	eb 52       	subi	r30, 0x2B	; 43
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fa:	de 01       	movw	r26, r28
    37fc:	a9 52       	subi	r26, 0x29	; 41
    37fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3800:	fe 01       	movw	r30, r28
    3802:	e9 52       	subi	r30, 0x29	; 41
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	91 81       	ldd	r25, Z+1	; 0x01
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	11 96       	adiw	r26, 0x01	; 1
    380e:	9c 93       	st	X, r25
    3810:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3812:	fe 01       	movw	r30, r28
    3814:	e9 52       	subi	r30, 0x29	; 41
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	80 81       	ld	r24, Z
    381a:	91 81       	ldd	r25, Z+1	; 0x01
    381c:	00 97       	sbiw	r24, 0x00	; 0
    381e:	d1 f6       	brne	.-76     	; 0x37d4 <Main_Screen+0xc0e>
    3820:	27 c0       	rjmp	.+78     	; 0x3870 <Main_Screen+0xcaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3822:	8e 01       	movw	r16, r28
    3824:	09 52       	subi	r16, 0x29	; 41
    3826:	1f 4f       	sbci	r17, 0xFF	; 255
    3828:	fe 01       	movw	r30, r28
    382a:	e7 52       	subi	r30, 0x27	; 39
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	60 81       	ld	r22, Z
    3830:	71 81       	ldd	r23, Z+1	; 0x01
    3832:	82 81       	ldd	r24, Z+2	; 0x02
    3834:	93 81       	ldd	r25, Z+3	; 0x03
    3836:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	f8 01       	movw	r30, r16
    3840:	91 83       	std	Z+1, r25	; 0x01
    3842:	80 83       	st	Z, r24
    3844:	de 01       	movw	r26, r28
    3846:	ad 52       	subi	r26, 0x2D	; 45
    3848:	bf 4f       	sbci	r27, 0xFF	; 255
    384a:	fe 01       	movw	r30, r28
    384c:	e9 52       	subi	r30, 0x29	; 41
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 81       	ld	r24, Z
    3852:	91 81       	ldd	r25, Z+1	; 0x01
    3854:	8d 93       	st	X+, r24
    3856:	9c 93       	st	X, r25
    3858:	fe 01       	movw	r30, r28
    385a:	ed 52       	subi	r30, 0x2D	; 45
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <Main_Screen+0xc9c>
    3866:	fe 01       	movw	r30, r28
    3868:	ed 52       	subi	r30, 0x2D	; 45
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	91 83       	std	Z+1, r25	; 0x01
    386e:	80 83       	st	Z, r24
	    	  				_delay_ms(CHARACTER_PREVIEW_TIME);
	    	  				LCD_vidSetPosition(1,pass_counter);
    3870:	fe 01       	movw	r30, r28
    3872:	e6 5b       	subi	r30, 0xB6	; 182
    3874:	fe 4f       	sbci	r31, 0xFE	; 254
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	60 81       	ld	r22, Z
    387a:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
	    	  				LCD_vidWriteCharctr(PASSWORD_SYMBOL);
    387e:	8a e2       	ldi	r24, 0x2A	; 42
    3880:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    3884:	fe 01       	movw	r30, r28
    3886:	e1 53       	subi	r30, 0x31	; 49
    3888:	ff 4f       	sbci	r31, 0xFF	; 255
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a8 e4       	ldi	r26, 0x48	; 72
    3890:	b2 e4       	ldi	r27, 0x42	; 66
    3892:	80 83       	st	Z, r24
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	a2 83       	std	Z+2, r26	; 0x02
    3898:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389a:	8e 01       	movw	r16, r28
    389c:	05 53       	subi	r16, 0x35	; 53
    389e:	1f 4f       	sbci	r17, 0xFF	; 255
    38a0:	fe 01       	movw	r30, r28
    38a2:	e1 53       	subi	r30, 0x31	; 49
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	60 81       	ld	r22, Z
    38a8:	71 81       	ldd	r23, Z+1	; 0x01
    38aa:	82 81       	ldd	r24, Z+2	; 0x02
    38ac:	93 81       	ldd	r25, Z+3	; 0x03
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	4a ef       	ldi	r20, 0xFA	; 250
    38b4:	54 e4       	ldi	r21, 0x44	; 68
    38b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	f8 01       	movw	r30, r16
    38c0:	80 83       	st	Z, r24
    38c2:	91 83       	std	Z+1, r25	; 0x01
    38c4:	a2 83       	std	Z+2, r26	; 0x02
    38c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38c8:	fe 01       	movw	r30, r28
    38ca:	e5 53       	subi	r30, 0x35	; 53
    38cc:	ff 4f       	sbci	r31, 0xFF	; 255
    38ce:	60 81       	ld	r22, Z
    38d0:	71 81       	ldd	r23, Z+1	; 0x01
    38d2:	82 81       	ldd	r24, Z+2	; 0x02
    38d4:	93 81       	ldd	r25, Z+3	; 0x03
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	40 e8       	ldi	r20, 0x80	; 128
    38dc:	5f e3       	ldi	r21, 0x3F	; 63
    38de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    38e2:	88 23       	and	r24, r24
    38e4:	44 f4       	brge	.+16     	; 0x38f6 <Main_Screen+0xd30>
		__ticks = 1;
    38e6:	fe 01       	movw	r30, r28
    38e8:	e7 53       	subi	r30, 0x37	; 55
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	80 83       	st	Z, r24
    38f4:	64 c0       	rjmp	.+200    	; 0x39be <Main_Screen+0xdf8>
	else if (__tmp > 65535)
    38f6:	fe 01       	movw	r30, r28
    38f8:	e5 53       	subi	r30, 0x35	; 53
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	60 81       	ld	r22, Z
    38fe:	71 81       	ldd	r23, Z+1	; 0x01
    3900:	82 81       	ldd	r24, Z+2	; 0x02
    3902:	93 81       	ldd	r25, Z+3	; 0x03
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	3f ef       	ldi	r19, 0xFF	; 255
    3908:	4f e7       	ldi	r20, 0x7F	; 127
    390a:	57 e4       	ldi	r21, 0x47	; 71
    390c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3910:	18 16       	cp	r1, r24
    3912:	0c f0       	brlt	.+2      	; 0x3916 <Main_Screen+0xd50>
    3914:	43 c0       	rjmp	.+134    	; 0x399c <Main_Screen+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3916:	fe 01       	movw	r30, r28
    3918:	e1 53       	subi	r30, 0x31	; 49
    391a:	ff 4f       	sbci	r31, 0xFF	; 255
    391c:	60 81       	ld	r22, Z
    391e:	71 81       	ldd	r23, Z+1	; 0x01
    3920:	82 81       	ldd	r24, Z+2	; 0x02
    3922:	93 81       	ldd	r25, Z+3	; 0x03
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e2       	ldi	r20, 0x20	; 32
    392a:	51 e4       	ldi	r21, 0x41	; 65
    392c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	8e 01       	movw	r16, r28
    3936:	07 53       	subi	r16, 0x37	; 55
    3938:	1f 4f       	sbci	r17, 0xFF	; 255
    393a:	bc 01       	movw	r22, r24
    393c:	cd 01       	movw	r24, r26
    393e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	f8 01       	movw	r30, r16
    3948:	91 83       	std	Z+1, r25	; 0x01
    394a:	80 83       	st	Z, r24
    394c:	1f c0       	rjmp	.+62     	; 0x398c <Main_Screen+0xdc6>
    394e:	fe 01       	movw	r30, r28
    3950:	e9 53       	subi	r30, 0x39	; 57
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	88 ec       	ldi	r24, 0xC8	; 200
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	91 83       	std	Z+1, r25	; 0x01
    395a:	80 83       	st	Z, r24
    395c:	fe 01       	movw	r30, r28
    395e:	e9 53       	subi	r30, 0x39	; 57
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	80 81       	ld	r24, Z
    3964:	91 81       	ldd	r25, Z+1	; 0x01
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <Main_Screen+0xda0>
    396a:	fe 01       	movw	r30, r28
    396c:	e9 53       	subi	r30, 0x39	; 57
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	91 83       	std	Z+1, r25	; 0x01
    3972:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3974:	de 01       	movw	r26, r28
    3976:	a7 53       	subi	r26, 0x37	; 55
    3978:	bf 4f       	sbci	r27, 0xFF	; 255
    397a:	fe 01       	movw	r30, r28
    397c:	e7 53       	subi	r30, 0x37	; 55
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	80 81       	ld	r24, Z
    3982:	91 81       	ldd	r25, Z+1	; 0x01
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	11 96       	adiw	r26, 0x01	; 1
    3988:	9c 93       	st	X, r25
    398a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    398c:	fe 01       	movw	r30, r28
    398e:	e7 53       	subi	r30, 0x37	; 55
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	80 81       	ld	r24, Z
    3994:	91 81       	ldd	r25, Z+1	; 0x01
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	d1 f6       	brne	.-76     	; 0x394e <Main_Screen+0xd88>
    399a:	27 c0       	rjmp	.+78     	; 0x39ea <Main_Screen+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    399c:	8e 01       	movw	r16, r28
    399e:	07 53       	subi	r16, 0x37	; 55
    39a0:	1f 4f       	sbci	r17, 0xFF	; 255
    39a2:	fe 01       	movw	r30, r28
    39a4:	e5 53       	subi	r30, 0x35	; 53
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	60 81       	ld	r22, Z
    39aa:	71 81       	ldd	r23, Z+1	; 0x01
    39ac:	82 81       	ldd	r24, Z+2	; 0x02
    39ae:	93 81       	ldd	r25, Z+3	; 0x03
    39b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	f8 01       	movw	r30, r16
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	80 83       	st	Z, r24
    39be:	de 01       	movw	r26, r28
    39c0:	ab 53       	subi	r26, 0x3B	; 59
    39c2:	bf 4f       	sbci	r27, 0xFF	; 255
    39c4:	fe 01       	movw	r30, r28
    39c6:	e7 53       	subi	r30, 0x37	; 55
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 81       	ld	r24, Z
    39cc:	91 81       	ldd	r25, Z+1	; 0x01
    39ce:	8d 93       	st	X+, r24
    39d0:	9c 93       	st	X, r25
    39d2:	fe 01       	movw	r30, r28
    39d4:	eb 53       	subi	r30, 0x3B	; 59
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <Main_Screen+0xe16>
    39e0:	fe 01       	movw	r30, r28
    39e2:	eb 53       	subi	r30, 0x3B	; 59
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	80 83       	st	Z, r24
	    	  				_delay_ms(50);
	    	  				u16 cur_poz=current_position+pass_counter;
    39ea:	fe 01       	movw	r30, r28
    39ec:	e3 5b       	subi	r30, 0xB3	; 179
    39ee:	fe 4f       	sbci	r31, 0xFE	; 254
    39f0:	80 81       	ld	r24, Z
    39f2:	28 2f       	mov	r18, r24
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	fe 01       	movw	r30, r28
    39f8:	e6 5b       	subi	r30, 0xB6	; 182
    39fa:	fe 4f       	sbci	r31, 0xFE	; 254
    39fc:	80 81       	ld	r24, Z
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	82 0f       	add	r24, r18
    3a04:	93 1f       	adc	r25, r19
    3a06:	fe 01       	movw	r30, r28
    3a08:	ea 5b       	subi	r30, 0xBA	; 186
    3a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0c:	91 83       	std	Z+1, r25	; 0x01
    3a0e:	80 83       	st	Z, r24
	    	  				EEPROM_WriteByte(cur_poz,DATA);
    3a10:	fe 01       	movw	r30, r28
    3a12:	ea 5b       	subi	r30, 0xBA	; 186
    3a14:	fe 4f       	sbci	r31, 0xFE	; 254
    3a16:	80 81       	ld	r24, Z
    3a18:	91 81       	ldd	r25, Z+1	; 0x01
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e0 5b       	subi	r30, 0xB0	; 176
    3a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a20:	60 81       	ld	r22, Z
    3a22:	0e 94 be 08 	call	0x117c	; 0x117c <EEPROM_WriteByte>
    3a26:	fe 01       	movw	r30, r28
    3a28:	ef 53       	subi	r30, 0x3F	; 63
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	a8 ec       	ldi	r26, 0xC8	; 200
    3a32:	b2 e4       	ldi	r27, 0x42	; 66
    3a34:	80 83       	st	Z, r24
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	a2 83       	std	Z+2, r26	; 0x02
    3a3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3c:	8e 01       	movw	r16, r28
    3a3e:	03 54       	subi	r16, 0x43	; 67
    3a40:	1f 4f       	sbci	r17, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	ef 53       	subi	r30, 0x3F	; 63
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	4a ef       	ldi	r20, 0xFA	; 250
    3a56:	54 e4       	ldi	r21, 0x44	; 68
    3a58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	f8 01       	movw	r30, r16
    3a62:	80 83       	st	Z, r24
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	a2 83       	std	Z+2, r26	; 0x02
    3a68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e3 54       	subi	r30, 0x43	; 67
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	93 81       	ldd	r25, Z+3	; 0x03
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	44 f4       	brge	.+16     	; 0x3a98 <Main_Screen+0xed2>
		__ticks = 1;
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e5 54       	subi	r30, 0x45	; 69
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	91 83       	std	Z+1, r25	; 0x01
    3a94:	80 83       	st	Z, r24
    3a96:	64 c0       	rjmp	.+200    	; 0x3b60 <Main_Screen+0xf9a>
	else if (__tmp > 65535)
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e3 54       	subi	r30, 0x43	; 67
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	3f ef       	ldi	r19, 0xFF	; 255
    3aaa:	4f e7       	ldi	r20, 0x7F	; 127
    3aac:	57 e4       	ldi	r21, 0x47	; 71
    3aae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3ab2:	18 16       	cp	r1, r24
    3ab4:	0c f0       	brlt	.+2      	; 0x3ab8 <Main_Screen+0xef2>
    3ab6:	43 c0       	rjmp	.+134    	; 0x3b3e <Main_Screen+0xf78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab8:	fe 01       	movw	r30, r28
    3aba:	ef 53       	subi	r30, 0x3F	; 63
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	82 81       	ldd	r24, Z+2	; 0x02
    3ac4:	93 81       	ldd	r25, Z+3	; 0x03
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e2       	ldi	r20, 0x20	; 32
    3acc:	51 e4       	ldi	r21, 0x41	; 65
    3ace:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	8e 01       	movw	r16, r28
    3ad8:	05 54       	subi	r16, 0x45	; 69
    3ada:	1f 4f       	sbci	r17, 0xFF	; 255
    3adc:	bc 01       	movw	r22, r24
    3ade:	cd 01       	movw	r24, r26
    3ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	f8 01       	movw	r30, r16
    3aea:	91 83       	std	Z+1, r25	; 0x01
    3aec:	80 83       	st	Z, r24
    3aee:	1f c0       	rjmp	.+62     	; 0x3b2e <Main_Screen+0xf68>
    3af0:	fe 01       	movw	r30, r28
    3af2:	e7 54       	subi	r30, 0x47	; 71
    3af4:	ff 4f       	sbci	r31, 0xFF	; 255
    3af6:	88 ec       	ldi	r24, 0xC8	; 200
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	91 83       	std	Z+1, r25	; 0x01
    3afc:	80 83       	st	Z, r24
    3afe:	fe 01       	movw	r30, r28
    3b00:	e7 54       	subi	r30, 0x47	; 71
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 81       	ld	r24, Z
    3b06:	91 81       	ldd	r25, Z+1	; 0x01
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <Main_Screen+0xf42>
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e7 54       	subi	r30, 0x47	; 71
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b16:	de 01       	movw	r26, r28
    3b18:	a5 54       	subi	r26, 0x45	; 69
    3b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e5 54       	subi	r30, 0x45	; 69
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	80 81       	ld	r24, Z
    3b24:	91 81       	ldd	r25, Z+1	; 0x01
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	11 96       	adiw	r26, 0x01	; 1
    3b2a:	9c 93       	st	X, r25
    3b2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2e:	fe 01       	movw	r30, r28
    3b30:	e5 54       	subi	r30, 0x45	; 69
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	00 97       	sbiw	r24, 0x00	; 0
    3b3a:	d1 f6       	brne	.-76     	; 0x3af0 <Main_Screen+0xf2a>
    3b3c:	27 c0       	rjmp	.+78     	; 0x3b8c <Main_Screen+0xfc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b3e:	8e 01       	movw	r16, r28
    3b40:	05 54       	subi	r16, 0x45	; 69
    3b42:	1f 4f       	sbci	r17, 0xFF	; 255
    3b44:	fe 01       	movw	r30, r28
    3b46:	e3 54       	subi	r30, 0x43	; 67
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	60 81       	ld	r22, Z
    3b4c:	71 81       	ldd	r23, Z+1	; 0x01
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	93 81       	ldd	r25, Z+3	; 0x03
    3b52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	91 83       	std	Z+1, r25	; 0x01
    3b5e:	80 83       	st	Z, r24
    3b60:	de 01       	movw	r26, r28
    3b62:	a9 54       	subi	r26, 0x49	; 73
    3b64:	bf 4f       	sbci	r27, 0xFF	; 255
    3b66:	fe 01       	movw	r30, r28
    3b68:	e5 54       	subi	r30, 0x45	; 69
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	8d 93       	st	X+, r24
    3b72:	9c 93       	st	X, r25
    3b74:	fe 01       	movw	r30, r28
    3b76:	e9 54       	subi	r30, 0x49	; 73
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	80 81       	ld	r24, Z
    3b7c:	91 81       	ldd	r25, Z+1	; 0x01
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <Main_Screen+0xfb8>
    3b82:	fe 01       	movw	r30, r28
    3b84:	e9 54       	subi	r30, 0x49	; 73
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	80 83       	st	Z, r24
	    	  				_delay_ms(100);
	    	  				pass_counter++;
    3b8c:	de 01       	movw	r26, r28
    3b8e:	a6 5b       	subi	r26, 0xB6	; 182
    3b90:	be 4f       	sbci	r27, 0xFE	; 254
    3b92:	fe 01       	movw	r30, r28
    3b94:	e6 5b       	subi	r30, 0xB6	; 182
    3b96:	fe 4f       	sbci	r31, 0xFE	; 254
    3b98:	80 81       	ld	r24, Z
    3b9a:	8f 5f       	subi	r24, 0xFF	; 255
    3b9c:	8c 93       	st	X, r24
	                 current_position=(i*ROW+NAME_SIZE);
	                 LCD_vidWriteString("Set user pass :",15);
	                 LCD_vidSetPosition(1,0);
	    	  			u8 pass_counter=0;
	    	  			u8 pass[PASS_SIZE]={0xff};
	    	  			while (pass_counter<PASS_SIZE)
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	e6 5b       	subi	r30, 0xB6	; 182
    3ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba4:	80 81       	ld	r24, Z
    3ba6:	84 30       	cpi	r24, 0x04	; 4
    3ba8:	08 f4       	brcc	.+2      	; 0x3bac <Main_Screen+0xfe6>
    3baa:	86 cd       	rjmp	.-1268   	; 0x36b8 <Main_Screen+0xaf2>
	    	  				u16 cur_poz=current_position+pass_counter;
	    	  				EEPROM_WriteByte(cur_poz,DATA);
	    	  				_delay_ms(100);
	    	  				pass_counter++;
	    	  			}
						LCD_clearscreen();
    3bac:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
						LCD_vidWriteString("pass is saved",13);
    3bb0:	8b ee       	ldi	r24, 0xEB	; 235
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	6d e0       	ldi	r22, 0x0D	; 13
    3bb6:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
    3bba:	fe 01       	movw	r30, r28
    3bbc:	ed 54       	subi	r30, 0x4D	; 77
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	aa e7       	ldi	r26, 0x7A	; 122
    3bc6:	b4 e4       	ldi	r27, 0x44	; 68
    3bc8:	80 83       	st	Z, r24
    3bca:	91 83       	std	Z+1, r25	; 0x01
    3bcc:	a2 83       	std	Z+2, r26	; 0x02
    3bce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd0:	8e 01       	movw	r16, r28
    3bd2:	01 55       	subi	r16, 0x51	; 81
    3bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	ed 54       	subi	r30, 0x4D	; 77
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	4a ef       	ldi	r20, 0xFA	; 250
    3bea:	54 e4       	ldi	r21, 0x44	; 68
    3bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	80 83       	st	Z, r24
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	a2 83       	std	Z+2, r26	; 0x02
    3bfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bfe:	fe 01       	movw	r30, r28
    3c00:	e1 55       	subi	r30, 0x51	; 81
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	60 81       	ld	r22, Z
    3c06:	71 81       	ldd	r23, Z+1	; 0x01
    3c08:	82 81       	ldd	r24, Z+2	; 0x02
    3c0a:	93 81       	ldd	r25, Z+3	; 0x03
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e8       	ldi	r20, 0x80	; 128
    3c12:	5f e3       	ldi	r21, 0x3F	; 63
    3c14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3c18:	88 23       	and	r24, r24
    3c1a:	44 f4       	brge	.+16     	; 0x3c2c <Main_Screen+0x1066>
		__ticks = 1;
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e3 55       	subi	r30, 0x53	; 83
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
    3c2a:	64 c0       	rjmp	.+200    	; 0x3cf4 <Main_Screen+0x112e>
	else if (__tmp > 65535)
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e1 55       	subi	r30, 0x51	; 81
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	3f ef       	ldi	r19, 0xFF	; 255
    3c3e:	4f e7       	ldi	r20, 0x7F	; 127
    3c40:	57 e4       	ldi	r21, 0x47	; 71
    3c42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c46:	18 16       	cp	r1, r24
    3c48:	0c f0       	brlt	.+2      	; 0x3c4c <Main_Screen+0x1086>
    3c4a:	43 c0       	rjmp	.+134    	; 0x3cd2 <Main_Screen+0x110c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	ed 54       	subi	r30, 0x4D	; 77
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	60 81       	ld	r22, Z
    3c54:	71 81       	ldd	r23, Z+1	; 0x01
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e2       	ldi	r20, 0x20	; 32
    3c60:	51 e4       	ldi	r21, 0x41	; 65
    3c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	8e 01       	movw	r16, r28
    3c6c:	03 55       	subi	r16, 0x53	; 83
    3c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c70:	bc 01       	movw	r22, r24
    3c72:	cd 01       	movw	r24, r26
    3c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	f8 01       	movw	r30, r16
    3c7e:	91 83       	std	Z+1, r25	; 0x01
    3c80:	80 83       	st	Z, r24
    3c82:	1f c0       	rjmp	.+62     	; 0x3cc2 <Main_Screen+0x10fc>
    3c84:	fe 01       	movw	r30, r28
    3c86:	e5 55       	subi	r30, 0x55	; 85
    3c88:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8a:	88 ec       	ldi	r24, 0xC8	; 200
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	91 83       	std	Z+1, r25	; 0x01
    3c90:	80 83       	st	Z, r24
    3c92:	fe 01       	movw	r30, r28
    3c94:	e5 55       	subi	r30, 0x55	; 85
    3c96:	ff 4f       	sbci	r31, 0xFF	; 255
    3c98:	80 81       	ld	r24, Z
    3c9a:	91 81       	ldd	r25, Z+1	; 0x01
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <Main_Screen+0x10d6>
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e5 55       	subi	r30, 0x55	; 85
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	91 83       	std	Z+1, r25	; 0x01
    3ca8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3caa:	de 01       	movw	r26, r28
    3cac:	a3 55       	subi	r26, 0x53	; 83
    3cae:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	e3 55       	subi	r30, 0x53	; 83
    3cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb6:	80 81       	ld	r24, Z
    3cb8:	91 81       	ldd	r25, Z+1	; 0x01
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	11 96       	adiw	r26, 0x01	; 1
    3cbe:	9c 93       	st	X, r25
    3cc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	e3 55       	subi	r30, 0x53	; 83
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	80 81       	ld	r24, Z
    3cca:	91 81       	ldd	r25, Z+1	; 0x01
    3ccc:	00 97       	sbiw	r24, 0x00	; 0
    3cce:	d1 f6       	brne	.-76     	; 0x3c84 <Main_Screen+0x10be>
    3cd0:	27 c0       	rjmp	.+78     	; 0x3d20 <Main_Screen+0x115a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd2:	8e 01       	movw	r16, r28
    3cd4:	03 55       	subi	r16, 0x53	; 83
    3cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd8:	fe 01       	movw	r30, r28
    3cda:	e1 55       	subi	r30, 0x51	; 81
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	60 81       	ld	r22, Z
    3ce0:	71 81       	ldd	r23, Z+1	; 0x01
    3ce2:	82 81       	ldd	r24, Z+2	; 0x02
    3ce4:	93 81       	ldd	r25, Z+3	; 0x03
    3ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	f8 01       	movw	r30, r16
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	80 83       	st	Z, r24
    3cf4:	de 01       	movw	r26, r28
    3cf6:	a7 55       	subi	r26, 0x57	; 87
    3cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e3 55       	subi	r30, 0x53	; 83
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	80 81       	ld	r24, Z
    3d02:	91 81       	ldd	r25, Z+1	; 0x01
    3d04:	8d 93       	st	X+, r24
    3d06:	9c 93       	st	X, r25
    3d08:	fe 01       	movw	r30, r28
    3d0a:	e7 55       	subi	r30, 0x57	; 87
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 81       	ld	r24, Z
    3d10:	91 81       	ldd	r25, Z+1	; 0x01
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	f1 f7       	brne	.-4      	; 0x3d12 <Main_Screen+0x114c>
    3d16:	fe 01       	movw	r30, r28
    3d18:	e7 55       	subi	r30, 0x57	; 87
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	80 83       	st	Z, r24
						_delay_ms(1000);
						LCD_clearscreen();
    3d20:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
						LCD_vidWriteString("Register done",13);
    3d24:	89 ef       	ldi	r24, 0xF9	; 249
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	6d e0       	ldi	r22, 0x0D	; 13
    3d2a:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
    3d2e:	fe 01       	movw	r30, r28
    3d30:	eb 55       	subi	r30, 0x5B	; 91
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	aa e7       	ldi	r26, 0x7A	; 122
    3d3a:	b4 e4       	ldi	r27, 0x44	; 68
    3d3c:	80 83       	st	Z, r24
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	a2 83       	std	Z+2, r26	; 0x02
    3d42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d44:	8e 01       	movw	r16, r28
    3d46:	0f 55       	subi	r16, 0x5F	; 95
    3d48:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	eb 55       	subi	r30, 0x5B	; 91
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	60 81       	ld	r22, Z
    3d52:	71 81       	ldd	r23, Z+1	; 0x01
    3d54:	82 81       	ldd	r24, Z+2	; 0x02
    3d56:	93 81       	ldd	r25, Z+3	; 0x03
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	4a ef       	ldi	r20, 0xFA	; 250
    3d5e:	54 e4       	ldi	r21, 0x44	; 68
    3d60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	f8 01       	movw	r30, r16
    3d6a:	80 83       	st	Z, r24
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	a2 83       	std	Z+2, r26	; 0x02
    3d70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d72:	fe 01       	movw	r30, r28
    3d74:	ef 55       	subi	r30, 0x5F	; 95
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	60 81       	ld	r22, Z
    3d7a:	71 81       	ldd	r23, Z+1	; 0x01
    3d7c:	82 81       	ldd	r24, Z+2	; 0x02
    3d7e:	93 81       	ldd	r25, Z+3	; 0x03
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	40 e8       	ldi	r20, 0x80	; 128
    3d86:	5f e3       	ldi	r21, 0x3F	; 63
    3d88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d8c:	88 23       	and	r24, r24
    3d8e:	44 f4       	brge	.+16     	; 0x3da0 <Main_Screen+0x11da>
		__ticks = 1;
    3d90:	fe 01       	movw	r30, r28
    3d92:	e1 56       	subi	r30, 0x61	; 97
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	91 83       	std	Z+1, r25	; 0x01
    3d9c:	80 83       	st	Z, r24
    3d9e:	64 c0       	rjmp	.+200    	; 0x3e68 <Main_Screen+0x12a2>
	else if (__tmp > 65535)
    3da0:	fe 01       	movw	r30, r28
    3da2:	ef 55       	subi	r30, 0x5F	; 95
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	60 81       	ld	r22, Z
    3da8:	71 81       	ldd	r23, Z+1	; 0x01
    3daa:	82 81       	ldd	r24, Z+2	; 0x02
    3dac:	93 81       	ldd	r25, Z+3	; 0x03
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	3f ef       	ldi	r19, 0xFF	; 255
    3db2:	4f e7       	ldi	r20, 0x7F	; 127
    3db4:	57 e4       	ldi	r21, 0x47	; 71
    3db6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3dba:	18 16       	cp	r1, r24
    3dbc:	0c f0       	brlt	.+2      	; 0x3dc0 <Main_Screen+0x11fa>
    3dbe:	43 c0       	rjmp	.+134    	; 0x3e46 <Main_Screen+0x1280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	eb 55       	subi	r30, 0x5B	; 91
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	60 81       	ld	r22, Z
    3dc8:	71 81       	ldd	r23, Z+1	; 0x01
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	93 81       	ldd	r25, Z+3	; 0x03
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	40 e2       	ldi	r20, 0x20	; 32
    3dd4:	51 e4       	ldi	r21, 0x41	; 65
    3dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	8e 01       	movw	r16, r28
    3de0:	01 56       	subi	r16, 0x61	; 97
    3de2:	1f 4f       	sbci	r17, 0xFF	; 255
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	f8 01       	movw	r30, r16
    3df2:	91 83       	std	Z+1, r25	; 0x01
    3df4:	80 83       	st	Z, r24
    3df6:	1f c0       	rjmp	.+62     	; 0x3e36 <Main_Screen+0x1270>
    3df8:	fe 01       	movw	r30, r28
    3dfa:	e3 56       	subi	r30, 0x63	; 99
    3dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfe:	88 ec       	ldi	r24, 0xC8	; 200
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
    3e06:	fe 01       	movw	r30, r28
    3e08:	e3 56       	subi	r30, 0x63	; 99
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	80 81       	ld	r24, Z
    3e0e:	91 81       	ldd	r25, Z+1	; 0x01
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <Main_Screen+0x124a>
    3e14:	fe 01       	movw	r30, r28
    3e16:	e3 56       	subi	r30, 0x63	; 99
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	91 83       	std	Z+1, r25	; 0x01
    3e1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e1e:	de 01       	movw	r26, r28
    3e20:	a1 56       	subi	r26, 0x61	; 97
    3e22:	bf 4f       	sbci	r27, 0xFF	; 255
    3e24:	fe 01       	movw	r30, r28
    3e26:	e1 56       	subi	r30, 0x61	; 97
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	80 81       	ld	r24, Z
    3e2c:	91 81       	ldd	r25, Z+1	; 0x01
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	11 96       	adiw	r26, 0x01	; 1
    3e32:	9c 93       	st	X, r25
    3e34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e36:	fe 01       	movw	r30, r28
    3e38:	e1 56       	subi	r30, 0x61	; 97
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	80 81       	ld	r24, Z
    3e3e:	91 81       	ldd	r25, Z+1	; 0x01
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	d1 f6       	brne	.-76     	; 0x3df8 <Main_Screen+0x1232>
    3e44:	27 c0       	rjmp	.+78     	; 0x3e94 <Main_Screen+0x12ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e46:	8e 01       	movw	r16, r28
    3e48:	01 56       	subi	r16, 0x61	; 97
    3e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	ef 55       	subi	r30, 0x5F	; 95
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	60 81       	ld	r22, Z
    3e54:	71 81       	ldd	r23, Z+1	; 0x01
    3e56:	82 81       	ldd	r24, Z+2	; 0x02
    3e58:	93 81       	ldd	r25, Z+3	; 0x03
    3e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	f8 01       	movw	r30, r16
    3e64:	91 83       	std	Z+1, r25	; 0x01
    3e66:	80 83       	st	Z, r24
    3e68:	de 01       	movw	r26, r28
    3e6a:	a5 56       	subi	r26, 0x65	; 101
    3e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e6e:	fe 01       	movw	r30, r28
    3e70:	e1 56       	subi	r30, 0x61	; 97
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	80 81       	ld	r24, Z
    3e76:	91 81       	ldd	r25, Z+1	; 0x01
    3e78:	8d 93       	st	X+, r24
    3e7a:	9c 93       	st	X, r25
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e5 56       	subi	r30, 0x65	; 101
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 81       	ld	r24, Z
    3e84:	91 81       	ldd	r25, Z+1	; 0x01
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <Main_Screen+0x12c0>
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	e5 56       	subi	r30, 0x65	; 101
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	80 83       	st	Z, r24
						_delay_ms(1000);
						LCD_clearscreen();
    3e94:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
						return Main_Screen();
    3e98:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Main_Screen>
    3e9c:	c9 54       	subi	r28, 0x49	; 73
    3e9e:	de 4f       	sbci	r29, 0xFE	; 254
    3ea0:	88 83       	st	Y, r24
    3ea2:	c7 5b       	subi	r28, 0xB7	; 183
    3ea4:	d1 40       	sbci	r29, 0x01	; 1
    3ea6:	0c 94 18 29 	jmp	0x5230	; 0x5230 <Main_Screen+0x266a>

	    	        }
	      else{

	    	  LCD_clearscreen();
    3eaa:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	  u8 cnt=0, pass_tries_count=0;
    3eae:	fe 01       	movw	r30, r28
    3eb0:	eb 5b       	subi	r30, 0xBB	; 187
    3eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb4:	10 82       	st	Z, r1
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	ec 5b       	subi	r30, 0xBC	; 188
    3eba:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebc:	10 82       	st	Z, r1

	    	  u8 Num_of_users=0;
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	ed 5b       	subi	r30, 0xBD	; 189
    3ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec4:	10 82       	st	Z, r1

	    	   EEPROM_ReadByte(0x01,chs,1);
    3ec6:	9e 01       	movw	r18, r28
    3ec8:	2d 5a       	subi	r18, 0xAD	; 173
    3eca:	3e 4f       	sbci	r19, 0xFE	; 254
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	b9 01       	movw	r22, r18
    3ed2:	41 e0       	ldi	r20, 0x01	; 1
    3ed4:	0e 94 0d 09 	call	0x121a	; 0x121a <EEPROM_ReadByte>
	    	   Num_of_users=chs[0];
    3ed8:	de 01       	movw	r26, r28
    3eda:	ad 5b       	subi	r26, 0xBD	; 189
    3edc:	be 4f       	sbci	r27, 0xFE	; 254
    3ede:	fe 01       	movw	r30, r28
    3ee0:	ed 5a       	subi	r30, 0xAD	; 173
    3ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee4:	80 81       	ld	r24, Z
    3ee6:	8c 93       	st	X, r24
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e9 56       	subi	r30, 0x69	; 105
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	a8 ec       	ldi	r26, 0xC8	; 200
    3ef4:	b2 e4       	ldi	r27, 0x42	; 66
    3ef6:	80 83       	st	Z, r24
    3ef8:	91 83       	std	Z+1, r25	; 0x01
    3efa:	a2 83       	std	Z+2, r26	; 0x02
    3efc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3efe:	8e 01       	movw	r16, r28
    3f00:	0d 56       	subi	r16, 0x6D	; 109
    3f02:	1f 4f       	sbci	r17, 0xFF	; 255
    3f04:	fe 01       	movw	r30, r28
    3f06:	e9 56       	subi	r30, 0x69	; 105
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	60 81       	ld	r22, Z
    3f0c:	71 81       	ldd	r23, Z+1	; 0x01
    3f0e:	82 81       	ldd	r24, Z+2	; 0x02
    3f10:	93 81       	ldd	r25, Z+3	; 0x03
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	4a ef       	ldi	r20, 0xFA	; 250
    3f18:	54 e4       	ldi	r21, 0x44	; 68
    3f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	f8 01       	movw	r30, r16
    3f24:	80 83       	st	Z, r24
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	a2 83       	std	Z+2, r26	; 0x02
    3f2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	ed 56       	subi	r30, 0x6D	; 109
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	60 81       	ld	r22, Z
    3f34:	71 81       	ldd	r23, Z+1	; 0x01
    3f36:	82 81       	ldd	r24, Z+2	; 0x02
    3f38:	93 81       	ldd	r25, Z+3	; 0x03
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	40 e8       	ldi	r20, 0x80	; 128
    3f40:	5f e3       	ldi	r21, 0x3F	; 63
    3f42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3f46:	88 23       	and	r24, r24
    3f48:	44 f4       	brge	.+16     	; 0x3f5a <Main_Screen+0x1394>
		__ticks = 1;
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	ef 56       	subi	r30, 0x6F	; 111
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	91 83       	std	Z+1, r25	; 0x01
    3f56:	80 83       	st	Z, r24
    3f58:	64 c0       	rjmp	.+200    	; 0x4022 <Main_Screen+0x145c>
	else if (__tmp > 65535)
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	ed 56       	subi	r30, 0x6D	; 109
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	60 81       	ld	r22, Z
    3f62:	71 81       	ldd	r23, Z+1	; 0x01
    3f64:	82 81       	ldd	r24, Z+2	; 0x02
    3f66:	93 81       	ldd	r25, Z+3	; 0x03
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	3f ef       	ldi	r19, 0xFF	; 255
    3f6c:	4f e7       	ldi	r20, 0x7F	; 127
    3f6e:	57 e4       	ldi	r21, 0x47	; 71
    3f70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3f74:	18 16       	cp	r1, r24
    3f76:	0c f0       	brlt	.+2      	; 0x3f7a <Main_Screen+0x13b4>
    3f78:	43 c0       	rjmp	.+134    	; 0x4000 <Main_Screen+0x143a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e9 56       	subi	r30, 0x69	; 105
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	60 81       	ld	r22, Z
    3f82:	71 81       	ldd	r23, Z+1	; 0x01
    3f84:	82 81       	ldd	r24, Z+2	; 0x02
    3f86:	93 81       	ldd	r25, Z+3	; 0x03
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 e2       	ldi	r20, 0x20	; 32
    3f8e:	51 e4       	ldi	r21, 0x41	; 65
    3f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	8e 01       	movw	r16, r28
    3f9a:	0f 56       	subi	r16, 0x6F	; 111
    3f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f9e:	bc 01       	movw	r22, r24
    3fa0:	cd 01       	movw	r24, r26
    3fa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	f8 01       	movw	r30, r16
    3fac:	91 83       	std	Z+1, r25	; 0x01
    3fae:	80 83       	st	Z, r24
    3fb0:	1f c0       	rjmp	.+62     	; 0x3ff0 <Main_Screen+0x142a>
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	e1 57       	subi	r30, 0x71	; 113
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	88 ec       	ldi	r24, 0xC8	; 200
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	91 83       	std	Z+1, r25	; 0x01
    3fbe:	80 83       	st	Z, r24
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e1 57       	subi	r30, 0x71	; 113
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	80 81       	ld	r24, Z
    3fc8:	91 81       	ldd	r25, Z+1	; 0x01
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	f1 f7       	brne	.-4      	; 0x3fca <Main_Screen+0x1404>
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e1 57       	subi	r30, 0x71	; 113
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	91 83       	std	Z+1, r25	; 0x01
    3fd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd8:	de 01       	movw	r26, r28
    3fda:	af 56       	subi	r26, 0x6F	; 111
    3fdc:	bf 4f       	sbci	r27, 0xFF	; 255
    3fde:	fe 01       	movw	r30, r28
    3fe0:	ef 56       	subi	r30, 0x6F	; 111
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	11 96       	adiw	r26, 0x01	; 1
    3fec:	9c 93       	st	X, r25
    3fee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	ef 56       	subi	r30, 0x6F	; 111
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	80 81       	ld	r24, Z
    3ff8:	91 81       	ldd	r25, Z+1	; 0x01
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	d1 f6       	brne	.-76     	; 0x3fb2 <Main_Screen+0x13ec>
    3ffe:	28 c0       	rjmp	.+80     	; 0x4050 <Main_Screen+0x148a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4000:	8e 01       	movw	r16, r28
    4002:	0f 56       	subi	r16, 0x6F	; 111
    4004:	1f 4f       	sbci	r17, 0xFF	; 255
    4006:	fe 01       	movw	r30, r28
    4008:	ed 56       	subi	r30, 0x6D	; 109
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	60 81       	ld	r22, Z
    400e:	71 81       	ldd	r23, Z+1	; 0x01
    4010:	82 81       	ldd	r24, Z+2	; 0x02
    4012:	93 81       	ldd	r25, Z+3	; 0x03
    4014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	f8 01       	movw	r30, r16
    401e:	91 83       	std	Z+1, r25	; 0x01
    4020:	80 83       	st	Z, r24
    4022:	de 01       	movw	r26, r28
    4024:	a3 57       	subi	r26, 0x73	; 115
    4026:	bf 4f       	sbci	r27, 0xFF	; 255
    4028:	fe 01       	movw	r30, r28
    402a:	ef 56       	subi	r30, 0x6F	; 111
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	80 81       	ld	r24, Z
    4030:	91 81       	ldd	r25, Z+1	; 0x01
    4032:	11 96       	adiw	r26, 0x01	; 1
    4034:	9c 93       	st	X, r25
    4036:	8e 93       	st	-X, r24
    4038:	fe 01       	movw	r30, r28
    403a:	e3 57       	subi	r30, 0x73	; 115
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	80 81       	ld	r24, Z
    4040:	91 81       	ldd	r25, Z+1	; 0x01
    4042:	01 97       	sbiw	r24, 0x01	; 1
    4044:	f1 f7       	brne	.-4      	; 0x4042 <Main_Screen+0x147c>
    4046:	fe 01       	movw	r30, r28
    4048:	e3 57       	subi	r30, 0x73	; 115
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	91 83       	std	Z+1, r25	; 0x01
    404e:	80 83       	st	Z, r24
	    		_delay_ms(100);
	    	  if(Num_of_users==0xff){
    4050:	fe 01       	movw	r30, r28
    4052:	ed 5b       	subi	r30, 0xBD	; 189
    4054:	fe 4f       	sbci	r31, 0xFE	; 254
    4056:	80 81       	ld	r24, Z
    4058:	8f 3f       	cpi	r24, 0xFF	; 255
    405a:	11 f0       	breq	.+4      	; 0x4060 <Main_Screen+0x149a>
    405c:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <Main_Screen+0x2612>
	    	    LCD_vidWriteString("NO Register yet",15);
    4060:	87 e0       	ldi	r24, 0x07	; 7
    4062:	91 e0       	ldi	r25, 0x01	; 1
    4064:	6f e0       	ldi	r22, 0x0F	; 15
    4066:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	      	     return 0;
    406a:	c9 54       	subi	r28, 0x49	; 73
    406c:	de 4f       	sbci	r29, 0xFE	; 254
    406e:	18 82       	st	Y, r1
    4070:	c7 5b       	subi	r28, 0xB7	; 183
    4072:	d1 40       	sbci	r29, 0x01	; 1
    4074:	0c 94 18 29 	jmp	0x5230	; 0x5230 <Main_Screen+0x266a>
	    	      }

	        while(cnt++<TRIES_ALLOWED){
	    	  u16 name_counter=0;
    4078:	fe 01       	movw	r30, r28
    407a:	ef 5b       	subi	r30, 0xBF	; 191
    407c:	fe 4f       	sbci	r31, 0xFE	; 254
    407e:	11 82       	std	Z+1, r1	; 0x01
    4080:	10 82       	st	Z, r1
	    	  		u16 name[NAME_SIZE]={0xff};
    4082:	ce 01       	movw	r24, r28
    4084:	82 58       	subi	r24, 0x82	; 130
    4086:	9e 4f       	sbci	r25, 0xFE	; 254
    4088:	28 e1       	ldi	r18, 0x18	; 24
    408a:	fc 01       	movw	r30, r24
    408c:	df 01       	movw	r26, r30
    408e:	82 2f       	mov	r24, r18
    4090:	1d 92       	st	X+, r1
    4092:	8a 95       	dec	r24
    4094:	e9 f7       	brne	.-6      	; 0x4090 <Main_Screen+0x14ca>
    4096:	fe 01       	movw	r30, r28
    4098:	e2 58       	subi	r30, 0x82	; 130
    409a:	fe 4f       	sbci	r31, 0xFE	; 254
    409c:	8f ef       	ldi	r24, 0xFF	; 255
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	91 83       	std	Z+1, r25	; 0x01
    40a2:	80 83       	st	Z, r24
	    	  		u16 stored_name[NAME_SIZE]={0xff};
    40a4:	ce 01       	movw	r24, r28
    40a6:	8a 56       	subi	r24, 0x6A	; 106
    40a8:	9e 4f       	sbci	r25, 0xFE	; 254
    40aa:	28 e1       	ldi	r18, 0x18	; 24
    40ac:	fc 01       	movw	r30, r24
    40ae:	df 01       	movw	r26, r30
    40b0:	82 2f       	mov	r24, r18
    40b2:	1d 92       	st	X+, r1
    40b4:	8a 95       	dec	r24
    40b6:	e9 f7       	brne	.-6      	; 0x40b2 <Main_Screen+0x14ec>
    40b8:	fe 01       	movw	r30, r28
    40ba:	ea 56       	subi	r30, 0x6A	; 106
    40bc:	fe 4f       	sbci	r31, 0xFE	; 254
    40be:	8f ef       	ldi	r24, 0xFF	; 255
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	91 83       	std	Z+1, r25	; 0x01
    40c4:	80 83       	st	Z, r24
	    	  		for(u8 i=0;i<NAME_SIZE;i++)name[i]=0xff;
    40c6:	fe 01       	movw	r30, r28
    40c8:	e2 5c       	subi	r30, 0xC2	; 194
    40ca:	fe 4f       	sbci	r31, 0xFE	; 254
    40cc:	10 82       	st	Z, r1
    40ce:	1b c0       	rjmp	.+54     	; 0x4106 <Main_Screen+0x1540>
    40d0:	fe 01       	movw	r30, r28
    40d2:	e2 5c       	subi	r30, 0xC2	; 194
    40d4:	fe 4f       	sbci	r31, 0xFE	; 254
    40d6:	80 81       	ld	r24, Z
    40d8:	88 2f       	mov	r24, r24
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	9e 01       	movw	r18, r28
    40de:	22 58       	subi	r18, 0x82	; 130
    40e0:	3e 4f       	sbci	r19, 0xFE	; 254
    40e2:	88 0f       	add	r24, r24
    40e4:	99 1f       	adc	r25, r25
    40e6:	f9 01       	movw	r30, r18
    40e8:	e8 0f       	add	r30, r24
    40ea:	f9 1f       	adc	r31, r25
    40ec:	8f ef       	ldi	r24, 0xFF	; 255
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	80 83       	st	Z, r24
    40f4:	de 01       	movw	r26, r28
    40f6:	a2 5c       	subi	r26, 0xC2	; 194
    40f8:	be 4f       	sbci	r27, 0xFE	; 254
    40fa:	fe 01       	movw	r30, r28
    40fc:	e2 5c       	subi	r30, 0xC2	; 194
    40fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4100:	80 81       	ld	r24, Z
    4102:	8f 5f       	subi	r24, 0xFF	; 255
    4104:	8c 93       	st	X, r24
    4106:	fe 01       	movw	r30, r28
    4108:	e2 5c       	subi	r30, 0xC2	; 194
    410a:	fe 4f       	sbci	r31, 0xFE	; 254
    410c:	80 81       	ld	r24, Z
    410e:	8c 30       	cpi	r24, 0x0C	; 12
    4110:	f8 f2       	brcs	.-66     	; 0x40d0 <Main_Screen+0x150a>
	    	  		DATA = NO_DATA;
    4112:	fe 01       	movw	r30, r28
    4114:	e0 5b       	subi	r30, 0xB0	; 176
    4116:	fe 4f       	sbci	r31, 0xFE	; 254
    4118:	83 e2       	ldi	r24, 0x23	; 35
    411a:	80 83       	st	Z, r24
	    	  		LCD_clearscreen();
    411c:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	  		LCD_vidWriteString("Enter Name:",11);
    4120:	87 e1       	ldi	r24, 0x17	; 23
    4122:	91 e0       	ldi	r25, 0x01	; 1
    4124:	6b e0       	ldi	r22, 0x0B	; 11
    4126:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  		LCD_vidSetPosition(1,0);
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	60 e0       	ldi	r22, 0x00	; 0
    412e:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
    4132:	fe 01       	movw	r30, r28
    4134:	e7 57       	subi	r30, 0x77	; 119
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	a8 e4       	ldi	r26, 0x48	; 72
    413e:	b3 e4       	ldi	r27, 0x43	; 67
    4140:	80 83       	st	Z, r24
    4142:	91 83       	std	Z+1, r25	; 0x01
    4144:	a2 83       	std	Z+2, r26	; 0x02
    4146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4148:	8e 01       	movw	r16, r28
    414a:	0b 57       	subi	r16, 0x7B	; 123
    414c:	1f 4f       	sbci	r17, 0xFF	; 255
    414e:	fe 01       	movw	r30, r28
    4150:	e7 57       	subi	r30, 0x77	; 119
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	60 81       	ld	r22, Z
    4156:	71 81       	ldd	r23, Z+1	; 0x01
    4158:	82 81       	ldd	r24, Z+2	; 0x02
    415a:	93 81       	ldd	r25, Z+3	; 0x03
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	4a ef       	ldi	r20, 0xFA	; 250
    4162:	54 e4       	ldi	r21, 0x44	; 68
    4164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	f8 01       	movw	r30, r16
    416e:	80 83       	st	Z, r24
    4170:	91 83       	std	Z+1, r25	; 0x01
    4172:	a2 83       	std	Z+2, r26	; 0x02
    4174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4176:	fe 01       	movw	r30, r28
    4178:	eb 57       	subi	r30, 0x7B	; 123
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	60 81       	ld	r22, Z
    417e:	71 81       	ldd	r23, Z+1	; 0x01
    4180:	82 81       	ldd	r24, Z+2	; 0x02
    4182:	93 81       	ldd	r25, Z+3	; 0x03
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	40 e8       	ldi	r20, 0x80	; 128
    418a:	5f e3       	ldi	r21, 0x3F	; 63
    418c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4190:	88 23       	and	r24, r24
    4192:	44 f4       	brge	.+16     	; 0x41a4 <Main_Screen+0x15de>
		__ticks = 1;
    4194:	fe 01       	movw	r30, r28
    4196:	ed 57       	subi	r30, 0x7D	; 125
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	91 83       	std	Z+1, r25	; 0x01
    41a0:	80 83       	st	Z, r24
    41a2:	64 c0       	rjmp	.+200    	; 0x426c <Main_Screen+0x16a6>
	else if (__tmp > 65535)
    41a4:	fe 01       	movw	r30, r28
    41a6:	eb 57       	subi	r30, 0x7B	; 123
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	3f ef       	ldi	r19, 0xFF	; 255
    41b6:	4f e7       	ldi	r20, 0x7F	; 127
    41b8:	57 e4       	ldi	r21, 0x47	; 71
    41ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	0c f0       	brlt	.+2      	; 0x41c4 <Main_Screen+0x15fe>
    41c2:	43 c0       	rjmp	.+134    	; 0x424a <Main_Screen+0x1684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c4:	fe 01       	movw	r30, r28
    41c6:	e7 57       	subi	r30, 0x77	; 119
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	60 81       	ld	r22, Z
    41cc:	71 81       	ldd	r23, Z+1	; 0x01
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e2       	ldi	r20, 0x20	; 32
    41d8:	51 e4       	ldi	r21, 0x41	; 65
    41da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	8e 01       	movw	r16, r28
    41e4:	0d 57       	subi	r16, 0x7D	; 125
    41e6:	1f 4f       	sbci	r17, 0xFF	; 255
    41e8:	bc 01       	movw	r22, r24
    41ea:	cd 01       	movw	r24, r26
    41ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	f8 01       	movw	r30, r16
    41f6:	91 83       	std	Z+1, r25	; 0x01
    41f8:	80 83       	st	Z, r24
    41fa:	1f c0       	rjmp	.+62     	; 0x423a <Main_Screen+0x1674>
    41fc:	fe 01       	movw	r30, r28
    41fe:	ef 57       	subi	r30, 0x7F	; 127
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	88 ec       	ldi	r24, 0xC8	; 200
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	91 83       	std	Z+1, r25	; 0x01
    4208:	80 83       	st	Z, r24
    420a:	fe 01       	movw	r30, r28
    420c:	ef 57       	subi	r30, 0x7F	; 127
    420e:	ff 4f       	sbci	r31, 0xFF	; 255
    4210:	80 81       	ld	r24, Z
    4212:	91 81       	ldd	r25, Z+1	; 0x01
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	f1 f7       	brne	.-4      	; 0x4214 <Main_Screen+0x164e>
    4218:	fe 01       	movw	r30, r28
    421a:	ef 57       	subi	r30, 0x7F	; 127
    421c:	ff 4f       	sbci	r31, 0xFF	; 255
    421e:	91 83       	std	Z+1, r25	; 0x01
    4220:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4222:	de 01       	movw	r26, r28
    4224:	ad 57       	subi	r26, 0x7D	; 125
    4226:	bf 4f       	sbci	r27, 0xFF	; 255
    4228:	fe 01       	movw	r30, r28
    422a:	ed 57       	subi	r30, 0x7D	; 125
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 81       	ld	r24, Z
    4230:	91 81       	ldd	r25, Z+1	; 0x01
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	11 96       	adiw	r26, 0x01	; 1
    4236:	9c 93       	st	X, r25
    4238:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    423a:	fe 01       	movw	r30, r28
    423c:	ed 57       	subi	r30, 0x7D	; 125
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	d1 f6       	brne	.-76     	; 0x41fc <Main_Screen+0x1636>
    4248:	28 c0       	rjmp	.+80     	; 0x429a <Main_Screen+0x16d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	8e 01       	movw	r16, r28
    424c:	0d 57       	subi	r16, 0x7D	; 125
    424e:	1f 4f       	sbci	r17, 0xFF	; 255
    4250:	fe 01       	movw	r30, r28
    4252:	eb 57       	subi	r30, 0x7B	; 123
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	60 81       	ld	r22, Z
    4258:	71 81       	ldd	r23, Z+1	; 0x01
    425a:	82 81       	ldd	r24, Z+2	; 0x02
    425c:	93 81       	ldd	r25, Z+3	; 0x03
    425e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	f8 01       	movw	r30, r16
    4268:	91 83       	std	Z+1, r25	; 0x01
    426a:	80 83       	st	Z, r24
    426c:	de 01       	movw	r26, r28
    426e:	a1 58       	subi	r26, 0x81	; 129
    4270:	bf 4f       	sbci	r27, 0xFF	; 255
    4272:	fe 01       	movw	r30, r28
    4274:	ed 57       	subi	r30, 0x7D	; 125
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	80 81       	ld	r24, Z
    427a:	91 81       	ldd	r25, Z+1	; 0x01
    427c:	11 96       	adiw	r26, 0x01	; 1
    427e:	9c 93       	st	X, r25
    4280:	8e 93       	st	-X, r24
    4282:	fe 01       	movw	r30, r28
    4284:	e1 58       	subi	r30, 0x81	; 129
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	80 81       	ld	r24, Z
    428a:	91 81       	ldd	r25, Z+1	; 0x01
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <Main_Screen+0x16c6>
    4290:	fe 01       	movw	r30, r28
    4292:	e1 58       	subi	r30, 0x81	; 129
    4294:	ff 4f       	sbci	r31, 0xFF	; 255
    4296:	91 83       	std	Z+1, r25	; 0x01
    4298:	80 83       	st	Z, r24
	    	  		_delay_ms(200);
	    	  		name_counter=0;
    429a:	fe 01       	movw	r30, r28
    429c:	ef 5b       	subi	r30, 0xBF	; 191
    429e:	fe 4f       	sbci	r31, 0xFE	; 254
    42a0:	11 82       	std	Z+1, r1	; 0x01
    42a2:	10 82       	st	Z, r1
    42a4:	f4 c0       	rjmp	.+488    	; 0x448e <Main_Screen+0x18c8>

	    	  		while (name_counter<NAME_SIZE)
	    	  		{
	    	  			DATA = NO_DATA ;
    42a6:	fe 01       	movw	r30, r28
    42a8:	e0 5b       	subi	r30, 0xB0	; 176
    42aa:	fe 4f       	sbci	r31, 0xFE	; 254
    42ac:	83 e2       	ldi	r24, 0x23	; 35
    42ae:	80 83       	st	Z, r24
    42b0:	06 c0       	rjmp	.+12     	; 0x42be <Main_Screen+0x16f8>
	    	  			while (DATA == NO_DATA)
	    	  				{
	    	  					DATA = UART_GetChar();
    42b2:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_GetChar>
    42b6:	fe 01       	movw	r30, r28
    42b8:	e0 5b       	subi	r30, 0xB0	; 176
    42ba:	fe 4f       	sbci	r31, 0xFE	; 254
    42bc:	80 83       	st	Z, r24
	    	  		name_counter=0;

	    	  		while (name_counter<NAME_SIZE)
	    	  		{
	    	  			DATA = NO_DATA ;
	    	  			while (DATA == NO_DATA)
    42be:	fe 01       	movw	r30, r28
    42c0:	e0 5b       	subi	r30, 0xB0	; 176
    42c2:	fe 4f       	sbci	r31, 0xFE	; 254
    42c4:	80 81       	ld	r24, Z
    42c6:	83 32       	cpi	r24, 0x23	; 35
    42c8:	a1 f3       	breq	.-24     	; 0x42b2 <Main_Screen+0x16ec>
	    	  				{
	    	  					DATA = UART_GetChar();
	    	  				}
	    	  		  if(DATA=='@')break;
    42ca:	fe 01       	movw	r30, r28
    42cc:	e0 5b       	subi	r30, 0xB0	; 176
    42ce:	fe 4f       	sbci	r31, 0xFE	; 254
    42d0:	80 81       	ld	r24, Z
    42d2:	80 34       	cpi	r24, 0x40	; 64
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <Main_Screen+0x1712>
    42d6:	e4 c0       	rjmp	.+456    	; 0x44a0 <Main_Screen+0x18da>
	    	  			name[name_counter]=DATA;
    42d8:	fe 01       	movw	r30, r28
    42da:	ef 5b       	subi	r30, 0xBF	; 191
    42dc:	fe 4f       	sbci	r31, 0xFE	; 254
    42de:	60 81       	ld	r22, Z
    42e0:	71 81       	ldd	r23, Z+1	; 0x01
    42e2:	fe 01       	movw	r30, r28
    42e4:	e0 5b       	subi	r30, 0xB0	; 176
    42e6:	fe 4f       	sbci	r31, 0xFE	; 254
    42e8:	80 81       	ld	r24, Z
    42ea:	48 2f       	mov	r20, r24
    42ec:	50 e0       	ldi	r21, 0x00	; 0
    42ee:	9e 01       	movw	r18, r28
    42f0:	22 58       	subi	r18, 0x82	; 130
    42f2:	3e 4f       	sbci	r19, 0xFE	; 254
    42f4:	cb 01       	movw	r24, r22
    42f6:	88 0f       	add	r24, r24
    42f8:	99 1f       	adc	r25, r25
    42fa:	f9 01       	movw	r30, r18
    42fc:	e8 0f       	add	r30, r24
    42fe:	f9 1f       	adc	r31, r25
    4300:	51 83       	std	Z+1, r21	; 0x01
    4302:	40 83       	st	Z, r20
	    	  			LCD_vidWriteCharctr(DATA);
    4304:	fe 01       	movw	r30, r28
    4306:	e0 5b       	subi	r30, 0xB0	; 176
    4308:	fe 4f       	sbci	r31, 0xFE	; 254
    430a:	80 81       	ld	r24, Z
    430c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    4310:	fe 01       	movw	r30, r28
    4312:	e5 58       	subi	r30, 0x85	; 133
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	a8 e4       	ldi	r26, 0x48	; 72
    431c:	b2 e4       	ldi	r27, 0x42	; 66
    431e:	80 83       	st	Z, r24
    4320:	91 83       	std	Z+1, r25	; 0x01
    4322:	a2 83       	std	Z+2, r26	; 0x02
    4324:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4326:	8e 01       	movw	r16, r28
    4328:	09 58       	subi	r16, 0x89	; 137
    432a:	1f 4f       	sbci	r17, 0xFF	; 255
    432c:	fe 01       	movw	r30, r28
    432e:	e5 58       	subi	r30, 0x85	; 133
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	60 81       	ld	r22, Z
    4334:	71 81       	ldd	r23, Z+1	; 0x01
    4336:	82 81       	ldd	r24, Z+2	; 0x02
    4338:	93 81       	ldd	r25, Z+3	; 0x03
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	4a ef       	ldi	r20, 0xFA	; 250
    4340:	54 e4       	ldi	r21, 0x44	; 68
    4342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	f8 01       	movw	r30, r16
    434c:	80 83       	st	Z, r24
    434e:	91 83       	std	Z+1, r25	; 0x01
    4350:	a2 83       	std	Z+2, r26	; 0x02
    4352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4354:	fe 01       	movw	r30, r28
    4356:	e9 58       	subi	r30, 0x89	; 137
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	60 81       	ld	r22, Z
    435c:	71 81       	ldd	r23, Z+1	; 0x01
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e8       	ldi	r20, 0x80	; 128
    4368:	5f e3       	ldi	r21, 0x3F	; 63
    436a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    436e:	88 23       	and	r24, r24
    4370:	44 f4       	brge	.+16     	; 0x4382 <Main_Screen+0x17bc>
		__ticks = 1;
    4372:	fe 01       	movw	r30, r28
    4374:	eb 58       	subi	r30, 0x8B	; 139
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	91 83       	std	Z+1, r25	; 0x01
    437e:	80 83       	st	Z, r24
    4380:	64 c0       	rjmp	.+200    	; 0x444a <Main_Screen+0x1884>
	else if (__tmp > 65535)
    4382:	fe 01       	movw	r30, r28
    4384:	e9 58       	subi	r30, 0x89	; 137
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	60 81       	ld	r22, Z
    438a:	71 81       	ldd	r23, Z+1	; 0x01
    438c:	82 81       	ldd	r24, Z+2	; 0x02
    438e:	93 81       	ldd	r25, Z+3	; 0x03
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	3f ef       	ldi	r19, 0xFF	; 255
    4394:	4f e7       	ldi	r20, 0x7F	; 127
    4396:	57 e4       	ldi	r21, 0x47	; 71
    4398:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    439c:	18 16       	cp	r1, r24
    439e:	0c f0       	brlt	.+2      	; 0x43a2 <Main_Screen+0x17dc>
    43a0:	43 c0       	rjmp	.+134    	; 0x4428 <Main_Screen+0x1862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a2:	fe 01       	movw	r30, r28
    43a4:	e5 58       	subi	r30, 0x85	; 133
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	60 81       	ld	r22, Z
    43aa:	71 81       	ldd	r23, Z+1	; 0x01
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	40 e2       	ldi	r20, 0x20	; 32
    43b6:	51 e4       	ldi	r21, 0x41	; 65
    43b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	8e 01       	movw	r16, r28
    43c2:	0b 58       	subi	r16, 0x8B	; 139
    43c4:	1f 4f       	sbci	r17, 0xFF	; 255
    43c6:	bc 01       	movw	r22, r24
    43c8:	cd 01       	movw	r24, r26
    43ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	f8 01       	movw	r30, r16
    43d4:	91 83       	std	Z+1, r25	; 0x01
    43d6:	80 83       	st	Z, r24
    43d8:	1f c0       	rjmp	.+62     	; 0x4418 <Main_Screen+0x1852>
    43da:	fe 01       	movw	r30, r28
    43dc:	ed 58       	subi	r30, 0x8D	; 141
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	88 ec       	ldi	r24, 0xC8	; 200
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	91 83       	std	Z+1, r25	; 0x01
    43e6:	80 83       	st	Z, r24
    43e8:	fe 01       	movw	r30, r28
    43ea:	ed 58       	subi	r30, 0x8D	; 141
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	80 81       	ld	r24, Z
    43f0:	91 81       	ldd	r25, Z+1	; 0x01
    43f2:	01 97       	sbiw	r24, 0x01	; 1
    43f4:	f1 f7       	brne	.-4      	; 0x43f2 <Main_Screen+0x182c>
    43f6:	fe 01       	movw	r30, r28
    43f8:	ed 58       	subi	r30, 0x8D	; 141
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	91 83       	std	Z+1, r25	; 0x01
    43fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4400:	de 01       	movw	r26, r28
    4402:	ab 58       	subi	r26, 0x8B	; 139
    4404:	bf 4f       	sbci	r27, 0xFF	; 255
    4406:	fe 01       	movw	r30, r28
    4408:	eb 58       	subi	r30, 0x8B	; 139
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	80 81       	ld	r24, Z
    440e:	91 81       	ldd	r25, Z+1	; 0x01
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	11 96       	adiw	r26, 0x01	; 1
    4414:	9c 93       	st	X, r25
    4416:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4418:	fe 01       	movw	r30, r28
    441a:	eb 58       	subi	r30, 0x8B	; 139
    441c:	ff 4f       	sbci	r31, 0xFF	; 255
    441e:	80 81       	ld	r24, Z
    4420:	91 81       	ldd	r25, Z+1	; 0x01
    4422:	00 97       	sbiw	r24, 0x00	; 0
    4424:	d1 f6       	brne	.-76     	; 0x43da <Main_Screen+0x1814>
    4426:	27 c0       	rjmp	.+78     	; 0x4476 <Main_Screen+0x18b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4428:	8e 01       	movw	r16, r28
    442a:	0b 58       	subi	r16, 0x8B	; 139
    442c:	1f 4f       	sbci	r17, 0xFF	; 255
    442e:	fe 01       	movw	r30, r28
    4430:	e9 58       	subi	r30, 0x89	; 137
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	60 81       	ld	r22, Z
    4436:	71 81       	ldd	r23, Z+1	; 0x01
    4438:	82 81       	ldd	r24, Z+2	; 0x02
    443a:	93 81       	ldd	r25, Z+3	; 0x03
    443c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4440:	dc 01       	movw	r26, r24
    4442:	cb 01       	movw	r24, r22
    4444:	f8 01       	movw	r30, r16
    4446:	91 83       	std	Z+1, r25	; 0x01
    4448:	80 83       	st	Z, r24
    444a:	de 01       	movw	r26, r28
    444c:	af 58       	subi	r26, 0x8F	; 143
    444e:	bf 4f       	sbci	r27, 0xFF	; 255
    4450:	fe 01       	movw	r30, r28
    4452:	eb 58       	subi	r30, 0x8B	; 139
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	80 81       	ld	r24, Z
    4458:	91 81       	ldd	r25, Z+1	; 0x01
    445a:	8d 93       	st	X+, r24
    445c:	9c 93       	st	X, r25
    445e:	fe 01       	movw	r30, r28
    4460:	ef 58       	subi	r30, 0x8F	; 143
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	80 81       	ld	r24, Z
    4466:	91 81       	ldd	r25, Z+1	; 0x01
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	f1 f7       	brne	.-4      	; 0x4468 <Main_Screen+0x18a2>
    446c:	fe 01       	movw	r30, r28
    446e:	ef 58       	subi	r30, 0x8F	; 143
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	91 83       	std	Z+1, r25	; 0x01
    4474:	80 83       	st	Z, r24

	    	  			_delay_ms(50);
	    	  			name_counter++;
    4476:	de 01       	movw	r26, r28
    4478:	af 5b       	subi	r26, 0xBF	; 191
    447a:	be 4f       	sbci	r27, 0xFE	; 254
    447c:	fe 01       	movw	r30, r28
    447e:	ef 5b       	subi	r30, 0xBF	; 191
    4480:	fe 4f       	sbci	r31, 0xFE	; 254
    4482:	80 81       	ld	r24, Z
    4484:	91 81       	ldd	r25, Z+1	; 0x01
    4486:	01 96       	adiw	r24, 0x01	; 1
    4488:	11 96       	adiw	r26, 0x01	; 1
    448a:	9c 93       	st	X, r25
    448c:	8e 93       	st	-X, r24
	    	  		LCD_vidWriteString("Enter Name:",11);
	    	  		LCD_vidSetPosition(1,0);
	    	  		_delay_ms(200);
	    	  		name_counter=0;

	    	  		while (name_counter<NAME_SIZE)
    448e:	fe 01       	movw	r30, r28
    4490:	ef 5b       	subi	r30, 0xBF	; 191
    4492:	fe 4f       	sbci	r31, 0xFE	; 254
    4494:	80 81       	ld	r24, Z
    4496:	91 81       	ldd	r25, Z+1	; 0x01
    4498:	8c 30       	cpi	r24, 0x0C	; 12
    449a:	91 05       	cpc	r25, r1
    449c:	08 f4       	brcc	.+2      	; 0x44a0 <Main_Screen+0x18da>
    449e:	03 cf       	rjmp	.-506    	; 0x42a6 <Main_Screen+0x16e0>
	    	  			_delay_ms(50);
	    	  			name_counter++;
	    	  		}


	    	  		u8 pass_counter=0;
    44a0:	fe 01       	movw	r30, r28
    44a2:	e0 5c       	subi	r30, 0xC0	; 192
    44a4:	fe 4f       	sbci	r31, 0xFE	; 254
    44a6:	10 82       	st	Z, r1
	    	  		u8 pass[PASS_SIZE]={0xff};
    44a8:	fe 01       	movw	r30, r28
    44aa:	e2 55       	subi	r30, 0x52	; 82
    44ac:	fe 4f       	sbci	r31, 0xFE	; 254
    44ae:	10 82       	st	Z, r1
    44b0:	11 82       	std	Z+1, r1	; 0x01
    44b2:	12 82       	std	Z+2, r1	; 0x02
    44b4:	13 82       	std	Z+3, r1	; 0x03
    44b6:	fe 01       	movw	r30, r28
    44b8:	e2 55       	subi	r30, 0x52	; 82
    44ba:	fe 4f       	sbci	r31, 0xFE	; 254
    44bc:	8f ef       	ldi	r24, 0xFF	; 255
    44be:	80 83       	st	Z, r24
	    	  		u8 stored_pass[PASS_SIZE]={0xff};
    44c0:	fe 01       	movw	r30, r28
    44c2:	ee 54       	subi	r30, 0x4E	; 78
    44c4:	fe 4f       	sbci	r31, 0xFE	; 254
    44c6:	10 82       	st	Z, r1
    44c8:	11 82       	std	Z+1, r1	; 0x01
    44ca:	12 82       	std	Z+2, r1	; 0x02
    44cc:	13 82       	std	Z+3, r1	; 0x03
    44ce:	fe 01       	movw	r30, r28
    44d0:	ee 54       	subi	r30, 0x4E	; 78
    44d2:	fe 4f       	sbci	r31, 0xFE	; 254
    44d4:	8f ef       	ldi	r24, 0xFF	; 255
    44d6:	80 83       	st	Z, r24

	    	  		DATA = NO_DATA;
    44d8:	fe 01       	movw	r30, r28
    44da:	e0 5b       	subi	r30, 0xB0	; 176
    44dc:	fe 4f       	sbci	r31, 0xFE	; 254
    44de:	83 e2       	ldi	r24, 0x23	; 35
    44e0:	80 83       	st	Z, r24
	    	  		LCD_clearscreen();
    44e2:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	  		LCD_vidWriteString("Enter Pass:",11);
    44e6:	83 e2       	ldi	r24, 0x23	; 35
    44e8:	91 e0       	ldi	r25, 0x01	; 1
    44ea:	6b e0       	ldi	r22, 0x0B	; 11
    44ec:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  		LCD_vidSetPosition(1,0);
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	60 e0       	ldi	r22, 0x00	; 0
    44f4:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
    44f8:	fe 01       	movw	r30, r28
    44fa:	e3 59       	subi	r30, 0x93	; 147
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	a8 e4       	ldi	r26, 0x48	; 72
    4504:	b3 e4       	ldi	r27, 0x43	; 67
    4506:	80 83       	st	Z, r24
    4508:	91 83       	std	Z+1, r25	; 0x01
    450a:	a2 83       	std	Z+2, r26	; 0x02
    450c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    450e:	8e 01       	movw	r16, r28
    4510:	07 59       	subi	r16, 0x97	; 151
    4512:	1f 4f       	sbci	r17, 0xFF	; 255
    4514:	fe 01       	movw	r30, r28
    4516:	e3 59       	subi	r30, 0x93	; 147
    4518:	ff 4f       	sbci	r31, 0xFF	; 255
    451a:	60 81       	ld	r22, Z
    451c:	71 81       	ldd	r23, Z+1	; 0x01
    451e:	82 81       	ldd	r24, Z+2	; 0x02
    4520:	93 81       	ldd	r25, Z+3	; 0x03
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	4a ef       	ldi	r20, 0xFA	; 250
    4528:	54 e4       	ldi	r21, 0x44	; 68
    452a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	f8 01       	movw	r30, r16
    4534:	80 83       	st	Z, r24
    4536:	91 83       	std	Z+1, r25	; 0x01
    4538:	a2 83       	std	Z+2, r26	; 0x02
    453a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    453c:	fe 01       	movw	r30, r28
    453e:	e7 59       	subi	r30, 0x97	; 151
    4540:	ff 4f       	sbci	r31, 0xFF	; 255
    4542:	60 81       	ld	r22, Z
    4544:	71 81       	ldd	r23, Z+1	; 0x01
    4546:	82 81       	ldd	r24, Z+2	; 0x02
    4548:	93 81       	ldd	r25, Z+3	; 0x03
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	40 e8       	ldi	r20, 0x80	; 128
    4550:	5f e3       	ldi	r21, 0x3F	; 63
    4552:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4556:	88 23       	and	r24, r24
    4558:	44 f4       	brge	.+16     	; 0x456a <Main_Screen+0x19a4>
		__ticks = 1;
    455a:	fe 01       	movw	r30, r28
    455c:	e9 59       	subi	r30, 0x99	; 153
    455e:	ff 4f       	sbci	r31, 0xFF	; 255
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	91 83       	std	Z+1, r25	; 0x01
    4566:	80 83       	st	Z, r24
    4568:	64 c0       	rjmp	.+200    	; 0x4632 <Main_Screen+0x1a6c>
	else if (__tmp > 65535)
    456a:	fe 01       	movw	r30, r28
    456c:	e7 59       	subi	r30, 0x97	; 151
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	60 81       	ld	r22, Z
    4572:	71 81       	ldd	r23, Z+1	; 0x01
    4574:	82 81       	ldd	r24, Z+2	; 0x02
    4576:	93 81       	ldd	r25, Z+3	; 0x03
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	3f ef       	ldi	r19, 0xFF	; 255
    457c:	4f e7       	ldi	r20, 0x7F	; 127
    457e:	57 e4       	ldi	r21, 0x47	; 71
    4580:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4584:	18 16       	cp	r1, r24
    4586:	0c f0       	brlt	.+2      	; 0x458a <Main_Screen+0x19c4>
    4588:	43 c0       	rjmp	.+134    	; 0x4610 <Main_Screen+0x1a4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    458a:	fe 01       	movw	r30, r28
    458c:	e3 59       	subi	r30, 0x93	; 147
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	60 81       	ld	r22, Z
    4592:	71 81       	ldd	r23, Z+1	; 0x01
    4594:	82 81       	ldd	r24, Z+2	; 0x02
    4596:	93 81       	ldd	r25, Z+3	; 0x03
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	40 e2       	ldi	r20, 0x20	; 32
    459e:	51 e4       	ldi	r21, 0x41	; 65
    45a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45a4:	dc 01       	movw	r26, r24
    45a6:	cb 01       	movw	r24, r22
    45a8:	8e 01       	movw	r16, r28
    45aa:	09 59       	subi	r16, 0x99	; 153
    45ac:	1f 4f       	sbci	r17, 0xFF	; 255
    45ae:	bc 01       	movw	r22, r24
    45b0:	cd 01       	movw	r24, r26
    45b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45b6:	dc 01       	movw	r26, r24
    45b8:	cb 01       	movw	r24, r22
    45ba:	f8 01       	movw	r30, r16
    45bc:	91 83       	std	Z+1, r25	; 0x01
    45be:	80 83       	st	Z, r24
    45c0:	1f c0       	rjmp	.+62     	; 0x4600 <Main_Screen+0x1a3a>
    45c2:	fe 01       	movw	r30, r28
    45c4:	eb 59       	subi	r30, 0x9B	; 155
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	88 ec       	ldi	r24, 0xC8	; 200
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	91 83       	std	Z+1, r25	; 0x01
    45ce:	80 83       	st	Z, r24
    45d0:	fe 01       	movw	r30, r28
    45d2:	eb 59       	subi	r30, 0x9B	; 155
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	80 81       	ld	r24, Z
    45d8:	91 81       	ldd	r25, Z+1	; 0x01
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	f1 f7       	brne	.-4      	; 0x45da <Main_Screen+0x1a14>
    45de:	fe 01       	movw	r30, r28
    45e0:	eb 59       	subi	r30, 0x9B	; 155
    45e2:	ff 4f       	sbci	r31, 0xFF	; 255
    45e4:	91 83       	std	Z+1, r25	; 0x01
    45e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e8:	de 01       	movw	r26, r28
    45ea:	a9 59       	subi	r26, 0x99	; 153
    45ec:	bf 4f       	sbci	r27, 0xFF	; 255
    45ee:	fe 01       	movw	r30, r28
    45f0:	e9 59       	subi	r30, 0x99	; 153
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	80 81       	ld	r24, Z
    45f6:	91 81       	ldd	r25, Z+1	; 0x01
    45f8:	01 97       	sbiw	r24, 0x01	; 1
    45fa:	11 96       	adiw	r26, 0x01	; 1
    45fc:	9c 93       	st	X, r25
    45fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4600:	fe 01       	movw	r30, r28
    4602:	e9 59       	subi	r30, 0x99	; 153
    4604:	ff 4f       	sbci	r31, 0xFF	; 255
    4606:	80 81       	ld	r24, Z
    4608:	91 81       	ldd	r25, Z+1	; 0x01
    460a:	00 97       	sbiw	r24, 0x00	; 0
    460c:	d1 f6       	brne	.-76     	; 0x45c2 <Main_Screen+0x19fc>
    460e:	28 c0       	rjmp	.+80     	; 0x4660 <Main_Screen+0x1a9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4610:	8e 01       	movw	r16, r28
    4612:	09 59       	subi	r16, 0x99	; 153
    4614:	1f 4f       	sbci	r17, 0xFF	; 255
    4616:	fe 01       	movw	r30, r28
    4618:	e7 59       	subi	r30, 0x97	; 151
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	f8 01       	movw	r30, r16
    462e:	91 83       	std	Z+1, r25	; 0x01
    4630:	80 83       	st	Z, r24
    4632:	de 01       	movw	r26, r28
    4634:	ad 59       	subi	r26, 0x9D	; 157
    4636:	bf 4f       	sbci	r27, 0xFF	; 255
    4638:	fe 01       	movw	r30, r28
    463a:	e9 59       	subi	r30, 0x99	; 153
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	80 81       	ld	r24, Z
    4640:	91 81       	ldd	r25, Z+1	; 0x01
    4642:	11 96       	adiw	r26, 0x01	; 1
    4644:	9c 93       	st	X, r25
    4646:	8e 93       	st	-X, r24
    4648:	fe 01       	movw	r30, r28
    464a:	ed 59       	subi	r30, 0x9D	; 157
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 81       	ld	r24, Z
    4650:	91 81       	ldd	r25, Z+1	; 0x01
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <Main_Screen+0x1a8c>
    4656:	fe 01       	movw	r30, r28
    4658:	ed 59       	subi	r30, 0x9D	; 157
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	91 83       	std	Z+1, r25	; 0x01
    465e:	80 83       	st	Z, r24
	    	  		_delay_ms(200);
	    	  		pass_counter=0;
    4660:	fe 01       	movw	r30, r28
    4662:	e0 5c       	subi	r30, 0xC0	; 192
    4664:	fe 4f       	sbci	r31, 0xFE	; 254
    4666:	10 82       	st	Z, r1
    4668:	a2 c1       	rjmp	.+836    	; 0x49ae <Main_Screen+0x1de8>

	    	  		while(pass_counter<PASS_SIZE)
	    	  		{
	    	  			DATA = NO_DATA;
    466a:	fe 01       	movw	r30, r28
    466c:	e0 5b       	subi	r30, 0xB0	; 176
    466e:	fe 4f       	sbci	r31, 0xFE	; 254
    4670:	83 e2       	ldi	r24, 0x23	; 35
    4672:	80 83       	st	Z, r24
    4674:	06 c0       	rjmp	.+12     	; 0x4682 <Main_Screen+0x1abc>
	    	  			while (DATA == NO_DATA)
	    	  			{
	    	  				DATA = UART_GetChar();
    4676:	0e 94 60 12 	call	0x24c0	; 0x24c0 <UART_GetChar>
    467a:	fe 01       	movw	r30, r28
    467c:	e0 5b       	subi	r30, 0xB0	; 176
    467e:	fe 4f       	sbci	r31, 0xFE	; 254
    4680:	80 83       	st	Z, r24
	    	  		pass_counter=0;

	    	  		while(pass_counter<PASS_SIZE)
	    	  		{
	    	  			DATA = NO_DATA;
	    	  			while (DATA == NO_DATA)
    4682:	fe 01       	movw	r30, r28
    4684:	e0 5b       	subi	r30, 0xB0	; 176
    4686:	fe 4f       	sbci	r31, 0xFE	; 254
    4688:	80 81       	ld	r24, Z
    468a:	83 32       	cpi	r24, 0x23	; 35
    468c:	a1 f3       	breq	.-24     	; 0x4676 <Main_Screen+0x1ab0>
	    	  			{
	    	  				DATA = UART_GetChar();
	    	  			}
	    	  			pass[pass_counter]=DATA;
    468e:	fe 01       	movw	r30, r28
    4690:	e0 5c       	subi	r30, 0xC0	; 192
    4692:	fe 4f       	sbci	r31, 0xFE	; 254
    4694:	80 81       	ld	r24, Z
    4696:	28 2f       	mov	r18, r24
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	ce 01       	movw	r24, r28
    469c:	82 55       	subi	r24, 0x52	; 82
    469e:	9e 4f       	sbci	r25, 0xFE	; 254
    46a0:	dc 01       	movw	r26, r24
    46a2:	a2 0f       	add	r26, r18
    46a4:	b3 1f       	adc	r27, r19
    46a6:	fe 01       	movw	r30, r28
    46a8:	e0 5b       	subi	r30, 0xB0	; 176
    46aa:	fe 4f       	sbci	r31, 0xFE	; 254
    46ac:	80 81       	ld	r24, Z
    46ae:	8c 93       	st	X, r24
	    	  			LCD_vidWriteCharctr(DATA);
    46b0:	fe 01       	movw	r30, r28
    46b2:	e0 5b       	subi	r30, 0xB0	; 176
    46b4:	fe 4f       	sbci	r31, 0xFE	; 254
    46b6:	80 81       	ld	r24, Z
    46b8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    46bc:	fe 01       	movw	r30, r28
    46be:	e1 5a       	subi	r30, 0xA1	; 161
    46c0:	ff 4f       	sbci	r31, 0xFF	; 255
    46c2:	80 e0       	ldi	r24, 0x00	; 0
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	a6 e9       	ldi	r26, 0x96	; 150
    46c8:	b3 e4       	ldi	r27, 0x43	; 67
    46ca:	80 83       	st	Z, r24
    46cc:	91 83       	std	Z+1, r25	; 0x01
    46ce:	a2 83       	std	Z+2, r26	; 0x02
    46d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46d2:	8e 01       	movw	r16, r28
    46d4:	05 5a       	subi	r16, 0xA5	; 165
    46d6:	1f 4f       	sbci	r17, 0xFF	; 255
    46d8:	fe 01       	movw	r30, r28
    46da:	e1 5a       	subi	r30, 0xA1	; 161
    46dc:	ff 4f       	sbci	r31, 0xFF	; 255
    46de:	60 81       	ld	r22, Z
    46e0:	71 81       	ldd	r23, Z+1	; 0x01
    46e2:	82 81       	ldd	r24, Z+2	; 0x02
    46e4:	93 81       	ldd	r25, Z+3	; 0x03
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	4a ef       	ldi	r20, 0xFA	; 250
    46ec:	54 e4       	ldi	r21, 0x44	; 68
    46ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	f8 01       	movw	r30, r16
    46f8:	80 83       	st	Z, r24
    46fa:	91 83       	std	Z+1, r25	; 0x01
    46fc:	a2 83       	std	Z+2, r26	; 0x02
    46fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4700:	fe 01       	movw	r30, r28
    4702:	e5 5a       	subi	r30, 0xA5	; 165
    4704:	ff 4f       	sbci	r31, 0xFF	; 255
    4706:	60 81       	ld	r22, Z
    4708:	71 81       	ldd	r23, Z+1	; 0x01
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	93 81       	ldd	r25, Z+3	; 0x03
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	40 e8       	ldi	r20, 0x80	; 128
    4714:	5f e3       	ldi	r21, 0x3F	; 63
    4716:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    471a:	88 23       	and	r24, r24
    471c:	44 f4       	brge	.+16     	; 0x472e <Main_Screen+0x1b68>
		__ticks = 1;
    471e:	fe 01       	movw	r30, r28
    4720:	e7 5a       	subi	r30, 0xA7	; 167
    4722:	ff 4f       	sbci	r31, 0xFF	; 255
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	91 83       	std	Z+1, r25	; 0x01
    472a:	80 83       	st	Z, r24
    472c:	64 c0       	rjmp	.+200    	; 0x47f6 <Main_Screen+0x1c30>
	else if (__tmp > 65535)
    472e:	fe 01       	movw	r30, r28
    4730:	e5 5a       	subi	r30, 0xA5	; 165
    4732:	ff 4f       	sbci	r31, 0xFF	; 255
    4734:	60 81       	ld	r22, Z
    4736:	71 81       	ldd	r23, Z+1	; 0x01
    4738:	82 81       	ldd	r24, Z+2	; 0x02
    473a:	93 81       	ldd	r25, Z+3	; 0x03
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	3f ef       	ldi	r19, 0xFF	; 255
    4740:	4f e7       	ldi	r20, 0x7F	; 127
    4742:	57 e4       	ldi	r21, 0x47	; 71
    4744:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4748:	18 16       	cp	r1, r24
    474a:	0c f0       	brlt	.+2      	; 0x474e <Main_Screen+0x1b88>
    474c:	43 c0       	rjmp	.+134    	; 0x47d4 <Main_Screen+0x1c0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    474e:	fe 01       	movw	r30, r28
    4750:	e1 5a       	subi	r30, 0xA1	; 161
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	60 81       	ld	r22, Z
    4756:	71 81       	ldd	r23, Z+1	; 0x01
    4758:	82 81       	ldd	r24, Z+2	; 0x02
    475a:	93 81       	ldd	r25, Z+3	; 0x03
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	40 e2       	ldi	r20, 0x20	; 32
    4762:	51 e4       	ldi	r21, 0x41	; 65
    4764:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4768:	dc 01       	movw	r26, r24
    476a:	cb 01       	movw	r24, r22
    476c:	8e 01       	movw	r16, r28
    476e:	07 5a       	subi	r16, 0xA7	; 167
    4770:	1f 4f       	sbci	r17, 0xFF	; 255
    4772:	bc 01       	movw	r22, r24
    4774:	cd 01       	movw	r24, r26
    4776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    477a:	dc 01       	movw	r26, r24
    477c:	cb 01       	movw	r24, r22
    477e:	f8 01       	movw	r30, r16
    4780:	91 83       	std	Z+1, r25	; 0x01
    4782:	80 83       	st	Z, r24
    4784:	1f c0       	rjmp	.+62     	; 0x47c4 <Main_Screen+0x1bfe>
    4786:	fe 01       	movw	r30, r28
    4788:	e9 5a       	subi	r30, 0xA9	; 169
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	88 ec       	ldi	r24, 0xC8	; 200
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	91 83       	std	Z+1, r25	; 0x01
    4792:	80 83       	st	Z, r24
    4794:	fe 01       	movw	r30, r28
    4796:	e9 5a       	subi	r30, 0xA9	; 169
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	80 81       	ld	r24, Z
    479c:	91 81       	ldd	r25, Z+1	; 0x01
    479e:	01 97       	sbiw	r24, 0x01	; 1
    47a0:	f1 f7       	brne	.-4      	; 0x479e <Main_Screen+0x1bd8>
    47a2:	fe 01       	movw	r30, r28
    47a4:	e9 5a       	subi	r30, 0xA9	; 169
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ac:	de 01       	movw	r26, r28
    47ae:	a7 5a       	subi	r26, 0xA7	; 167
    47b0:	bf 4f       	sbci	r27, 0xFF	; 255
    47b2:	fe 01       	movw	r30, r28
    47b4:	e7 5a       	subi	r30, 0xA7	; 167
    47b6:	ff 4f       	sbci	r31, 0xFF	; 255
    47b8:	80 81       	ld	r24, Z
    47ba:	91 81       	ldd	r25, Z+1	; 0x01
    47bc:	01 97       	sbiw	r24, 0x01	; 1
    47be:	11 96       	adiw	r26, 0x01	; 1
    47c0:	9c 93       	st	X, r25
    47c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c4:	fe 01       	movw	r30, r28
    47c6:	e7 5a       	subi	r30, 0xA7	; 167
    47c8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ca:	80 81       	ld	r24, Z
    47cc:	91 81       	ldd	r25, Z+1	; 0x01
    47ce:	00 97       	sbiw	r24, 0x00	; 0
    47d0:	d1 f6       	brne	.-76     	; 0x4786 <Main_Screen+0x1bc0>
    47d2:	27 c0       	rjmp	.+78     	; 0x4822 <Main_Screen+0x1c5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47d4:	8e 01       	movw	r16, r28
    47d6:	07 5a       	subi	r16, 0xA7	; 167
    47d8:	1f 4f       	sbci	r17, 0xFF	; 255
    47da:	fe 01       	movw	r30, r28
    47dc:	e5 5a       	subi	r30, 0xA5	; 165
    47de:	ff 4f       	sbci	r31, 0xFF	; 255
    47e0:	60 81       	ld	r22, Z
    47e2:	71 81       	ldd	r23, Z+1	; 0x01
    47e4:	82 81       	ldd	r24, Z+2	; 0x02
    47e6:	93 81       	ldd	r25, Z+3	; 0x03
    47e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47ec:	dc 01       	movw	r26, r24
    47ee:	cb 01       	movw	r24, r22
    47f0:	f8 01       	movw	r30, r16
    47f2:	91 83       	std	Z+1, r25	; 0x01
    47f4:	80 83       	st	Z, r24
    47f6:	de 01       	movw	r26, r28
    47f8:	ab 5a       	subi	r26, 0xAB	; 171
    47fa:	bf 4f       	sbci	r27, 0xFF	; 255
    47fc:	fe 01       	movw	r30, r28
    47fe:	e7 5a       	subi	r30, 0xA7	; 167
    4800:	ff 4f       	sbci	r31, 0xFF	; 255
    4802:	80 81       	ld	r24, Z
    4804:	91 81       	ldd	r25, Z+1	; 0x01
    4806:	8d 93       	st	X+, r24
    4808:	9c 93       	st	X, r25
    480a:	fe 01       	movw	r30, r28
    480c:	eb 5a       	subi	r30, 0xAB	; 171
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	80 81       	ld	r24, Z
    4812:	91 81       	ldd	r25, Z+1	; 0x01
    4814:	01 97       	sbiw	r24, 0x01	; 1
    4816:	f1 f7       	brne	.-4      	; 0x4814 <Main_Screen+0x1c4e>
    4818:	fe 01       	movw	r30, r28
    481a:	eb 5a       	subi	r30, 0xAB	; 171
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	91 83       	std	Z+1, r25	; 0x01
    4820:	80 83       	st	Z, r24
	    	  			_delay_ms(CHARACTER_PREVIEW_TIME);
	    	  			LCD_vidSetPosition(1,pass_counter);
    4822:	fe 01       	movw	r30, r28
    4824:	e0 5c       	subi	r30, 0xC0	; 192
    4826:	fe 4f       	sbci	r31, 0xFE	; 254
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	60 81       	ld	r22, Z
    482c:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
	    	  			LCD_vidWriteCharctr(PASSWORD_SYMBOL);
    4830:	8a e2       	ldi	r24, 0x2A	; 42
    4832:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_vidWriteCharctr>
    4836:	fe 01       	movw	r30, r28
    4838:	ef 5a       	subi	r30, 0xAF	; 175
    483a:	ff 4f       	sbci	r31, 0xFF	; 255
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	a8 ec       	ldi	r26, 0xC8	; 200
    4842:	b2 e4       	ldi	r27, 0x42	; 66
    4844:	80 83       	st	Z, r24
    4846:	91 83       	std	Z+1, r25	; 0x01
    4848:	a2 83       	std	Z+2, r26	; 0x02
    484a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    484c:	8e 01       	movw	r16, r28
    484e:	03 5b       	subi	r16, 0xB3	; 179
    4850:	1f 4f       	sbci	r17, 0xFF	; 255
    4852:	fe 01       	movw	r30, r28
    4854:	ef 5a       	subi	r30, 0xAF	; 175
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	60 81       	ld	r22, Z
    485a:	71 81       	ldd	r23, Z+1	; 0x01
    485c:	82 81       	ldd	r24, Z+2	; 0x02
    485e:	93 81       	ldd	r25, Z+3	; 0x03
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	4a ef       	ldi	r20, 0xFA	; 250
    4866:	54 e4       	ldi	r21, 0x44	; 68
    4868:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	f8 01       	movw	r30, r16
    4872:	80 83       	st	Z, r24
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	a2 83       	std	Z+2, r26	; 0x02
    4878:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    487a:	fe 01       	movw	r30, r28
    487c:	e3 5b       	subi	r30, 0xB3	; 179
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	60 81       	ld	r22, Z
    4882:	71 81       	ldd	r23, Z+1	; 0x01
    4884:	82 81       	ldd	r24, Z+2	; 0x02
    4886:	93 81       	ldd	r25, Z+3	; 0x03
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	40 e8       	ldi	r20, 0x80	; 128
    488e:	5f e3       	ldi	r21, 0x3F	; 63
    4890:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4894:	88 23       	and	r24, r24
    4896:	44 f4       	brge	.+16     	; 0x48a8 <Main_Screen+0x1ce2>
		__ticks = 1;
    4898:	fe 01       	movw	r30, r28
    489a:	e5 5b       	subi	r30, 0xB5	; 181
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	91 83       	std	Z+1, r25	; 0x01
    48a4:	80 83       	st	Z, r24
    48a6:	64 c0       	rjmp	.+200    	; 0x4970 <Main_Screen+0x1daa>
	else if (__tmp > 65535)
    48a8:	fe 01       	movw	r30, r28
    48aa:	e3 5b       	subi	r30, 0xB3	; 179
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	60 81       	ld	r22, Z
    48b0:	71 81       	ldd	r23, Z+1	; 0x01
    48b2:	82 81       	ldd	r24, Z+2	; 0x02
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	3f ef       	ldi	r19, 0xFF	; 255
    48ba:	4f e7       	ldi	r20, 0x7F	; 127
    48bc:	57 e4       	ldi	r21, 0x47	; 71
    48be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    48c2:	18 16       	cp	r1, r24
    48c4:	0c f0       	brlt	.+2      	; 0x48c8 <Main_Screen+0x1d02>
    48c6:	43 c0       	rjmp	.+134    	; 0x494e <Main_Screen+0x1d88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c8:	fe 01       	movw	r30, r28
    48ca:	ef 5a       	subi	r30, 0xAF	; 175
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	60 81       	ld	r22, Z
    48d0:	71 81       	ldd	r23, Z+1	; 0x01
    48d2:	82 81       	ldd	r24, Z+2	; 0x02
    48d4:	93 81       	ldd	r25, Z+3	; 0x03
    48d6:	20 e0       	ldi	r18, 0x00	; 0
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	40 e2       	ldi	r20, 0x20	; 32
    48dc:	51 e4       	ldi	r21, 0x41	; 65
    48de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48e2:	dc 01       	movw	r26, r24
    48e4:	cb 01       	movw	r24, r22
    48e6:	8e 01       	movw	r16, r28
    48e8:	05 5b       	subi	r16, 0xB5	; 181
    48ea:	1f 4f       	sbci	r17, 0xFF	; 255
    48ec:	bc 01       	movw	r22, r24
    48ee:	cd 01       	movw	r24, r26
    48f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	f8 01       	movw	r30, r16
    48fa:	91 83       	std	Z+1, r25	; 0x01
    48fc:	80 83       	st	Z, r24
    48fe:	1f c0       	rjmp	.+62     	; 0x493e <Main_Screen+0x1d78>
    4900:	fe 01       	movw	r30, r28
    4902:	e7 5b       	subi	r30, 0xB7	; 183
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	88 ec       	ldi	r24, 0xC8	; 200
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	91 83       	std	Z+1, r25	; 0x01
    490c:	80 83       	st	Z, r24
    490e:	fe 01       	movw	r30, r28
    4910:	e7 5b       	subi	r30, 0xB7	; 183
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	80 81       	ld	r24, Z
    4916:	91 81       	ldd	r25, Z+1	; 0x01
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	f1 f7       	brne	.-4      	; 0x4918 <Main_Screen+0x1d52>
    491c:	fe 01       	movw	r30, r28
    491e:	e7 5b       	subi	r30, 0xB7	; 183
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4926:	de 01       	movw	r26, r28
    4928:	a5 5b       	subi	r26, 0xB5	; 181
    492a:	bf 4f       	sbci	r27, 0xFF	; 255
    492c:	fe 01       	movw	r30, r28
    492e:	e5 5b       	subi	r30, 0xB5	; 181
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	80 81       	ld	r24, Z
    4934:	91 81       	ldd	r25, Z+1	; 0x01
    4936:	01 97       	sbiw	r24, 0x01	; 1
    4938:	11 96       	adiw	r26, 0x01	; 1
    493a:	9c 93       	st	X, r25
    493c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493e:	fe 01       	movw	r30, r28
    4940:	e5 5b       	subi	r30, 0xB5	; 181
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	80 81       	ld	r24, Z
    4946:	91 81       	ldd	r25, Z+1	; 0x01
    4948:	00 97       	sbiw	r24, 0x00	; 0
    494a:	d1 f6       	brne	.-76     	; 0x4900 <Main_Screen+0x1d3a>
    494c:	27 c0       	rjmp	.+78     	; 0x499c <Main_Screen+0x1dd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494e:	8e 01       	movw	r16, r28
    4950:	05 5b       	subi	r16, 0xB5	; 181
    4952:	1f 4f       	sbci	r17, 0xFF	; 255
    4954:	fe 01       	movw	r30, r28
    4956:	e3 5b       	subi	r30, 0xB3	; 179
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	f8 01       	movw	r30, r16
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	80 83       	st	Z, r24
    4970:	de 01       	movw	r26, r28
    4972:	a9 5b       	subi	r26, 0xB9	; 185
    4974:	bf 4f       	sbci	r27, 0xFF	; 255
    4976:	fe 01       	movw	r30, r28
    4978:	e5 5b       	subi	r30, 0xB5	; 181
    497a:	ff 4f       	sbci	r31, 0xFF	; 255
    497c:	80 81       	ld	r24, Z
    497e:	91 81       	ldd	r25, Z+1	; 0x01
    4980:	8d 93       	st	X+, r24
    4982:	9c 93       	st	X, r25
    4984:	fe 01       	movw	r30, r28
    4986:	e9 5b       	subi	r30, 0xB9	; 185
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	80 81       	ld	r24, Z
    498c:	91 81       	ldd	r25, Z+1	; 0x01
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	f1 f7       	brne	.-4      	; 0x498e <Main_Screen+0x1dc8>
    4992:	fe 01       	movw	r30, r28
    4994:	e9 5b       	subi	r30, 0xB9	; 185
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	91 83       	std	Z+1, r25	; 0x01
    499a:	80 83       	st	Z, r24
	    	  			_delay_ms(100);
	    	  			pass_counter++;
    499c:	de 01       	movw	r26, r28
    499e:	a0 5c       	subi	r26, 0xC0	; 192
    49a0:	be 4f       	sbci	r27, 0xFE	; 254
    49a2:	fe 01       	movw	r30, r28
    49a4:	e0 5c       	subi	r30, 0xC0	; 192
    49a6:	fe 4f       	sbci	r31, 0xFE	; 254
    49a8:	80 81       	ld	r24, Z
    49aa:	8f 5f       	subi	r24, 0xFF	; 255
    49ac:	8c 93       	st	X, r24
	    	  		LCD_vidWriteString("Enter Pass:",11);
	    	  		LCD_vidSetPosition(1,0);
	    	  		_delay_ms(200);
	    	  		pass_counter=0;

	    	  		while(pass_counter<PASS_SIZE)
    49ae:	fe 01       	movw	r30, r28
    49b0:	e0 5c       	subi	r30, 0xC0	; 192
    49b2:	fe 4f       	sbci	r31, 0xFE	; 254
    49b4:	80 81       	ld	r24, Z
    49b6:	84 30       	cpi	r24, 0x04	; 4
    49b8:	08 f4       	brcc	.+2      	; 0x49bc <Main_Screen+0x1df6>
    49ba:	57 ce       	rjmp	.-850    	; 0x466a <Main_Screen+0x1aa4>
	    	  			LCD_vidWriteCharctr(PASSWORD_SYMBOL);
	    	  			_delay_ms(100);
	    	  			pass_counter++;
	    	  		}

	    		 LCD_clearscreen();
    49bc:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	  	LCD_vidWriteString("Wait for check:",14);
    49c0:	8f e2       	ldi	r24, 0x2F	; 47
    49c2:	91 e0       	ldi	r25, 0x01	; 1
    49c4:	6e e0       	ldi	r22, 0x0E	; 14
    49c6:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  	//     0x02*0x1C+0x10
	    	  	// Compare
	    	  	u8 ok=0;
    49ca:	fe 01       	movw	r30, r28
    49cc:	e1 5c       	subi	r30, 0xC1	; 193
    49ce:	fe 4f       	sbci	r31, 0xFE	; 254
    49d0:	10 82       	st	Z, r1
    49d2:	fe 01       	movw	r30, r28
    49d4:	ed 5b       	subi	r30, 0xBD	; 189
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	80 e0       	ldi	r24, 0x00	; 0
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	aa ef       	ldi	r26, 0xFA	; 250
    49de:	b3 e4       	ldi	r27, 0x43	; 67
    49e0:	80 83       	st	Z, r24
    49e2:	91 83       	std	Z+1, r25	; 0x01
    49e4:	a2 83       	std	Z+2, r26	; 0x02
    49e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49e8:	8e 01       	movw	r16, r28
    49ea:	01 5c       	subi	r16, 0xC1	; 193
    49ec:	1f 4f       	sbci	r17, 0xFF	; 255
    49ee:	fe 01       	movw	r30, r28
    49f0:	ed 5b       	subi	r30, 0xBD	; 189
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	60 81       	ld	r22, Z
    49f6:	71 81       	ldd	r23, Z+1	; 0x01
    49f8:	82 81       	ldd	r24, Z+2	; 0x02
    49fa:	93 81       	ldd	r25, Z+3	; 0x03
    49fc:	20 e0       	ldi	r18, 0x00	; 0
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	4a ef       	ldi	r20, 0xFA	; 250
    4a02:	54 e4       	ldi	r21, 0x44	; 68
    4a04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	cb 01       	movw	r24, r22
    4a0c:	f8 01       	movw	r30, r16
    4a0e:	80 83       	st	Z, r24
    4a10:	91 83       	std	Z+1, r25	; 0x01
    4a12:	a2 83       	std	Z+2, r26	; 0x02
    4a14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a16:	fe 01       	movw	r30, r28
    4a18:	ff 96       	adiw	r30, 0x3f	; 63
    4a1a:	60 81       	ld	r22, Z
    4a1c:	71 81       	ldd	r23, Z+1	; 0x01
    4a1e:	82 81       	ldd	r24, Z+2	; 0x02
    4a20:	93 81       	ldd	r25, Z+3	; 0x03
    4a22:	20 e0       	ldi	r18, 0x00	; 0
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	40 e8       	ldi	r20, 0x80	; 128
    4a28:	5f e3       	ldi	r21, 0x3F	; 63
    4a2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4a2e:	88 23       	and	r24, r24
    4a30:	2c f4       	brge	.+10     	; 0x4a3c <Main_Screen+0x1e76>
		__ticks = 1;
    4a32:	81 e0       	ldi	r24, 0x01	; 1
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	9e af       	std	Y+62, r25	; 0x3e
    4a38:	8d af       	std	Y+61, r24	; 0x3d
    4a3a:	46 c0       	rjmp	.+140    	; 0x4ac8 <Main_Screen+0x1f02>
	else if (__tmp > 65535)
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	ff 96       	adiw	r30, 0x3f	; 63
    4a40:	60 81       	ld	r22, Z
    4a42:	71 81       	ldd	r23, Z+1	; 0x01
    4a44:	82 81       	ldd	r24, Z+2	; 0x02
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	3f ef       	ldi	r19, 0xFF	; 255
    4a4c:	4f e7       	ldi	r20, 0x7F	; 127
    4a4e:	57 e4       	ldi	r21, 0x47	; 71
    4a50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4a54:	18 16       	cp	r1, r24
    4a56:	64 f5       	brge	.+88     	; 0x4ab0 <Main_Screen+0x1eea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a58:	fe 01       	movw	r30, r28
    4a5a:	ed 5b       	subi	r30, 0xBD	; 189
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	60 81       	ld	r22, Z
    4a60:	71 81       	ldd	r23, Z+1	; 0x01
    4a62:	82 81       	ldd	r24, Z+2	; 0x02
    4a64:	93 81       	ldd	r25, Z+3	; 0x03
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	40 e2       	ldi	r20, 0x20	; 32
    4a6c:	51 e4       	ldi	r21, 0x41	; 65
    4a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	bc 01       	movw	r22, r24
    4a78:	cd 01       	movw	r24, r26
    4a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	9e af       	std	Y+62, r25	; 0x3e
    4a84:	8d af       	std	Y+61, r24	; 0x3d
    4a86:	0f c0       	rjmp	.+30     	; 0x4aa6 <Main_Screen+0x1ee0>
    4a88:	88 ec       	ldi	r24, 0xC8	; 200
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	9c af       	std	Y+60, r25	; 0x3c
    4a8e:	8b af       	std	Y+59, r24	; 0x3b
    4a90:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a92:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a94:	01 97       	sbiw	r24, 0x01	; 1
    4a96:	f1 f7       	brne	.-4      	; 0x4a94 <Main_Screen+0x1ece>
    4a98:	9c af       	std	Y+60, r25	; 0x3c
    4a9a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4aa0:	01 97       	sbiw	r24, 0x01	; 1
    4aa2:	9e af       	std	Y+62, r25	; 0x3e
    4aa4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4aa8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4aaa:	00 97       	sbiw	r24, 0x00	; 0
    4aac:	69 f7       	brne	.-38     	; 0x4a88 <Main_Screen+0x1ec2>
    4aae:	16 c0       	rjmp	.+44     	; 0x4adc <Main_Screen+0x1f16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	ff 96       	adiw	r30, 0x3f	; 63
    4ab4:	60 81       	ld	r22, Z
    4ab6:	71 81       	ldd	r23, Z+1	; 0x01
    4ab8:	82 81       	ldd	r24, Z+2	; 0x02
    4aba:	93 81       	ldd	r25, Z+3	; 0x03
    4abc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ac0:	dc 01       	movw	r26, r24
    4ac2:	cb 01       	movw	r24, r22
    4ac4:	9e af       	std	Y+62, r25	; 0x3e
    4ac6:	8d af       	std	Y+61, r24	; 0x3d
    4ac8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4aca:	9e ad       	ldd	r25, Y+62	; 0x3e
    4acc:	9a af       	std	Y+58, r25	; 0x3a
    4ace:	89 af       	std	Y+57, r24	; 0x39
    4ad0:	89 ad       	ldd	r24, Y+57	; 0x39
    4ad2:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ad4:	01 97       	sbiw	r24, 0x01	; 1
    4ad6:	f1 f7       	brne	.-4      	; 0x4ad4 <Main_Screen+0x1f0e>
    4ad8:	9a af       	std	Y+58, r25	; 0x3a
    4ada:	89 af       	std	Y+57, r24	; 0x39

	    	  	 _delay_ms(500);
	    	  	LCD_clearscreen();
    4adc:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	    	for(u16 j=1;j<=Num_of_users;j++) { // iterate over all users
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	e4 5c       	subi	r30, 0xC4	; 196
    4ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	91 83       	std	Z+1, r25	; 0x01
    4aec:	80 83       	st	Z, r24
    4aee:	22 c1       	rjmp	.+580    	; 0x4d34 <Main_Screen+0x216e>
	    	    		for(u8 i=0;i<NAME_SIZE;i++)stored_name[i]=0xff;
    4af0:	fe 01       	movw	r30, r28
    4af2:	e8 5c       	subi	r30, 0xC8	; 200
    4af4:	fe 4f       	sbci	r31, 0xFE	; 254
    4af6:	10 82       	st	Z, r1
    4af8:	1b c0       	rjmp	.+54     	; 0x4b30 <Main_Screen+0x1f6a>
    4afa:	fe 01       	movw	r30, r28
    4afc:	e8 5c       	subi	r30, 0xC8	; 200
    4afe:	fe 4f       	sbci	r31, 0xFE	; 254
    4b00:	80 81       	ld	r24, Z
    4b02:	88 2f       	mov	r24, r24
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	9e 01       	movw	r18, r28
    4b08:	2a 56       	subi	r18, 0x6A	; 106
    4b0a:	3e 4f       	sbci	r19, 0xFE	; 254
    4b0c:	88 0f       	add	r24, r24
    4b0e:	99 1f       	adc	r25, r25
    4b10:	f9 01       	movw	r30, r18
    4b12:	e8 0f       	add	r30, r24
    4b14:	f9 1f       	adc	r31, r25
    4b16:	8f ef       	ldi	r24, 0xFF	; 255
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	91 83       	std	Z+1, r25	; 0x01
    4b1c:	80 83       	st	Z, r24
    4b1e:	de 01       	movw	r26, r28
    4b20:	a8 5c       	subi	r26, 0xC8	; 200
    4b22:	be 4f       	sbci	r27, 0xFE	; 254
    4b24:	fe 01       	movw	r30, r28
    4b26:	e8 5c       	subi	r30, 0xC8	; 200
    4b28:	fe 4f       	sbci	r31, 0xFE	; 254
    4b2a:	80 81       	ld	r24, Z
    4b2c:	8f 5f       	subi	r24, 0xFF	; 255
    4b2e:	8c 93       	st	X, r24
    4b30:	fe 01       	movw	r30, r28
    4b32:	e8 5c       	subi	r30, 0xC8	; 200
    4b34:	fe 4f       	sbci	r31, 0xFE	; 254
    4b36:	80 81       	ld	r24, Z
    4b38:	8c 30       	cpi	r24, 0x0C	; 12
    4b3a:	f8 f2       	brcs	.-66     	; 0x4afa <Main_Screen+0x1f34>
	    	  		u8 ok1=1,ok2=1;
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	e5 5c       	subi	r30, 0xC5	; 197
    4b40:	fe 4f       	sbci	r31, 0xFE	; 254
    4b42:	81 e0       	ldi	r24, 0x01	; 1
    4b44:	80 83       	st	Z, r24
    4b46:	fe 01       	movw	r30, r28
    4b48:	e6 5c       	subi	r30, 0xC6	; 198
    4b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	80 83       	st	Z, r24
	    	  		u8 cur_poz=j*ROW;
    4b50:	fe 01       	movw	r30, r28
    4b52:	e4 5c       	subi	r30, 0xC4	; 196
    4b54:	fe 4f       	sbci	r31, 0xFE	; 254
    4b56:	80 81       	ld	r24, Z
    4b58:	91 81       	ldd	r25, Z+1	; 0x01
    4b5a:	82 95       	swap	r24
    4b5c:	92 95       	swap	r25
    4b5e:	90 7f       	andi	r25, 0xF0	; 240
    4b60:	98 27       	eor	r25, r24
    4b62:	80 7f       	andi	r24, 0xF0	; 240
    4b64:	98 27       	eor	r25, r24
    4b66:	fe 01       	movw	r30, r28
    4b68:	e7 5c       	subi	r30, 0xC7	; 199
    4b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    4b6c:	80 83       	st	Z, r24

	    	  		for(u8 i=0;i<NAME_SIZE;i++){
    4b6e:	fe 01       	movw	r30, r28
    4b70:	e9 5c       	subi	r30, 0xC9	; 201
    4b72:	fe 4f       	sbci	r31, 0xFE	; 254
    4b74:	10 82       	st	Z, r1
    4b76:	35 c0       	rjmp	.+106    	; 0x4be2 <Main_Screen+0x201c>
	    	    	EEPROM_ReadByte(cur_poz+i,chs,1);
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e7 5c       	subi	r30, 0xC7	; 199
    4b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4b7e:	80 81       	ld	r24, Z
    4b80:	28 2f       	mov	r18, r24
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	fe 01       	movw	r30, r28
    4b86:	e9 5c       	subi	r30, 0xC9	; 201
    4b88:	fe 4f       	sbci	r31, 0xFE	; 254
    4b8a:	80 81       	ld	r24, Z
    4b8c:	88 2f       	mov	r24, r24
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	82 0f       	add	r24, r18
    4b92:	93 1f       	adc	r25, r19
    4b94:	9e 01       	movw	r18, r28
    4b96:	2d 5a       	subi	r18, 0xAD	; 173
    4b98:	3e 4f       	sbci	r19, 0xFE	; 254
    4b9a:	b9 01       	movw	r22, r18
    4b9c:	41 e0       	ldi	r20, 0x01	; 1
    4b9e:	0e 94 0d 09 	call	0x121a	; 0x121a <EEPROM_ReadByte>
	    	    	stored_name[i]=chs[0];
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	e9 5c       	subi	r30, 0xC9	; 201
    4ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba8:	80 81       	ld	r24, Z
    4baa:	68 2f       	mov	r22, r24
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	fe 01       	movw	r30, r28
    4bb0:	ed 5a       	subi	r30, 0xAD	; 173
    4bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    4bb4:	80 81       	ld	r24, Z
    4bb6:	48 2f       	mov	r20, r24
    4bb8:	50 e0       	ldi	r21, 0x00	; 0
    4bba:	9e 01       	movw	r18, r28
    4bbc:	2a 56       	subi	r18, 0x6A	; 106
    4bbe:	3e 4f       	sbci	r19, 0xFE	; 254
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	88 0f       	add	r24, r24
    4bc4:	99 1f       	adc	r25, r25
    4bc6:	f9 01       	movw	r30, r18
    4bc8:	e8 0f       	add	r30, r24
    4bca:	f9 1f       	adc	r31, r25
    4bcc:	51 83       	std	Z+1, r21	; 0x01
    4bce:	40 83       	st	Z, r20
	    	    	for(u16 j=1;j<=Num_of_users;j++) { // iterate over all users
	    	    		for(u8 i=0;i<NAME_SIZE;i++)stored_name[i]=0xff;
	    	  		u8 ok1=1,ok2=1;
	    	  		u8 cur_poz=j*ROW;

	    	  		for(u8 i=0;i<NAME_SIZE;i++){
    4bd0:	de 01       	movw	r26, r28
    4bd2:	a9 5c       	subi	r26, 0xC9	; 201
    4bd4:	be 4f       	sbci	r27, 0xFE	; 254
    4bd6:	fe 01       	movw	r30, r28
    4bd8:	e9 5c       	subi	r30, 0xC9	; 201
    4bda:	fe 4f       	sbci	r31, 0xFE	; 254
    4bdc:	80 81       	ld	r24, Z
    4bde:	8f 5f       	subi	r24, 0xFF	; 255
    4be0:	8c 93       	st	X, r24
    4be2:	fe 01       	movw	r30, r28
    4be4:	e9 5c       	subi	r30, 0xC9	; 201
    4be6:	fe 4f       	sbci	r31, 0xFE	; 254
    4be8:	80 81       	ld	r24, Z
    4bea:	8c 30       	cpi	r24, 0x0C	; 12
    4bec:	28 f2       	brcs	.-118    	; 0x4b78 <Main_Screen+0x1fb2>
	    	    	EEPROM_ReadByte(cur_poz+i,chs,1);
	    	    	stored_name[i]=chs[0];
	    	  		}
	    	  		cur_poz+=NAME_SIZE;
    4bee:	de 01       	movw	r26, r28
    4bf0:	a7 5c       	subi	r26, 0xC7	; 199
    4bf2:	be 4f       	sbci	r27, 0xFE	; 254
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	e7 5c       	subi	r30, 0xC7	; 199
    4bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    4bfa:	80 81       	ld	r24, Z
    4bfc:	84 5f       	subi	r24, 0xF4	; 244
    4bfe:	8c 93       	st	X, r24
	    	  		EEPROM_ReadByte(cur_poz,stored_pass,PASS_SIZE);
    4c00:	fe 01       	movw	r30, r28
    4c02:	e7 5c       	subi	r30, 0xC7	; 199
    4c04:	fe 4f       	sbci	r31, 0xFE	; 254
    4c06:	80 81       	ld	r24, Z
    4c08:	88 2f       	mov	r24, r24
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	9e 01       	movw	r18, r28
    4c0e:	2e 54       	subi	r18, 0x4E	; 78
    4c10:	3e 4f       	sbci	r19, 0xFE	; 254
    4c12:	b9 01       	movw	r22, r18
    4c14:	44 e0       	ldi	r20, 0x04	; 4
    4c16:	0e 94 0d 09 	call	0x121a	; 0x121a <EEPROM_ReadByte>

	    	  		for(u8 i=0;i<NAME_SIZE;i++)
    4c1a:	fe 01       	movw	r30, r28
    4c1c:	ea 5c       	subi	r30, 0xCA	; 202
    4c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    4c20:	10 82       	st	Z, r1
    4c22:	30 c0       	rjmp	.+96     	; 0x4c84 <Main_Screen+0x20be>
	    	  		    if(stored_name[i]!=name[i])ok1=0;
    4c24:	fe 01       	movw	r30, r28
    4c26:	ea 5c       	subi	r30, 0xCA	; 202
    4c28:	fe 4f       	sbci	r31, 0xFE	; 254
    4c2a:	80 81       	ld	r24, Z
    4c2c:	88 2f       	mov	r24, r24
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	9e 01       	movw	r18, r28
    4c32:	2a 56       	subi	r18, 0x6A	; 106
    4c34:	3e 4f       	sbci	r19, 0xFE	; 254
    4c36:	88 0f       	add	r24, r24
    4c38:	99 1f       	adc	r25, r25
    4c3a:	f9 01       	movw	r30, r18
    4c3c:	e8 0f       	add	r30, r24
    4c3e:	f9 1f       	adc	r31, r25
    4c40:	40 81       	ld	r20, Z
    4c42:	51 81       	ldd	r21, Z+1	; 0x01
    4c44:	fe 01       	movw	r30, r28
    4c46:	ea 5c       	subi	r30, 0xCA	; 202
    4c48:	fe 4f       	sbci	r31, 0xFE	; 254
    4c4a:	80 81       	ld	r24, Z
    4c4c:	88 2f       	mov	r24, r24
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	9e 01       	movw	r18, r28
    4c52:	22 58       	subi	r18, 0x82	; 130
    4c54:	3e 4f       	sbci	r19, 0xFE	; 254
    4c56:	88 0f       	add	r24, r24
    4c58:	99 1f       	adc	r25, r25
    4c5a:	f9 01       	movw	r30, r18
    4c5c:	e8 0f       	add	r30, r24
    4c5e:	f9 1f       	adc	r31, r25
    4c60:	80 81       	ld	r24, Z
    4c62:	91 81       	ldd	r25, Z+1	; 0x01
    4c64:	48 17       	cp	r20, r24
    4c66:	59 07       	cpc	r21, r25
    4c68:	21 f0       	breq	.+8      	; 0x4c72 <Main_Screen+0x20ac>
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	e5 5c       	subi	r30, 0xC5	; 197
    4c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4c70:	10 82       	st	Z, r1
	    	    	stored_name[i]=chs[0];
	    	  		}
	    	  		cur_poz+=NAME_SIZE;
	    	  		EEPROM_ReadByte(cur_poz,stored_pass,PASS_SIZE);

	    	  		for(u8 i=0;i<NAME_SIZE;i++)
    4c72:	de 01       	movw	r26, r28
    4c74:	aa 5c       	subi	r26, 0xCA	; 202
    4c76:	be 4f       	sbci	r27, 0xFE	; 254
    4c78:	fe 01       	movw	r30, r28
    4c7a:	ea 5c       	subi	r30, 0xCA	; 202
    4c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c7e:	80 81       	ld	r24, Z
    4c80:	8f 5f       	subi	r24, 0xFF	; 255
    4c82:	8c 93       	st	X, r24
    4c84:	fe 01       	movw	r30, r28
    4c86:	ea 5c       	subi	r30, 0xCA	; 202
    4c88:	fe 4f       	sbci	r31, 0xFE	; 254
    4c8a:	80 81       	ld	r24, Z
    4c8c:	8c 30       	cpi	r24, 0x0C	; 12
    4c8e:	50 f2       	brcs	.-108    	; 0x4c24 <Main_Screen+0x205e>
	    	  		    if(stored_name[i]!=name[i])ok1=0;
	    	  		for(u8 i=0;i<PASS_SIZE;i++)
    4c90:	fe 01       	movw	r30, r28
    4c92:	eb 5c       	subi	r30, 0xCB	; 203
    4c94:	fe 4f       	sbci	r31, 0xFE	; 254
    4c96:	10 82       	st	Z, r1
    4c98:	29 c0       	rjmp	.+82     	; 0x4cec <Main_Screen+0x2126>
	    	  			if(stored_pass[i]!=pass[i])ok2=0;
    4c9a:	fe 01       	movw	r30, r28
    4c9c:	eb 5c       	subi	r30, 0xCB	; 203
    4c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ca0:	80 81       	ld	r24, Z
    4ca2:	28 2f       	mov	r18, r24
    4ca4:	30 e0       	ldi	r19, 0x00	; 0
    4ca6:	ce 01       	movw	r24, r28
    4ca8:	8e 54       	subi	r24, 0x4E	; 78
    4caa:	9e 4f       	sbci	r25, 0xFE	; 254
    4cac:	fc 01       	movw	r30, r24
    4cae:	e2 0f       	add	r30, r18
    4cb0:	f3 1f       	adc	r31, r19
    4cb2:	40 81       	ld	r20, Z
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	eb 5c       	subi	r30, 0xCB	; 203
    4cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    4cba:	80 81       	ld	r24, Z
    4cbc:	28 2f       	mov	r18, r24
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	ce 01       	movw	r24, r28
    4cc2:	82 55       	subi	r24, 0x52	; 82
    4cc4:	9e 4f       	sbci	r25, 0xFE	; 254
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	e2 0f       	add	r30, r18
    4cca:	f3 1f       	adc	r31, r19
    4ccc:	80 81       	ld	r24, Z
    4cce:	48 17       	cp	r20, r24
    4cd0:	21 f0       	breq	.+8      	; 0x4cda <Main_Screen+0x2114>
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	e6 5c       	subi	r30, 0xC6	; 198
    4cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cd8:	10 82       	st	Z, r1
	    	  		cur_poz+=NAME_SIZE;
	    	  		EEPROM_ReadByte(cur_poz,stored_pass,PASS_SIZE);

	    	  		for(u8 i=0;i<NAME_SIZE;i++)
	    	  		    if(stored_name[i]!=name[i])ok1=0;
	    	  		for(u8 i=0;i<PASS_SIZE;i++)
    4cda:	de 01       	movw	r26, r28
    4cdc:	ab 5c       	subi	r26, 0xCB	; 203
    4cde:	be 4f       	sbci	r27, 0xFE	; 254
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	eb 5c       	subi	r30, 0xCB	; 203
    4ce4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce6:	80 81       	ld	r24, Z
    4ce8:	8f 5f       	subi	r24, 0xFF	; 255
    4cea:	8c 93       	st	X, r24
    4cec:	fe 01       	movw	r30, r28
    4cee:	eb 5c       	subi	r30, 0xCB	; 203
    4cf0:	fe 4f       	sbci	r31, 0xFE	; 254
    4cf2:	80 81       	ld	r24, Z
    4cf4:	84 30       	cpi	r24, 0x04	; 4
    4cf6:	88 f2       	brcs	.-94     	; 0x4c9a <Main_Screen+0x20d4>
	    	  			if(stored_pass[i]!=pass[i])ok2=0;

	    	  		if(ok1&&ok2){ok=1;break;}
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	e5 5c       	subi	r30, 0xC5	; 197
    4cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    4cfe:	80 81       	ld	r24, Z
    4d00:	88 23       	and	r24, r24
    4d02:	61 f0       	breq	.+24     	; 0x4d1c <Main_Screen+0x2156>
    4d04:	fe 01       	movw	r30, r28
    4d06:	e6 5c       	subi	r30, 0xC6	; 198
    4d08:	fe 4f       	sbci	r31, 0xFE	; 254
    4d0a:	80 81       	ld	r24, Z
    4d0c:	88 23       	and	r24, r24
    4d0e:	31 f0       	breq	.+12     	; 0x4d1c <Main_Screen+0x2156>
    4d10:	fe 01       	movw	r30, r28
    4d12:	e1 5c       	subi	r30, 0xC1	; 193
    4d14:	fe 4f       	sbci	r31, 0xFE	; 254
    4d16:	81 e0       	ldi	r24, 0x01	; 1
    4d18:	80 83       	st	Z, r24
    4d1a:	1b c0       	rjmp	.+54     	; 0x4d52 <Main_Screen+0x218c>
	    	  	// Compare
	    	  	u8 ok=0;

	    	  	 _delay_ms(500);
	    	  	LCD_clearscreen();
	    	    	for(u16 j=1;j<=Num_of_users;j++) { // iterate over all users
    4d1c:	de 01       	movw	r26, r28
    4d1e:	a4 5c       	subi	r26, 0xC4	; 196
    4d20:	be 4f       	sbci	r27, 0xFE	; 254
    4d22:	fe 01       	movw	r30, r28
    4d24:	e4 5c       	subi	r30, 0xC4	; 196
    4d26:	fe 4f       	sbci	r31, 0xFE	; 254
    4d28:	80 81       	ld	r24, Z
    4d2a:	91 81       	ldd	r25, Z+1	; 0x01
    4d2c:	01 96       	adiw	r24, 0x01	; 1
    4d2e:	11 96       	adiw	r26, 0x01	; 1
    4d30:	9c 93       	st	X, r25
    4d32:	8e 93       	st	-X, r24
    4d34:	fe 01       	movw	r30, r28
    4d36:	ed 5b       	subi	r30, 0xBD	; 189
    4d38:	fe 4f       	sbci	r31, 0xFE	; 254
    4d3a:	80 81       	ld	r24, Z
    4d3c:	28 2f       	mov	r18, r24
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	fe 01       	movw	r30, r28
    4d42:	e4 5c       	subi	r30, 0xC4	; 196
    4d44:	fe 4f       	sbci	r31, 0xFE	; 254
    4d46:	80 81       	ld	r24, Z
    4d48:	91 81       	ldd	r25, Z+1	; 0x01
    4d4a:	28 17       	cp	r18, r24
    4d4c:	39 07       	cpc	r19, r25
    4d4e:	08 f0       	brcs	.+2      	; 0x4d52 <Main_Screen+0x218c>
    4d50:	cf ce       	rjmp	.-610    	; 0x4af0 <Main_Screen+0x1f2a>
	    	  			if(stored_pass[i]!=pass[i])ok2=0;

	    	  		if(ok1&&ok2){ok=1;break;}
	    	 		}

	    	  		if (ok==1)  //in case of right name and password
    4d52:	fe 01       	movw	r30, r28
    4d54:	e1 5c       	subi	r30, 0xC1	; 193
    4d56:	fe 4f       	sbci	r31, 0xFE	; 254
    4d58:	80 81       	ld	r24, Z
    4d5a:	81 30       	cpi	r24, 0x01	; 1
    4d5c:	09 f0       	breq	.+2      	; 0x4d60 <Main_Screen+0x219a>
    4d5e:	09 c1       	rjmp	.+530    	; 0x4f72 <Main_Screen+0x23ac>
	    	  		{
	    	  				pass_tries_count=0;
    4d60:	fe 01       	movw	r30, r28
    4d62:	ec 5b       	subi	r30, 0xBC	; 188
    4d64:	fe 4f       	sbci	r31, 0xFE	; 254
    4d66:	10 82       	st	Z, r1
	    	  				LCD_vidWriteString("Right Data :) ",14);
    4d68:	8f e3       	ldi	r24, 0x3F	; 63
    4d6a:	91 e0       	ldi	r25, 0x01	; 1
    4d6c:	6e e0       	ldi	r22, 0x0E	; 14
    4d6e:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  				LedGreenOn();
    4d72:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <LedGreenOn>
	    	  				Allow_to_enter=1;
    4d76:	fe 01       	movw	r30, r28
    4d78:	ef 5a       	subi	r30, 0xAF	; 175
    4d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d7c:	81 e0       	ldi	r24, 0x01	; 1
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	91 83       	std	Z+1, r25	; 0x01
    4d82:	80 83       	st	Z, r24
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e8       	ldi	r25, 0x80	; 128
    4d88:	ab eb       	ldi	r26, 0xBB	; 187
    4d8a:	b4 e4       	ldi	r27, 0x44	; 68
    4d8c:	8d ab       	std	Y+53, r24	; 0x35
    4d8e:	9e ab       	std	Y+54, r25	; 0x36
    4d90:	af ab       	std	Y+55, r26	; 0x37
    4d92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d94:	6d a9       	ldd	r22, Y+53	; 0x35
    4d96:	7e a9       	ldd	r23, Y+54	; 0x36
    4d98:	8f a9       	ldd	r24, Y+55	; 0x37
    4d9a:	98 ad       	ldd	r25, Y+56	; 0x38
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	30 e0       	ldi	r19, 0x00	; 0
    4da0:	4a ef       	ldi	r20, 0xFA	; 250
    4da2:	54 e4       	ldi	r21, 0x44	; 68
    4da4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	89 ab       	std	Y+49, r24	; 0x31
    4dae:	9a ab       	std	Y+50, r25	; 0x32
    4db0:	ab ab       	std	Y+51, r26	; 0x33
    4db2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4db4:	69 a9       	ldd	r22, Y+49	; 0x31
    4db6:	7a a9       	ldd	r23, Y+50	; 0x32
    4db8:	8b a9       	ldd	r24, Y+51	; 0x33
    4dba:	9c a9       	ldd	r25, Y+52	; 0x34
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	40 e8       	ldi	r20, 0x80	; 128
    4dc2:	5f e3       	ldi	r21, 0x3F	; 63
    4dc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4dc8:	88 23       	and	r24, r24
    4dca:	2c f4       	brge	.+10     	; 0x4dd6 <Main_Screen+0x2210>
		__ticks = 1;
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	98 ab       	std	Y+48, r25	; 0x30
    4dd2:	8f a7       	std	Y+47, r24	; 0x2f
    4dd4:	3f c0       	rjmp	.+126    	; 0x4e54 <Main_Screen+0x228e>
	else if (__tmp > 65535)
    4dd6:	69 a9       	ldd	r22, Y+49	; 0x31
    4dd8:	7a a9       	ldd	r23, Y+50	; 0x32
    4dda:	8b a9       	ldd	r24, Y+51	; 0x33
    4ddc:	9c a9       	ldd	r25, Y+52	; 0x34
    4dde:	20 e0       	ldi	r18, 0x00	; 0
    4de0:	3f ef       	ldi	r19, 0xFF	; 255
    4de2:	4f e7       	ldi	r20, 0x7F	; 127
    4de4:	57 e4       	ldi	r21, 0x47	; 71
    4de6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4dea:	18 16       	cp	r1, r24
    4dec:	4c f5       	brge	.+82     	; 0x4e40 <Main_Screen+0x227a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dee:	6d a9       	ldd	r22, Y+53	; 0x35
    4df0:	7e a9       	ldd	r23, Y+54	; 0x36
    4df2:	8f a9       	ldd	r24, Y+55	; 0x37
    4df4:	98 ad       	ldd	r25, Y+56	; 0x38
    4df6:	20 e0       	ldi	r18, 0x00	; 0
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	40 e2       	ldi	r20, 0x20	; 32
    4dfc:	51 e4       	ldi	r21, 0x41	; 65
    4dfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e02:	dc 01       	movw	r26, r24
    4e04:	cb 01       	movw	r24, r22
    4e06:	bc 01       	movw	r22, r24
    4e08:	cd 01       	movw	r24, r26
    4e0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	98 ab       	std	Y+48, r25	; 0x30
    4e14:	8f a7       	std	Y+47, r24	; 0x2f
    4e16:	0f c0       	rjmp	.+30     	; 0x4e36 <Main_Screen+0x2270>
    4e18:	88 ec       	ldi	r24, 0xC8	; 200
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	9e a7       	std	Y+46, r25	; 0x2e
    4e1e:	8d a7       	std	Y+45, r24	; 0x2d
    4e20:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e22:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e24:	01 97       	sbiw	r24, 0x01	; 1
    4e26:	f1 f7       	brne	.-4      	; 0x4e24 <Main_Screen+0x225e>
    4e28:	9e a7       	std	Y+46, r25	; 0x2e
    4e2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    4e30:	01 97       	sbiw	r24, 0x01	; 1
    4e32:	98 ab       	std	Y+48, r25	; 0x30
    4e34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e36:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e38:	98 a9       	ldd	r25, Y+48	; 0x30
    4e3a:	00 97       	sbiw	r24, 0x00	; 0
    4e3c:	69 f7       	brne	.-38     	; 0x4e18 <Main_Screen+0x2252>
    4e3e:	14 c0       	rjmp	.+40     	; 0x4e68 <Main_Screen+0x22a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e40:	69 a9       	ldd	r22, Y+49	; 0x31
    4e42:	7a a9       	ldd	r23, Y+50	; 0x32
    4e44:	8b a9       	ldd	r24, Y+51	; 0x33
    4e46:	9c a9       	ldd	r25, Y+52	; 0x34
    4e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	98 ab       	std	Y+48, r25	; 0x30
    4e52:	8f a7       	std	Y+47, r24	; 0x2f
    4e54:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e56:	98 a9       	ldd	r25, Y+48	; 0x30
    4e58:	9c a7       	std	Y+44, r25	; 0x2c
    4e5a:	8b a7       	std	Y+43, r24	; 0x2b
    4e5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e60:	01 97       	sbiw	r24, 0x01	; 1
    4e62:	f1 f7       	brne	.-4      	; 0x4e60 <Main_Screen+0x229a>
    4e64:	9c a7       	std	Y+44, r25	; 0x2c
    4e66:	8b a7       	std	Y+43, r24	; 0x2b
	    	  				_delay_ms(1500);
	    	  				LCD_clearscreen();
    4e68:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	  				LCD_vidWriteString("Welcome to home",15);
    4e6c:	8e e4       	ldi	r24, 0x4E	; 78
    4e6e:	91 e0       	ldi	r25, 0x01	; 1
    4e70:	6f e0       	ldi	r22, 0x0F	; 15
    4e72:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  				LCD_vidSetPosition(1,0);
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	60 e0       	ldi	r22, 0x00	; 0
    4e7a:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
	    	  				LCD_vidWriteString("Nour and Ola",12);
    4e7e:	8e e5       	ldi	r24, 0x5E	; 94
    4e80:	91 e0       	ldi	r25, 0x01	; 1
    4e82:	6c e0       	ldi	r22, 0x0C	; 12
    4e84:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	90 e8       	ldi	r25, 0x80	; 128
    4e8c:	ab eb       	ldi	r26, 0xBB	; 187
    4e8e:	b4 e4       	ldi	r27, 0x44	; 68
    4e90:	8f a3       	std	Y+39, r24	; 0x27
    4e92:	98 a7       	std	Y+40, r25	; 0x28
    4e94:	a9 a7       	std	Y+41, r26	; 0x29
    4e96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e98:	6f a1       	ldd	r22, Y+39	; 0x27
    4e9a:	78 a5       	ldd	r23, Y+40	; 0x28
    4e9c:	89 a5       	ldd	r24, Y+41	; 0x29
    4e9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	4a ef       	ldi	r20, 0xFA	; 250
    4ea6:	54 e4       	ldi	r21, 0x44	; 68
    4ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4eac:	dc 01       	movw	r26, r24
    4eae:	cb 01       	movw	r24, r22
    4eb0:	8b a3       	std	Y+35, r24	; 0x23
    4eb2:	9c a3       	std	Y+36, r25	; 0x24
    4eb4:	ad a3       	std	Y+37, r26	; 0x25
    4eb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    4eba:	7c a1       	ldd	r23, Y+36	; 0x24
    4ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    4ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    4ec0:	20 e0       	ldi	r18, 0x00	; 0
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	40 e8       	ldi	r20, 0x80	; 128
    4ec6:	5f e3       	ldi	r21, 0x3F	; 63
    4ec8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4ecc:	88 23       	and	r24, r24
    4ece:	2c f4       	brge	.+10     	; 0x4eda <Main_Screen+0x2314>
		__ticks = 1;
    4ed0:	81 e0       	ldi	r24, 0x01	; 1
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	9a a3       	std	Y+34, r25	; 0x22
    4ed6:	89 a3       	std	Y+33, r24	; 0x21
    4ed8:	3f c0       	rjmp	.+126    	; 0x4f58 <Main_Screen+0x2392>
	else if (__tmp > 65535)
    4eda:	6b a1       	ldd	r22, Y+35	; 0x23
    4edc:	7c a1       	ldd	r23, Y+36	; 0x24
    4ede:	8d a1       	ldd	r24, Y+37	; 0x25
    4ee0:	9e a1       	ldd	r25, Y+38	; 0x26
    4ee2:	20 e0       	ldi	r18, 0x00	; 0
    4ee4:	3f ef       	ldi	r19, 0xFF	; 255
    4ee6:	4f e7       	ldi	r20, 0x7F	; 127
    4ee8:	57 e4       	ldi	r21, 0x47	; 71
    4eea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4eee:	18 16       	cp	r1, r24
    4ef0:	4c f5       	brge	.+82     	; 0x4f44 <Main_Screen+0x237e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef2:	6f a1       	ldd	r22, Y+39	; 0x27
    4ef4:	78 a5       	ldd	r23, Y+40	; 0x28
    4ef6:	89 a5       	ldd	r24, Y+41	; 0x29
    4ef8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4efa:	20 e0       	ldi	r18, 0x00	; 0
    4efc:	30 e0       	ldi	r19, 0x00	; 0
    4efe:	40 e2       	ldi	r20, 0x20	; 32
    4f00:	51 e4       	ldi	r21, 0x41	; 65
    4f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f06:	dc 01       	movw	r26, r24
    4f08:	cb 01       	movw	r24, r22
    4f0a:	bc 01       	movw	r22, r24
    4f0c:	cd 01       	movw	r24, r26
    4f0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f12:	dc 01       	movw	r26, r24
    4f14:	cb 01       	movw	r24, r22
    4f16:	9a a3       	std	Y+34, r25	; 0x22
    4f18:	89 a3       	std	Y+33, r24	; 0x21
    4f1a:	0f c0       	rjmp	.+30     	; 0x4f3a <Main_Screen+0x2374>
    4f1c:	88 ec       	ldi	r24, 0xC8	; 200
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	98 a3       	std	Y+32, r25	; 0x20
    4f22:	8f 8f       	std	Y+31, r24	; 0x1f
    4f24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f26:	98 a1       	ldd	r25, Y+32	; 0x20
    4f28:	01 97       	sbiw	r24, 0x01	; 1
    4f2a:	f1 f7       	brne	.-4      	; 0x4f28 <Main_Screen+0x2362>
    4f2c:	98 a3       	std	Y+32, r25	; 0x20
    4f2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f30:	89 a1       	ldd	r24, Y+33	; 0x21
    4f32:	9a a1       	ldd	r25, Y+34	; 0x22
    4f34:	01 97       	sbiw	r24, 0x01	; 1
    4f36:	9a a3       	std	Y+34, r25	; 0x22
    4f38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    4f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    4f3e:	00 97       	sbiw	r24, 0x00	; 0
    4f40:	69 f7       	brne	.-38     	; 0x4f1c <Main_Screen+0x2356>
    4f42:	14 c0       	rjmp	.+40     	; 0x4f6c <Main_Screen+0x23a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f44:	6b a1       	ldd	r22, Y+35	; 0x23
    4f46:	7c a1       	ldd	r23, Y+36	; 0x24
    4f48:	8d a1       	ldd	r24, Y+37	; 0x25
    4f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f50:	dc 01       	movw	r26, r24
    4f52:	cb 01       	movw	r24, r22
    4f54:	9a a3       	std	Y+34, r25	; 0x22
    4f56:	89 a3       	std	Y+33, r24	; 0x21
    4f58:	89 a1       	ldd	r24, Y+33	; 0x21
    4f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    4f5c:	9e 8f       	std	Y+30, r25	; 0x1e
    4f5e:	8d 8f       	std	Y+29, r24	; 0x1d
    4f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f64:	01 97       	sbiw	r24, 0x01	; 1
    4f66:	f1 f7       	brne	.-4      	; 0x4f64 <Main_Screen+0x239e>
    4f68:	9e 8f       	std	Y+30, r25	; 0x1e
    4f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	    	  				_delay_ms(1500);
	    	  				LCD_clearscreen();
    4f6c:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
    4f70:	56 c1       	rjmp	.+684    	; 0x521e <Main_Screen+0x2658>
	    	  				break;
	    	  		}
	    	  		else//in case of wrong password
	    	  		{
	    	  				pass_tries_count++;
    4f72:	de 01       	movw	r26, r28
    4f74:	ac 5b       	subi	r26, 0xBC	; 188
    4f76:	be 4f       	sbci	r27, 0xFE	; 254
    4f78:	fe 01       	movw	r30, r28
    4f7a:	ec 5b       	subi	r30, 0xBC	; 188
    4f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f7e:	80 81       	ld	r24, Z
    4f80:	8f 5f       	subi	r24, 0xFF	; 255
    4f82:	8c 93       	st	X, r24
	    	  				LCD_clearscreen();
    4f84:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	  				LedRedOn();
    4f88:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LedRedOn>
	    	  				LCD_vidWriteString("Wrong Pass",10);
    4f8c:	8b e6       	ldi	r24, 0x6B	; 107
    4f8e:	91 e0       	ldi	r25, 0x01	; 1
    4f90:	6a e0       	ldi	r22, 0x0A	; 10
    4f92:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  				LCD_vidSetPosition(1,0);
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	60 e0       	ldi	r22, 0x00	; 0
    4f9a:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
	    	  				LCD_vidWriteString("Tries left:",11);
    4f9e:	86 e7       	ldi	r24, 0x76	; 118
    4fa0:	91 e0       	ldi	r25, 0x01	; 1
    4fa2:	6b e0       	ldi	r22, 0x0B	; 11
    4fa4:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  				LCD_vidWriteNumber(TRIES_ALLOWED-pass_tries_count);
    4fa8:	fe 01       	movw	r30, r28
    4faa:	ec 5b       	subi	r30, 0xBC	; 188
    4fac:	fe 4f       	sbci	r31, 0xFE	; 254
    4fae:	80 81       	ld	r24, Z
    4fb0:	28 2f       	mov	r18, r24
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	83 e0       	ldi	r24, 0x03	; 3
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	82 1b       	sub	r24, r18
    4fba:	93 0b       	sbc	r25, r19
    4fbc:	aa 27       	eor	r26, r26
    4fbe:	97 fd       	sbrc	r25, 7
    4fc0:	a0 95       	com	r26
    4fc2:	ba 2f       	mov	r27, r26
    4fc4:	bc 01       	movw	r22, r24
    4fc6:	cd 01       	movw	r24, r26
    4fc8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_vidWriteNumber>
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	aa ef       	ldi	r26, 0xFA	; 250
    4fd2:	b4 e4       	ldi	r27, 0x44	; 68
    4fd4:	89 8f       	std	Y+25, r24	; 0x19
    4fd6:	9a 8f       	std	Y+26, r25	; 0x1a
    4fd8:	ab 8f       	std	Y+27, r26	; 0x1b
    4fda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    4fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	4a ef       	ldi	r20, 0xFA	; 250
    4fea:	54 e4       	ldi	r21, 0x44	; 68
    4fec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ff0:	dc 01       	movw	r26, r24
    4ff2:	cb 01       	movw	r24, r22
    4ff4:	8d 8b       	std	Y+21, r24	; 0x15
    4ff6:	9e 8b       	std	Y+22, r25	; 0x16
    4ff8:	af 8b       	std	Y+23, r26	; 0x17
    4ffa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    4ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    5000:	8f 89       	ldd	r24, Y+23	; 0x17
    5002:	98 8d       	ldd	r25, Y+24	; 0x18
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	40 e8       	ldi	r20, 0x80	; 128
    500a:	5f e3       	ldi	r21, 0x3F	; 63
    500c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5010:	88 23       	and	r24, r24
    5012:	2c f4       	brge	.+10     	; 0x501e <Main_Screen+0x2458>
		__ticks = 1;
    5014:	81 e0       	ldi	r24, 0x01	; 1
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	9c 8b       	std	Y+20, r25	; 0x14
    501a:	8b 8b       	std	Y+19, r24	; 0x13
    501c:	3f c0       	rjmp	.+126    	; 0x509c <Main_Screen+0x24d6>
	else if (__tmp > 65535)
    501e:	6d 89       	ldd	r22, Y+21	; 0x15
    5020:	7e 89       	ldd	r23, Y+22	; 0x16
    5022:	8f 89       	ldd	r24, Y+23	; 0x17
    5024:	98 8d       	ldd	r25, Y+24	; 0x18
    5026:	20 e0       	ldi	r18, 0x00	; 0
    5028:	3f ef       	ldi	r19, 0xFF	; 255
    502a:	4f e7       	ldi	r20, 0x7F	; 127
    502c:	57 e4       	ldi	r21, 0x47	; 71
    502e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5032:	18 16       	cp	r1, r24
    5034:	4c f5       	brge	.+82     	; 0x5088 <Main_Screen+0x24c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5036:	69 8d       	ldd	r22, Y+25	; 0x19
    5038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    503a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    503c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e2       	ldi	r20, 0x20	; 32
    5044:	51 e4       	ldi	r21, 0x41	; 65
    5046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    504a:	dc 01       	movw	r26, r24
    504c:	cb 01       	movw	r24, r22
    504e:	bc 01       	movw	r22, r24
    5050:	cd 01       	movw	r24, r26
    5052:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5056:	dc 01       	movw	r26, r24
    5058:	cb 01       	movw	r24, r22
    505a:	9c 8b       	std	Y+20, r25	; 0x14
    505c:	8b 8b       	std	Y+19, r24	; 0x13
    505e:	0f c0       	rjmp	.+30     	; 0x507e <Main_Screen+0x24b8>
    5060:	88 ec       	ldi	r24, 0xC8	; 200
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	9a 8b       	std	Y+18, r25	; 0x12
    5066:	89 8b       	std	Y+17, r24	; 0x11
    5068:	89 89       	ldd	r24, Y+17	; 0x11
    506a:	9a 89       	ldd	r25, Y+18	; 0x12
    506c:	01 97       	sbiw	r24, 0x01	; 1
    506e:	f1 f7       	brne	.-4      	; 0x506c <Main_Screen+0x24a6>
    5070:	9a 8b       	std	Y+18, r25	; 0x12
    5072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5074:	8b 89       	ldd	r24, Y+19	; 0x13
    5076:	9c 89       	ldd	r25, Y+20	; 0x14
    5078:	01 97       	sbiw	r24, 0x01	; 1
    507a:	9c 8b       	std	Y+20, r25	; 0x14
    507c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507e:	8b 89       	ldd	r24, Y+19	; 0x13
    5080:	9c 89       	ldd	r25, Y+20	; 0x14
    5082:	00 97       	sbiw	r24, 0x00	; 0
    5084:	69 f7       	brne	.-38     	; 0x5060 <Main_Screen+0x249a>
    5086:	14 c0       	rjmp	.+40     	; 0x50b0 <Main_Screen+0x24ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5088:	6d 89       	ldd	r22, Y+21	; 0x15
    508a:	7e 89       	ldd	r23, Y+22	; 0x16
    508c:	8f 89       	ldd	r24, Y+23	; 0x17
    508e:	98 8d       	ldd	r25, Y+24	; 0x18
    5090:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	9c 8b       	std	Y+20, r25	; 0x14
    509a:	8b 8b       	std	Y+19, r24	; 0x13
    509c:	8b 89       	ldd	r24, Y+19	; 0x13
    509e:	9c 89       	ldd	r25, Y+20	; 0x14
    50a0:	98 8b       	std	Y+16, r25	; 0x10
    50a2:	8f 87       	std	Y+15, r24	; 0x0f
    50a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    50a6:	98 89       	ldd	r25, Y+16	; 0x10
    50a8:	01 97       	sbiw	r24, 0x01	; 1
    50aa:	f1 f7       	brne	.-4      	; 0x50a8 <Main_Screen+0x24e2>
    50ac:	98 8b       	std	Y+16, r25	; 0x10
    50ae:	8f 87       	std	Y+15, r24	; 0x0f
	    	  				_delay_ms(2000);
	    	  				LedRedOff();
    50b0:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LedRedOff>

	    	  				LCD_clearscreen();
    50b4:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_clearscreen>
	    	  				if (pass_tries_count>=TRIES_ALLOWED)
    50b8:	fe 01       	movw	r30, r28
    50ba:	ec 5b       	subi	r30, 0xBC	; 188
    50bc:	fe 4f       	sbci	r31, 0xFE	; 254
    50be:	80 81       	ld	r24, Z
    50c0:	83 30       	cpi	r24, 0x03	; 3
    50c2:	08 f4       	brcc	.+2      	; 0x50c6 <Main_Screen+0x2500>
    50c4:	89 c0       	rjmp	.+274    	; 0x51d8 <Main_Screen+0x2612>
	    	  				{
	    	  					BuzzerOn();
    50c6:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <BuzzerOn>
	    	  					LedRedOn();
    50ca:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LedRedOn>
	    	  					LCD_vidWriteString("Session Timeout",15);
    50ce:	82 e8       	ldi	r24, 0x82	; 130
    50d0:	91 e0       	ldi	r25, 0x01	; 1
    50d2:	6f e0       	ldi	r22, 0x0F	; 15
    50d4:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
	    	  					LCD_vidSetPosition(1,0);
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	60 e0       	ldi	r22, 0x00	; 0
    50dc:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_vidSetPosition>
	    	  					LCD_vidWriteString("You Can't Enter",15);
    50e0:	82 e9       	ldi	r24, 0x92	; 146
    50e2:	91 e0       	ldi	r25, 0x01	; 1
    50e4:	6f e0       	ldi	r22, 0x0F	; 15
    50e6:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_vidWriteString>
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	90 e8       	ldi	r25, 0x80	; 128
    50ee:	ab e3       	ldi	r26, 0x3B	; 59
    50f0:	b5 e4       	ldi	r27, 0x45	; 69
    50f2:	8b 87       	std	Y+11, r24	; 0x0b
    50f4:	9c 87       	std	Y+12, r25	; 0x0c
    50f6:	ad 87       	std	Y+13, r26	; 0x0d
    50f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    50fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    50fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5100:	9e 85       	ldd	r25, Y+14	; 0x0e
    5102:	20 e0       	ldi	r18, 0x00	; 0
    5104:	30 e0       	ldi	r19, 0x00	; 0
    5106:	4a ef       	ldi	r20, 0xFA	; 250
    5108:	54 e4       	ldi	r21, 0x44	; 68
    510a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    510e:	dc 01       	movw	r26, r24
    5110:	cb 01       	movw	r24, r22
    5112:	8f 83       	std	Y+7, r24	; 0x07
    5114:	98 87       	std	Y+8, r25	; 0x08
    5116:	a9 87       	std	Y+9, r26	; 0x09
    5118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    511a:	6f 81       	ldd	r22, Y+7	; 0x07
    511c:	78 85       	ldd	r23, Y+8	; 0x08
    511e:	89 85       	ldd	r24, Y+9	; 0x09
    5120:	9a 85       	ldd	r25, Y+10	; 0x0a
    5122:	20 e0       	ldi	r18, 0x00	; 0
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	40 e8       	ldi	r20, 0x80	; 128
    5128:	5f e3       	ldi	r21, 0x3F	; 63
    512a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    512e:	88 23       	and	r24, r24
    5130:	2c f4       	brge	.+10     	; 0x513c <Main_Screen+0x2576>
		__ticks = 1;
    5132:	81 e0       	ldi	r24, 0x01	; 1
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	9e 83       	std	Y+6, r25	; 0x06
    5138:	8d 83       	std	Y+5, r24	; 0x05
    513a:	3f c0       	rjmp	.+126    	; 0x51ba <Main_Screen+0x25f4>
	else if (__tmp > 65535)
    513c:	6f 81       	ldd	r22, Y+7	; 0x07
    513e:	78 85       	ldd	r23, Y+8	; 0x08
    5140:	89 85       	ldd	r24, Y+9	; 0x09
    5142:	9a 85       	ldd	r25, Y+10	; 0x0a
    5144:	20 e0       	ldi	r18, 0x00	; 0
    5146:	3f ef       	ldi	r19, 0xFF	; 255
    5148:	4f e7       	ldi	r20, 0x7F	; 127
    514a:	57 e4       	ldi	r21, 0x47	; 71
    514c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5150:	18 16       	cp	r1, r24
    5152:	4c f5       	brge	.+82     	; 0x51a6 <Main_Screen+0x25e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5154:	6b 85       	ldd	r22, Y+11	; 0x0b
    5156:	7c 85       	ldd	r23, Y+12	; 0x0c
    5158:	8d 85       	ldd	r24, Y+13	; 0x0d
    515a:	9e 85       	ldd	r25, Y+14	; 0x0e
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	30 e0       	ldi	r19, 0x00	; 0
    5160:	40 e2       	ldi	r20, 0x20	; 32
    5162:	51 e4       	ldi	r21, 0x41	; 65
    5164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5168:	dc 01       	movw	r26, r24
    516a:	cb 01       	movw	r24, r22
    516c:	bc 01       	movw	r22, r24
    516e:	cd 01       	movw	r24, r26
    5170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5174:	dc 01       	movw	r26, r24
    5176:	cb 01       	movw	r24, r22
    5178:	9e 83       	std	Y+6, r25	; 0x06
    517a:	8d 83       	std	Y+5, r24	; 0x05
    517c:	0f c0       	rjmp	.+30     	; 0x519c <Main_Screen+0x25d6>
    517e:	88 ec       	ldi	r24, 0xC8	; 200
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	9c 83       	std	Y+4, r25	; 0x04
    5184:	8b 83       	std	Y+3, r24	; 0x03
    5186:	8b 81       	ldd	r24, Y+3	; 0x03
    5188:	9c 81       	ldd	r25, Y+4	; 0x04
    518a:	01 97       	sbiw	r24, 0x01	; 1
    518c:	f1 f7       	brne	.-4      	; 0x518a <Main_Screen+0x25c4>
    518e:	9c 83       	std	Y+4, r25	; 0x04
    5190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5192:	8d 81       	ldd	r24, Y+5	; 0x05
    5194:	9e 81       	ldd	r25, Y+6	; 0x06
    5196:	01 97       	sbiw	r24, 0x01	; 1
    5198:	9e 83       	std	Y+6, r25	; 0x06
    519a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    519c:	8d 81       	ldd	r24, Y+5	; 0x05
    519e:	9e 81       	ldd	r25, Y+6	; 0x06
    51a0:	00 97       	sbiw	r24, 0x00	; 0
    51a2:	69 f7       	brne	.-38     	; 0x517e <Main_Screen+0x25b8>
    51a4:	14 c0       	rjmp	.+40     	; 0x51ce <Main_Screen+0x2608>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51a6:	6f 81       	ldd	r22, Y+7	; 0x07
    51a8:	78 85       	ldd	r23, Y+8	; 0x08
    51aa:	89 85       	ldd	r24, Y+9	; 0x09
    51ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    51b2:	dc 01       	movw	r26, r24
    51b4:	cb 01       	movw	r24, r22
    51b6:	9e 83       	std	Y+6, r25	; 0x06
    51b8:	8d 83       	std	Y+5, r24	; 0x05
    51ba:	8d 81       	ldd	r24, Y+5	; 0x05
    51bc:	9e 81       	ldd	r25, Y+6	; 0x06
    51be:	9a 83       	std	Y+2, r25	; 0x02
    51c0:	89 83       	std	Y+1, r24	; 0x01
    51c2:	89 81       	ldd	r24, Y+1	; 0x01
    51c4:	9a 81       	ldd	r25, Y+2	; 0x02
    51c6:	01 97       	sbiw	r24, 0x01	; 1
    51c8:	f1 f7       	brne	.-4      	; 0x51c6 <Main_Screen+0x2600>
    51ca:	9a 83       	std	Y+2, r25	; 0x02
    51cc:	89 83       	std	Y+1, r24	; 0x01
	    	  					_delay_ms(3000);
	    	  					LedRedOff();
    51ce:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LedRedOff>
	    	  					BuzzerOff();
    51d2:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <BuzzerOff>
    51d6:	23 c0       	rjmp	.+70     	; 0x521e <Main_Screen+0x2658>
	    	  if(Num_of_users==0xff){
	    	    LCD_vidWriteString("NO Register yet",15);
	    	      	     return 0;
	    	      }

	        while(cnt++<TRIES_ALLOWED){
    51d8:	ca 54       	subi	r28, 0x4A	; 74
    51da:	de 4f       	sbci	r29, 0xFE	; 254
    51dc:	18 82       	st	Y, r1
    51de:	c6 5b       	subi	r28, 0xB6	; 182
    51e0:	d1 40       	sbci	r29, 0x01	; 1
    51e2:	fe 01       	movw	r30, r28
    51e4:	eb 5b       	subi	r30, 0xBB	; 187
    51e6:	fe 4f       	sbci	r31, 0xFE	; 254
    51e8:	80 81       	ld	r24, Z
    51ea:	83 30       	cpi	r24, 0x03	; 3
    51ec:	30 f4       	brcc	.+12     	; 0x51fa <Main_Screen+0x2634>
    51ee:	f1 e0       	ldi	r31, 0x01	; 1
    51f0:	ca 54       	subi	r28, 0x4A	; 74
    51f2:	de 4f       	sbci	r29, 0xFE	; 254
    51f4:	f8 83       	st	Y, r31
    51f6:	c6 5b       	subi	r28, 0xB6	; 182
    51f8:	d1 40       	sbci	r29, 0x01	; 1
    51fa:	de 01       	movw	r26, r28
    51fc:	ab 5b       	subi	r26, 0xBB	; 187
    51fe:	be 4f       	sbci	r27, 0xFE	; 254
    5200:	fe 01       	movw	r30, r28
    5202:	eb 5b       	subi	r30, 0xBB	; 187
    5204:	fe 4f       	sbci	r31, 0xFE	; 254
    5206:	80 81       	ld	r24, Z
    5208:	8f 5f       	subi	r24, 0xFF	; 255
    520a:	8c 93       	st	X, r24
    520c:	ca 54       	subi	r28, 0x4A	; 74
    520e:	de 4f       	sbci	r29, 0xFE	; 254
    5210:	88 81       	ld	r24, Y
    5212:	c6 5b       	subi	r28, 0xB6	; 182
    5214:	d1 40       	sbci	r29, 0x01	; 1
    5216:	88 23       	and	r24, r24
    5218:	11 f0       	breq	.+4      	; 0x521e <Main_Screen+0x2658>
    521a:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <Main_Screen+0x14b2>
	    	  					BuzzerOff();
	    	  						break;
	    	  		       }
	    	  		}
	          }
	    	  return Allow_to_enter;
    521e:	fe 01       	movw	r30, r28
    5220:	ef 5a       	subi	r30, 0xAF	; 175
    5222:	fe 4f       	sbci	r31, 0xFE	; 254
    5224:	a0 81       	ld	r26, Z
    5226:	c9 54       	subi	r28, 0x49	; 73
    5228:	de 4f       	sbci	r29, 0xFE	; 254
    522a:	a8 83       	st	Y, r26
    522c:	c7 5b       	subi	r28, 0xB7	; 183
    522e:	d1 40       	sbci	r29, 0x01	; 1
    5230:	c9 54       	subi	r28, 0x49	; 73
    5232:	de 4f       	sbci	r29, 0xFE	; 254
    5234:	88 81       	ld	r24, Y
    5236:	c7 5b       	subi	r28, 0xB7	; 183
    5238:	d1 40       	sbci	r29, 0x01	; 1
	      }
}
    523a:	c9 54       	subi	r28, 0x49	; 73
    523c:	de 4f       	sbci	r29, 0xFE	; 254
    523e:	0f b6       	in	r0, 0x3f	; 63
    5240:	f8 94       	cli
    5242:	de bf       	out	0x3e, r29	; 62
    5244:	0f be       	out	0x3f, r0	; 63
    5246:	cd bf       	out	0x3d, r28	; 61
    5248:	cf 91       	pop	r28
    524a:	df 91       	pop	r29
    524c:	1f 91       	pop	r17
    524e:	0f 91       	pop	r16
    5250:	08 95       	ret

00005252 <__udivmodsi4>:
    5252:	a1 e2       	ldi	r26, 0x21	; 33
    5254:	1a 2e       	mov	r1, r26
    5256:	aa 1b       	sub	r26, r26
    5258:	bb 1b       	sub	r27, r27
    525a:	fd 01       	movw	r30, r26
    525c:	0d c0       	rjmp	.+26     	; 0x5278 <__udivmodsi4_ep>

0000525e <__udivmodsi4_loop>:
    525e:	aa 1f       	adc	r26, r26
    5260:	bb 1f       	adc	r27, r27
    5262:	ee 1f       	adc	r30, r30
    5264:	ff 1f       	adc	r31, r31
    5266:	a2 17       	cp	r26, r18
    5268:	b3 07       	cpc	r27, r19
    526a:	e4 07       	cpc	r30, r20
    526c:	f5 07       	cpc	r31, r21
    526e:	20 f0       	brcs	.+8      	; 0x5278 <__udivmodsi4_ep>
    5270:	a2 1b       	sub	r26, r18
    5272:	b3 0b       	sbc	r27, r19
    5274:	e4 0b       	sbc	r30, r20
    5276:	f5 0b       	sbc	r31, r21

00005278 <__udivmodsi4_ep>:
    5278:	66 1f       	adc	r22, r22
    527a:	77 1f       	adc	r23, r23
    527c:	88 1f       	adc	r24, r24
    527e:	99 1f       	adc	r25, r25
    5280:	1a 94       	dec	r1
    5282:	69 f7       	brne	.-38     	; 0x525e <__udivmodsi4_loop>
    5284:	60 95       	com	r22
    5286:	70 95       	com	r23
    5288:	80 95       	com	r24
    528a:	90 95       	com	r25
    528c:	9b 01       	movw	r18, r22
    528e:	ac 01       	movw	r20, r24
    5290:	bd 01       	movw	r22, r26
    5292:	cf 01       	movw	r24, r30
    5294:	08 95       	ret

00005296 <__prologue_saves__>:
    5296:	2f 92       	push	r2
    5298:	3f 92       	push	r3
    529a:	4f 92       	push	r4
    529c:	5f 92       	push	r5
    529e:	6f 92       	push	r6
    52a0:	7f 92       	push	r7
    52a2:	8f 92       	push	r8
    52a4:	9f 92       	push	r9
    52a6:	af 92       	push	r10
    52a8:	bf 92       	push	r11
    52aa:	cf 92       	push	r12
    52ac:	df 92       	push	r13
    52ae:	ef 92       	push	r14
    52b0:	ff 92       	push	r15
    52b2:	0f 93       	push	r16
    52b4:	1f 93       	push	r17
    52b6:	cf 93       	push	r28
    52b8:	df 93       	push	r29
    52ba:	cd b7       	in	r28, 0x3d	; 61
    52bc:	de b7       	in	r29, 0x3e	; 62
    52be:	ca 1b       	sub	r28, r26
    52c0:	db 0b       	sbc	r29, r27
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	f8 94       	cli
    52c6:	de bf       	out	0x3e, r29	; 62
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	cd bf       	out	0x3d, r28	; 61
    52cc:	09 94       	ijmp

000052ce <__epilogue_restores__>:
    52ce:	2a 88       	ldd	r2, Y+18	; 0x12
    52d0:	39 88       	ldd	r3, Y+17	; 0x11
    52d2:	48 88       	ldd	r4, Y+16	; 0x10
    52d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    52d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    52d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    52da:	8c 84       	ldd	r8, Y+12	; 0x0c
    52dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    52de:	aa 84       	ldd	r10, Y+10	; 0x0a
    52e0:	b9 84       	ldd	r11, Y+9	; 0x09
    52e2:	c8 84       	ldd	r12, Y+8	; 0x08
    52e4:	df 80       	ldd	r13, Y+7	; 0x07
    52e6:	ee 80       	ldd	r14, Y+6	; 0x06
    52e8:	fd 80       	ldd	r15, Y+5	; 0x05
    52ea:	0c 81       	ldd	r16, Y+4	; 0x04
    52ec:	1b 81       	ldd	r17, Y+3	; 0x03
    52ee:	aa 81       	ldd	r26, Y+2	; 0x02
    52f0:	b9 81       	ldd	r27, Y+1	; 0x01
    52f2:	ce 0f       	add	r28, r30
    52f4:	d1 1d       	adc	r29, r1
    52f6:	0f b6       	in	r0, 0x3f	; 63
    52f8:	f8 94       	cli
    52fa:	de bf       	out	0x3e, r29	; 62
    52fc:	0f be       	out	0x3f, r0	; 63
    52fe:	cd bf       	out	0x3d, r28	; 61
    5300:	ed 01       	movw	r28, r26
    5302:	08 95       	ret

00005304 <_exit>:
    5304:	f8 94       	cli

00005306 <__stop_program>:
    5306:	ff cf       	rjmp	.-2      	; 0x5306 <__stop_program>
